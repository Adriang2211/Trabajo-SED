
Sistema de riego.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006508  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a0  080068a0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068a8  080068a8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068ac  080068ac  000168ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080068b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000009c  0800694c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  0800694c  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f54e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d3  00000000  00000000  0002f61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  000316f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000325d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dad  00000000  00000000  000333e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011695  00000000  00000000  0004b18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a62f  00000000  00000000  0005c822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a4  00000000  00000000  000f6ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006690 	.word	0x08006690

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08006690 	.word	0x08006690

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <HAL_ADC_ConvCpltCallback>:
int counter;
int settings = 0;
char time_h [2]; //Mostrar hora en display
char time_m [2]; //Mostrar minutos en display

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1){
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d107      	bne.n	8000bc2 <HAL_ADC_ConvCpltCallback+0x22>
		ADC_value[0]=ADC_buffer[0]; // Nivel
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_ADC_ConvCpltCallback+0x34>)
 8000bb4:	881a      	ldrh	r2, [r3, #0]
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0x38>)
 8000bb8:	801a      	strh	r2, [r3, #0]
		ADC_value[1]=ADC_buffer[1]; // Tierra
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_ADC_ConvCpltCallback+0x34>)
 8000bbc:	885a      	ldrh	r2, [r3, #2]
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_ADC_ConvCpltCallback+0x38>)
 8000bc0:	805a      	strh	r2, [r3, #2]
	}
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40012000 	.word	0x40012000
 8000bd4:	20000248 	.word	0x20000248
 8000bd8:	20000244 	.word	0x20000244

08000bdc <detec_lvl>:

int detec_lvl(uint16_t valor){ // nivel del deposito
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
	if ( valor >=4000)
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000bec:	d301      	bcc.n	8000bf2 <detec_lvl+0x16>
		return 3;//50<x<100%
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e015      	b.n	8000c1e <detec_lvl+0x42>
	else if (valor<4000 && valor>=3500)
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000bf8:	d206      	bcs.n	8000c08 <detec_lvl+0x2c>
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d901      	bls.n	8000c08 <detec_lvl+0x2c>
		return 2;//<=25<x<50%
 8000c04:	2302      	movs	r3, #2
 8000c06:	e00a      	b.n	8000c1e <detec_lvl+0x42>
	else if(valor<3500 && valor>200)
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d804      	bhi.n	8000c1c <detec_lvl+0x40>
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	2bc8      	cmp	r3, #200	; 0xc8
 8000c16:	d901      	bls.n	8000c1c <detec_lvl+0x40>
		return 1;//<=25%
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <detec_lvl+0x42>
	else
		return 0;//0%
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <humedad>:

int humedad(int medida){ //porcentaje de humedad
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
float porce=0;
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
float num=0;
 8000c3a:	f04f 0300 	mov.w	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
	if(medida<1000)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c46:	da01      	bge.n	8000c4c <humedad+0x20>
	{
		return 0;// 0% de humedad
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e01a      	b.n	8000c82 <humedad+0x56>
	} else {
		num=(medida-1000);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5a:	edc7 7a02 	vstr	s15, [r7, #8]
		porce=((num/(4095-1000))*100);
 8000c5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c62:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000c90 <humedad+0x64>
 8000c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c6a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000c94 <humedad+0x68>
 8000c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c72:	edc7 7a03 	vstr	s15, [r7, #12]
		return (int)porce;
 8000c76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7e:	ee17 3a90 	vmov	r3, s15
	}
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	45417000 	.word	0x45417000
 8000c94:	42c80000 	.word	0x42c80000

08000c98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==GPIO_PIN_0 && (HAL_GetTick()-ultima_pulsacion)>T_DEBOUNCER){
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d123      	bne.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x58>
 8000ca8:	f001 fb32 	bl	8002310 <HAL_GetTick>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cb8:	d91a      	bls.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x58>
    	if (flag_riego == 0){
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x64>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d103      	bne.n	8000cca <HAL_GPIO_EXTI_Callback+0x32>
    		flag_boton = 1; //Si se pulsa el boton cuando no se esta regando
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x68>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	e00c      	b.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x4c>
    	} else {
    		flag_riego = 0; //Si se pulsa el boton mientras se esta regando se para de regar
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
    		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_2);
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	480c      	ldr	r0, [pc, #48]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000cd4:	f004 f992 	bl	8004ffc <HAL_TIM_OC_Stop_IT>
    		ultima_vez = HAL_GetTick();
 8000cd8:	f001 fb1a 	bl	8002310 <HAL_GetTick>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ce2:	601a      	str	r2, [r3, #0]
    	}
    	ultima_pulsacion = HAL_GetTick();
 8000ce4:	f001 fb14 	bl	8002310 <HAL_GetTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b02      	ldr	r3, [pc, #8]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000cee:	601a      	str	r2, [r3, #0]
    }
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000027c 	.word	0x2000027c
 8000cfc:	2000024c 	.word	0x2000024c
 8000d00:	20000250 	.word	0x20000250
 8000d04:	200001b4 	.word	0x200001b4
 8000d08:	20000280 	.word	0x20000280

08000d0c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback (TIM_HandleTypeDef* htim){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d11b      	bne.n	8000d56 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		if(nint==0)
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d103      	bne.n	8000d2e <HAL_TIM_OC_DelayElapsedCallback+0x22>
			nint=1;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
					HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_2);
					__HAL_TIM_SET_COUNTER(&htim1, 0);
					ultima_vez = HAL_GetTick();
		}
	}
}
 8000d2c:	e013      	b.n	8000d56 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		{	nint=0;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
			flag_riego = 0;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
					HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_2);
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000d3e:	f004 f95d 	bl	8004ffc <HAL_TIM_OC_Stop_IT>
					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
					ultima_vez = HAL_GetTick();
 8000d4a:	f001 fae1 	bl	8002310 <HAL_GetTick>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40010000 	.word	0x40010000
 8000d64:	20000284 	.word	0x20000284
 8000d68:	2000024c 	.word	0x2000024c
 8000d6c:	200001b4 	.word	0x200001b4
 8000d70:	20000280 	.word	0x20000280

08000d74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d84:	d13a      	bne.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x88>
				lcd_update(texto_pantalla);
 8000d86:	481f      	ldr	r0, [pc, #124]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d88:	f000 ffea 	bl	8001d60 <lcd_update>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2200      	movs	r2, #0
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24

		//Guardar las medidas de humedad
		for (int i = 0; i < NUM_MEDIDAS-1; i++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e00b      	b.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x3e>
			ultimas_medidas[i] = ultimas_medidas[i+1];
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000da0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000da4:	4919      	ldr	r1, [pc, #100]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < NUM_MEDIDAS-1; i++)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	ddf0      	ble.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x26>
		ultimas_medidas[NUM_MEDIDAS-1] = humedad(ADC_value[1]);
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000dba:	885b      	ldrh	r3, [r3, #2]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff35 	bl	8000c2c <humedad>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24

		//Cacular la media
		uint32_t sumatorio = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
		for (int i = 0; i < NUM_MEDIDAS ; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e009      	b.n	8000de8 <HAL_TIM_PeriodElapsedCallback+0x74>
			sumatorio += ultimas_medidas[i];
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4413      	add	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
		for (int i = 0; i < NUM_MEDIDAS ; i++)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b09      	cmp	r3, #9
 8000dec:	ddf2      	ble.n	8000dd4 <HAL_TIM_PeriodElapsedCallback+0x60>
		media = sumatorio / NUM_MEDIDAS;
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	08db      	lsrs	r3, r3, #3
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000dfa:	6013      	str	r3, [r2, #0]
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000025c 	.word	0x2000025c
 8000e08:	200001fc 	.word	0x200001fc
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000244 	.word	0x20000244
 8000e14:	cccccccd 	.word	0xcccccccd
 8000e18:	20000258 	.word	0x20000258
 8000e1c:	00000000 	.word	0x00000000

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f001 fa0d 	bl	8002244 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 fc6d 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 fe71 	bl	8001b14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e32:	f000 fe4f 	bl	8001ad4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e36:	f000 fccf 	bl	80017d8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e3a:	f000 fd5b 	bl	80018f4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000e3e:	f000 fd2b 	bl	8001898 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e42:	f000 fdf9 	bl	8001a38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000e46:	f000 ff17 	bl	8001c78 <lcd_init>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, 2);
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	49a0      	ldr	r1, [pc, #640]	; (80010d0 <main+0x2b0>)
 8000e4e:	48a1      	ldr	r0, [pc, #644]	; (80010d4 <main+0x2b4>)
 8000e50:	f001 fbe2 	bl	8002618 <HAL_ADC_Start_DMA>
  strcpy(texto_pantalla, "Bienvenido al   sistema de riego");
 8000e54:	4aa0      	ldr	r2, [pc, #640]	; (80010d8 <main+0x2b8>)
 8000e56:	4ba1      	ldr	r3, [pc, #644]	; (80010dc <main+0x2bc>)
 8000e58:	4614      	mov	r4, r2
 8000e5a:	461d      	mov	r5, r3
 8000e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e64:	682b      	ldr	r3, [r5, #0]
 8000e66:	7023      	strb	r3, [r4, #0]
  lcd_update(texto_pantalla);
 8000e68:	489b      	ldr	r0, [pc, #620]	; (80010d8 <main+0x2b8>)
 8000e6a:	f000 ff79 	bl	8001d60 <lcd_update>
  uint32_t tiempo= HAL_GetTick();
 8000e6e:	f001 fa4f 	bl	8002310 <HAL_GetTick>
 8000e72:	6078      	str	r0, [r7, #4]
 while( (HAL_GetTick()-tiempo)<1000)
 8000e74:	e009      	b.n	8000e8a <main+0x6a>
{
	 strcpy(texto_pantalla, "Bienvenido al   sistema de riego");
 8000e76:	4a98      	ldr	r2, [pc, #608]	; (80010d8 <main+0x2b8>)
 8000e78:	4b98      	ldr	r3, [pc, #608]	; (80010dc <main+0x2bc>)
 8000e7a:	4614      	mov	r4, r2
 8000e7c:	461d      	mov	r5, r3
 8000e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	7023      	strb	r3, [r4, #0]
 while( (HAL_GetTick()-tiempo)<1000)
 8000e8a:	f001 fa41 	bl	8002310 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e98:	d3ed      	bcc.n	8000e76 <main+0x56>
  //Para que el mensaje se mantenga en la patanlla 1 segundo
 }
  lcd_clear();
 8000e9a:	f000 ff6e 	bl	8001d7a <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e9e:	4890      	ldr	r0, [pc, #576]	; (80010e0 <main+0x2c0>)
 8000ea0:	f003 fef2 	bl	8004c88 <HAL_TIM_Base_Start_IT>

//Para instertar la hora actual
  counter = HAL_GetTick();
 8000ea4:	f001 fa34 	bl	8002310 <HAL_GetTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b8d      	ldr	r3, [pc, #564]	; (80010e4 <main+0x2c4>)
 8000eae:	601a      	str	r2, [r3, #0]
    while (!OK_hour){// Set hora
 8000eb0:	e057      	b.n	8000f62 <main+0x142>
  	  if (flag_boton){//Se incrementa 1 hora cada vez que se pulsa el boton
 8000eb2:	4b8d      	ldr	r3, [pc, #564]	; (80010e8 <main+0x2c8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d015      	beq.n	8000ee6 <main+0xc6>
    		if (intro_hour < 23){
 8000eba:	4b8c      	ldr	r3, [pc, #560]	; (80010ec <main+0x2cc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b16      	cmp	r3, #22
 8000ec0:	dc05      	bgt.n	8000ece <main+0xae>
    			intro_hour++;
 8000ec2:	4b8a      	ldr	r3, [pc, #552]	; (80010ec <main+0x2cc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a88      	ldr	r2, [pc, #544]	; (80010ec <main+0x2cc>)
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e002      	b.n	8000ed4 <main+0xb4>
    		} else {
    			intro_hour = 0; //Vuelta a 0
 8000ece:	4b87      	ldr	r3, [pc, #540]	; (80010ec <main+0x2cc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
    		}
    		flag_boton = 0;
 8000ed4:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <main+0x2c8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
    		counter = HAL_GetTick();
 8000eda:	f001 fa19 	bl	8002310 <HAL_GetTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b80      	ldr	r3, [pc, #512]	; (80010e4 <main+0x2c4>)
 8000ee4:	601a      	str	r2, [r3, #0]
    	}
    	if (HAL_GetTick() - counter > 5000){
 8000ee6:	f001 fa13 	bl	8002310 <HAL_GetTick>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a7d      	ldr	r2, [pc, #500]	; (80010e4 <main+0x2c4>)
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d902      	bls.n	8000f00 <main+0xe0>
    		OK_hour = 1; //Si no se pulsa en 5segundos, se da por terminado el cambio de la hora
 8000efa:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <main+0x2d0>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]
    	}
      //Mensaje en la pantalla
  	  if (intro_hour >= 10)
 8000f00:	4b7a      	ldr	r3, [pc, #488]	; (80010ec <main+0x2cc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b09      	cmp	r3, #9
 8000f06:	dd07      	ble.n	8000f18 <main+0xf8>
  	  	  sprintf(time_h, "%i", intro_hour);
 8000f08:	4b78      	ldr	r3, [pc, #480]	; (80010ec <main+0x2cc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4979      	ldr	r1, [pc, #484]	; (80010f4 <main+0x2d4>)
 8000f10:	4879      	ldr	r0, [pc, #484]	; (80010f8 <main+0x2d8>)
 8000f12:	f004 ff41 	bl	8005d98 <siprintf>
 8000f16:	e006      	b.n	8000f26 <main+0x106>
  	  else
  		  sprintf(time_h, "0%i", intro_hour);
 8000f18:	4b74      	ldr	r3, [pc, #464]	; (80010ec <main+0x2cc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4977      	ldr	r1, [pc, #476]	; (80010fc <main+0x2dc>)
 8000f20:	4875      	ldr	r0, [pc, #468]	; (80010f8 <main+0x2d8>)
 8000f22:	f004 ff39 	bl	8005d98 <siprintf>

    	strcpy (texto_pantalla, "Actual (hora):  ");
 8000f26:	4a6c      	ldr	r2, [pc, #432]	; (80010d8 <main+0x2b8>)
 8000f28:	4b75      	ldr	r3, [pc, #468]	; (8001100 <main+0x2e0>)
 8000f2a:	4614      	mov	r4, r2
 8000f2c:	461d      	mov	r5, r3
 8000f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f32:	682b      	ldr	r3, [r5, #0]
 8000f34:	7023      	strb	r3, [r4, #0]
    	strcat(texto_pantalla, time_h);
 8000f36:	4970      	ldr	r1, [pc, #448]	; (80010f8 <main+0x2d8>)
 8000f38:	4867      	ldr	r0, [pc, #412]	; (80010d8 <main+0x2b8>)
 8000f3a:	f004 ff4d 	bl	8005dd8 <strcat>
    	strcat(texto_pantalla, ":00           ");
 8000f3e:	4866      	ldr	r0, [pc, #408]	; (80010d8 <main+0x2b8>)
 8000f40:	f7ff f94e 	bl	80001e0 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b63      	ldr	r3, [pc, #396]	; (80010d8 <main+0x2b8>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a6d      	ldr	r2, [pc, #436]	; (8001104 <main+0x2e4>)
 8000f4e:	461c      	mov	r4, r3
 8000f50:	4613      	mov	r3, r2
 8000f52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f54:	6020      	str	r0, [r4, #0]
 8000f56:	6061      	str	r1, [r4, #4]
 8000f58:	60a2      	str	r2, [r4, #8]
 8000f5a:	881a      	ldrh	r2, [r3, #0]
 8000f5c:	789b      	ldrb	r3, [r3, #2]
 8000f5e:	81a2      	strh	r2, [r4, #12]
 8000f60:	73a3      	strb	r3, [r4, #14]
    while (!OK_hour){// Set hora
 8000f62:	4b63      	ldr	r3, [pc, #396]	; (80010f0 <main+0x2d0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0a3      	beq.n	8000eb2 <main+0x92>
    }
    counter = HAL_GetTick();
 8000f6a:	f001 f9d1 	bl	8002310 <HAL_GetTick>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <main+0x2c4>)
 8000f74:	601a      	str	r2, [r3, #0]
    while (!OK_minute){ // Set minutos
 8000f76:	e063      	b.n	8001040 <main+0x220>
    	if (flag_boton){ //Se incrementa 1 minuto cada vez que se pulsa el boton
 8000f78:	4b5b      	ldr	r3, [pc, #364]	; (80010e8 <main+0x2c8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d015      	beq.n	8000fac <main+0x18c>
    		if (intro_minute < 59){
 8000f80:	4b61      	ldr	r3, [pc, #388]	; (8001108 <main+0x2e8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b3a      	cmp	r3, #58	; 0x3a
 8000f86:	dc05      	bgt.n	8000f94 <main+0x174>
    			intro_minute++;
 8000f88:	4b5f      	ldr	r3, [pc, #380]	; (8001108 <main+0x2e8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	4a5e      	ldr	r2, [pc, #376]	; (8001108 <main+0x2e8>)
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e002      	b.n	8000f9a <main+0x17a>
    		} else {
    			intro_minute = 0;
 8000f94:	4b5c      	ldr	r3, [pc, #368]	; (8001108 <main+0x2e8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
    		}
    		flag_boton = 0;
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <main+0x2c8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
    		counter = HAL_GetTick();
 8000fa0:	f001 f9b6 	bl	8002310 <HAL_GetTick>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b4e      	ldr	r3, [pc, #312]	; (80010e4 <main+0x2c4>)
 8000faa:	601a      	str	r2, [r3, #0]
    	}
    	if (HAL_GetTick() - counter > 5000){
 8000fac:	f001 f9b0 	bl	8002310 <HAL_GetTick>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a4c      	ldr	r2, [pc, #304]	; (80010e4 <main+0x2c4>)
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	1a9b      	subs	r3, r3, r2
 8000fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d902      	bls.n	8000fc6 <main+0x1a6>
    		OK_minute = 1; //Si no se pulsa en 5segundos, se da por terminado el cambio de los minutos
 8000fc0:	4b52      	ldr	r3, [pc, #328]	; (800110c <main+0x2ec>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
    	}
    	//Mensaje en la pantalla
  	  if (intro_minute >= 10)
 8000fc6:	4b50      	ldr	r3, [pc, #320]	; (8001108 <main+0x2e8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b09      	cmp	r3, #9
 8000fcc:	dd07      	ble.n	8000fde <main+0x1be>
  	  	  sprintf(time_m, "%i", intro_minute);
 8000fce:	4b4e      	ldr	r3, [pc, #312]	; (8001108 <main+0x2e8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4947      	ldr	r1, [pc, #284]	; (80010f4 <main+0x2d4>)
 8000fd6:	484e      	ldr	r0, [pc, #312]	; (8001110 <main+0x2f0>)
 8000fd8:	f004 fede 	bl	8005d98 <siprintf>
 8000fdc:	e006      	b.n	8000fec <main+0x1cc>
  	  else
  		  sprintf(time_m, "0%i", intro_minute);
 8000fde:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <main+0x2e8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4945      	ldr	r1, [pc, #276]	; (80010fc <main+0x2dc>)
 8000fe6:	484a      	ldr	r0, [pc, #296]	; (8001110 <main+0x2f0>)
 8000fe8:	f004 fed6 	bl	8005d98 <siprintf>

  	strcpy (texto_pantalla, "Actual (mins):  ");
 8000fec:	4a3a      	ldr	r2, [pc, #232]	; (80010d8 <main+0x2b8>)
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <main+0x2f4>)
 8000ff0:	4614      	mov	r4, r2
 8000ff2:	461d      	mov	r5, r3
 8000ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	7023      	strb	r3, [r4, #0]
  	strcat(texto_pantalla, time_h);
 8000ffc:	493e      	ldr	r1, [pc, #248]	; (80010f8 <main+0x2d8>)
 8000ffe:	4836      	ldr	r0, [pc, #216]	; (80010d8 <main+0x2b8>)
 8001000:	f004 feea 	bl	8005dd8 <strcat>
  	strcat(texto_pantalla, ":");
 8001004:	4834      	ldr	r0, [pc, #208]	; (80010d8 <main+0x2b8>)
 8001006:	f7ff f8eb 	bl	80001e0 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <main+0x2b8>)
 8001010:	4413      	add	r3, r2
 8001012:	4941      	ldr	r1, [pc, #260]	; (8001118 <main+0x2f8>)
 8001014:	461a      	mov	r2, r3
 8001016:	460b      	mov	r3, r1
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	8013      	strh	r3, [r2, #0]
  	strcat(texto_pantalla, time_m);
 800101c:	493c      	ldr	r1, [pc, #240]	; (8001110 <main+0x2f0>)
 800101e:	482e      	ldr	r0, [pc, #184]	; (80010d8 <main+0x2b8>)
 8001020:	f004 feda 	bl	8005dd8 <strcat>
  	strcat(texto_pantalla, "           ");
 8001024:	482c      	ldr	r0, [pc, #176]	; (80010d8 <main+0x2b8>)
 8001026:	f7ff f8db 	bl	80001e0 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <main+0x2b8>)
 8001030:	4413      	add	r3, r2
 8001032:	4a3a      	ldr	r2, [pc, #232]	; (800111c <main+0x2fc>)
 8001034:	461c      	mov	r4, r3
 8001036:	4613      	mov	r3, r2
 8001038:	cb07      	ldmia	r3!, {r0, r1, r2}
 800103a:	6020      	str	r0, [r4, #0]
 800103c:	6061      	str	r1, [r4, #4]
 800103e:	60a2      	str	r2, [r4, #8]
    while (!OK_minute){ // Set minutos
 8001040:	4b32      	ldr	r3, [pc, #200]	; (800110c <main+0x2ec>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d097      	beq.n	8000f78 <main+0x158>
    }

 //Para insetar la hora a la que se quiere regar o no activar la opcion
    OK_hour = 0;
 8001048:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <main+0x2d0>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
    OK_minute = 0;
 800104e:	4b2f      	ldr	r3, [pc, #188]	; (800110c <main+0x2ec>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
    counter = HAL_GetTick();
 8001054:	f001 f95c 	bl	8002310 <HAL_GetTick>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <main+0x2c4>)
 800105e:	601a      	str	r2, [r3, #0]
    while (!OK_hour){// Set hora de riego
 8001060:	e093      	b.n	800118a <main+0x36a>
    	if (flag_boton){
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <main+0x2c8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d015      	beq.n	8001096 <main+0x276>
    		if (water_hour < 23){
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <main+0x300>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b16      	cmp	r3, #22
 8001070:	d805      	bhi.n	800107e <main+0x25e>
    			water_hour++;
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <main+0x300>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	4a29      	ldr	r2, [pc, #164]	; (8001120 <main+0x300>)
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e002      	b.n	8001084 <main+0x264>
    		} else {
    			water_hour = 0;
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <main+0x300>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
    		}
    		flag_boton = 0;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <main+0x2c8>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    		counter = HAL_GetTick();
 800108a:	f001 f941 	bl	8002310 <HAL_GetTick>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <main+0x2c4>)
 8001094:	601a      	str	r2, [r3, #0]
    	}
    	if (HAL_GetTick() - counter > 5000){
 8001096:	f001 f93b 	bl	8002310 <HAL_GetTick>
 800109a:	4603      	mov	r3, r0
 800109c:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <main+0x2c4>)
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d902      	bls.n	80010b0 <main+0x290>
    		OK_hour = 1;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <main+0x2d0>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
    	}
    	//Mensaje en la pantalla
    	if (water_hour == 100)
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <main+0x300>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d137      	bne.n	8001128 <main+0x308>
    		strcpy (texto_pantalla, "Programar riego?SI=pulsa NO=wait");
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <main+0x2b8>)
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <main+0x304>)
 80010bc:	4614      	mov	r4, r2
 80010be:	461d      	mov	r5, r3
 80010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	7023      	strb	r3, [r4, #0]
 80010cc:	e05d      	b.n	800118a <main+0x36a>
 80010ce:	bf00      	nop
 80010d0:	20000248 	.word	0x20000248
 80010d4:	200000b8 	.word	0x200000b8
 80010d8:	2000025c 	.word	0x2000025c
 80010dc:	080066a8 	.word	0x080066a8
 80010e0:	200001fc 	.word	0x200001fc
 80010e4:	200002b4 	.word	0x200002b4
 80010e8:	20000250 	.word	0x20000250
 80010ec:	200002a4 	.word	0x200002a4
 80010f0:	200002ac 	.word	0x200002ac
 80010f4:	080066cc 	.word	0x080066cc
 80010f8:	200002bc 	.word	0x200002bc
 80010fc:	080066d0 	.word	0x080066d0
 8001100:	080066d4 	.word	0x080066d4
 8001104:	080066e8 	.word	0x080066e8
 8001108:	200002a0 	.word	0x200002a0
 800110c:	200002b0 	.word	0x200002b0
 8001110:	200002c0 	.word	0x200002c0
 8001114:	080066f8 	.word	0x080066f8
 8001118:	0800670c 	.word	0x0800670c
 800111c:	08006710 	.word	0x08006710
 8001120:	20000028 	.word	0x20000028
 8001124:	0800671c 	.word	0x0800671c
    	else {
    		if (water_hour >= 10)
 8001128:	4b9f      	ldr	r3, [pc, #636]	; (80013a8 <main+0x588>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b09      	cmp	r3, #9
 800112e:	d907      	bls.n	8001140 <main+0x320>
    			sprintf(time_h, "%i", water_hour);
 8001130:	4b9d      	ldr	r3, [pc, #628]	; (80013a8 <main+0x588>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	499d      	ldr	r1, [pc, #628]	; (80013ac <main+0x58c>)
 8001138:	489d      	ldr	r0, [pc, #628]	; (80013b0 <main+0x590>)
 800113a:	f004 fe2d 	bl	8005d98 <siprintf>
 800113e:	e006      	b.n	800114e <main+0x32e>
    		else
    			sprintf(time_h, "0%i", water_hour);
 8001140:	4b99      	ldr	r3, [pc, #612]	; (80013a8 <main+0x588>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	499b      	ldr	r1, [pc, #620]	; (80013b4 <main+0x594>)
 8001148:	4899      	ldr	r0, [pc, #612]	; (80013b0 <main+0x590>)
 800114a:	f004 fe25 	bl	8005d98 <siprintf>

    		strcpy (texto_pantalla, "Riego (hora):   ");
 800114e:	4a9a      	ldr	r2, [pc, #616]	; (80013b8 <main+0x598>)
 8001150:	4b9a      	ldr	r3, [pc, #616]	; (80013bc <main+0x59c>)
 8001152:	4614      	mov	r4, r2
 8001154:	461d      	mov	r5, r3
 8001156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115a:	682b      	ldr	r3, [r5, #0]
 800115c:	7023      	strb	r3, [r4, #0]
    		strcat(texto_pantalla, time_h);
 800115e:	4994      	ldr	r1, [pc, #592]	; (80013b0 <main+0x590>)
 8001160:	4895      	ldr	r0, [pc, #596]	; (80013b8 <main+0x598>)
 8001162:	f004 fe39 	bl	8005dd8 <strcat>
    		strcat(texto_pantalla, ":00           ");
 8001166:	4894      	ldr	r0, [pc, #592]	; (80013b8 <main+0x598>)
 8001168:	f7ff f83a 	bl	80001e0 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b91      	ldr	r3, [pc, #580]	; (80013b8 <main+0x598>)
 8001172:	4413      	add	r3, r2
 8001174:	4a92      	ldr	r2, [pc, #584]	; (80013c0 <main+0x5a0>)
 8001176:	461c      	mov	r4, r3
 8001178:	4613      	mov	r3, r2
 800117a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800117c:	6020      	str	r0, [r4, #0]
 800117e:	6061      	str	r1, [r4, #4]
 8001180:	60a2      	str	r2, [r4, #8]
 8001182:	881a      	ldrh	r2, [r3, #0]
 8001184:	789b      	ldrb	r3, [r3, #2]
 8001186:	81a2      	strh	r2, [r4, #12]
 8001188:	73a3      	strb	r3, [r4, #14]
    while (!OK_hour){// Set hora de riego
 800118a:	4b8e      	ldr	r3, [pc, #568]	; (80013c4 <main+0x5a4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f43f af67 	beq.w	8001062 <main+0x242>
    	}
    }
    counter = HAL_GetTick();
 8001194:	f001 f8bc 	bl	8002310 <HAL_GetTick>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b8a      	ldr	r3, [pc, #552]	; (80013c8 <main+0x5a8>)
 800119e:	601a      	str	r2, [r3, #0]
    while (!OK_minute){ // Set minuto de riego
 80011a0:	e072      	b.n	8001288 <main+0x468>
    	if (flag_boton){
 80011a2:	4b8a      	ldr	r3, [pc, #552]	; (80013cc <main+0x5ac>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d015      	beq.n	80011d6 <main+0x3b6>
    		if (water_minute < 59){
 80011aa:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <main+0x5b0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b3a      	cmp	r3, #58	; 0x3a
 80011b0:	d805      	bhi.n	80011be <main+0x39e>
    			water_minute++;
 80011b2:	4b87      	ldr	r3, [pc, #540]	; (80013d0 <main+0x5b0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	4a85      	ldr	r2, [pc, #532]	; (80013d0 <main+0x5b0>)
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	e002      	b.n	80011c4 <main+0x3a4>
    		} else {
    			water_minute = 0;
 80011be:	4b84      	ldr	r3, [pc, #528]	; (80013d0 <main+0x5b0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
    		}
    		flag_boton = 0;
 80011c4:	4b81      	ldr	r3, [pc, #516]	; (80013cc <main+0x5ac>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
    		counter = HAL_GetTick();
 80011ca:	f001 f8a1 	bl	8002310 <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <main+0x5a8>)
 80011d4:	601a      	str	r2, [r3, #0]
    	}
    	if (HAL_GetTick() - counter > 5000){
 80011d6:	f001 f89b 	bl	8002310 <HAL_GetTick>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <main+0x5a8>)
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d902      	bls.n	80011f0 <main+0x3d0>
    		OK_minute = 1;
 80011ea:	4b7a      	ldr	r3, [pc, #488]	; (80013d4 <main+0x5b4>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
    	}
    	//Mensaje en la pantalla
    	if (water_hour == 100)
 80011f0:	4b6d      	ldr	r3, [pc, #436]	; (80013a8 <main+0x588>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b64      	cmp	r3, #100	; 0x64
 80011f6:	d10a      	bne.n	800120e <main+0x3ee>
    	  		strcpy (texto_pantalla, "      wait                      ");
 80011f8:	4a6f      	ldr	r2, [pc, #444]	; (80013b8 <main+0x598>)
 80011fa:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <main+0x5b8>)
 80011fc:	4614      	mov	r4, r2
 80011fe:	461d      	mov	r5, r3
 8001200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	7023      	strb	r3, [r4, #0]
 800120c:	e03c      	b.n	8001288 <main+0x468>
    	else {
    	  	if (water_minute >= 10)
 800120e:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <main+0x5b0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b09      	cmp	r3, #9
 8001214:	d907      	bls.n	8001226 <main+0x406>
    	  		  	  sprintf(time_m, "%i", water_minute);
 8001216:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <main+0x5b0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	4963      	ldr	r1, [pc, #396]	; (80013ac <main+0x58c>)
 800121e:	486f      	ldr	r0, [pc, #444]	; (80013dc <main+0x5bc>)
 8001220:	f004 fdba 	bl	8005d98 <siprintf>
 8001224:	e006      	b.n	8001234 <main+0x414>
    	  		  else
    	  			  sprintf(time_m, "0%i", water_minute);
 8001226:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <main+0x5b0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4961      	ldr	r1, [pc, #388]	; (80013b4 <main+0x594>)
 800122e:	486b      	ldr	r0, [pc, #428]	; (80013dc <main+0x5bc>)
 8001230:	f004 fdb2 	bl	8005d98 <siprintf>

    	  		strcpy (texto_pantalla, "Riego (mins):   ");
 8001234:	4a60      	ldr	r2, [pc, #384]	; (80013b8 <main+0x598>)
 8001236:	4b6a      	ldr	r3, [pc, #424]	; (80013e0 <main+0x5c0>)
 8001238:	4614      	mov	r4, r2
 800123a:	461d      	mov	r5, r3
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	7023      	strb	r3, [r4, #0]
    	  		strcat(texto_pantalla, time_h);
 8001244:	495a      	ldr	r1, [pc, #360]	; (80013b0 <main+0x590>)
 8001246:	485c      	ldr	r0, [pc, #368]	; (80013b8 <main+0x598>)
 8001248:	f004 fdc6 	bl	8005dd8 <strcat>
    	  		strcat(texto_pantalla, ":");
 800124c:	485a      	ldr	r0, [pc, #360]	; (80013b8 <main+0x598>)
 800124e:	f7fe ffc7 	bl	80001e0 <strlen>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <main+0x598>)
 8001258:	4413      	add	r3, r2
 800125a:	4962      	ldr	r1, [pc, #392]	; (80013e4 <main+0x5c4>)
 800125c:	461a      	mov	r2, r3
 800125e:	460b      	mov	r3, r1
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	8013      	strh	r3, [r2, #0]
    	  		strcat(texto_pantalla, time_m);
 8001264:	495d      	ldr	r1, [pc, #372]	; (80013dc <main+0x5bc>)
 8001266:	4854      	ldr	r0, [pc, #336]	; (80013b8 <main+0x598>)
 8001268:	f004 fdb6 	bl	8005dd8 <strcat>
    	  		strcat(texto_pantalla, "           ");
 800126c:	4852      	ldr	r0, [pc, #328]	; (80013b8 <main+0x598>)
 800126e:	f7fe ffb7 	bl	80001e0 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <main+0x598>)
 8001278:	4413      	add	r3, r2
 800127a:	4a5b      	ldr	r2, [pc, #364]	; (80013e8 <main+0x5c8>)
 800127c:	461c      	mov	r4, r3
 800127e:	4613      	mov	r3, r2
 8001280:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001282:	6020      	str	r0, [r4, #0]
 8001284:	6061      	str	r1, [r4, #4]
 8001286:	60a2      	str	r2, [r4, #8]
    while (!OK_minute){ // Set minuto de riego
 8001288:	4b52      	ldr	r3, [pc, #328]	; (80013d4 <main+0x5b4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d088      	beq.n	80011a2 <main+0x382>
    	}
    }

    counter = HAL_GetTick();
 8001290:	f001 f83e 	bl	8002310 <HAL_GetTick>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <main+0x5a8>)
 800129a:	601a      	str	r2, [r3, #0]
    settings = 1; //Terminado el setting
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <main+0x5cc>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//Conteo de tiempo
	  count_second = ((HAL_GetTick()-counter) * 0.001);
 80012a2:	f001 f835 	bl	8002310 <HAL_GetTick>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a47      	ldr	r2, [pc, #284]	; (80013c8 <main+0x5a8>)
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fa5a 	bl	8000768 <__aeabi_ui2d>
 80012b4:	a33a      	add	r3, pc, #232	; (adr r3, 80013a0 <main+0x580>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7fe ffe9 	bl	8000290 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fac9 	bl	800085c <__aeabi_d2uiz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <main+0x5d0>)
 80012ce:	6013      	str	r3, [r2, #0]
	  count_minute = ((HAL_GetTick()-counter) / 60000);
 80012d0:	f001 f81e 	bl	8002310 <HAL_GetTick>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a3c      	ldr	r2, [pc, #240]	; (80013c8 <main+0x5a8>)
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	4a45      	ldr	r2, [pc, #276]	; (80013f4 <main+0x5d4>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0b9b      	lsrs	r3, r3, #14
 80012e4:	4a44      	ldr	r2, [pc, #272]	; (80013f8 <main+0x5d8>)
 80012e6:	6013      	str	r3, [r2, #0]
	  count_hour = ((HAL_GetTick()-counter) / 3600000);
 80012e8:	f001 f812 	bl	8002310 <HAL_GetTick>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a36      	ldr	r2, [pc, #216]	; (80013c8 <main+0x5a8>)
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	4a41      	ldr	r2, [pc, #260]	; (80013fc <main+0x5dc>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0d5b      	lsrs	r3, r3, #21
 80012fc:	4a40      	ldr	r2, [pc, #256]	; (8001400 <main+0x5e0>)
 80012fe:	6013      	str	r3, [r2, #0]
//Hora real
	  second = count_second % 60;
 8001300:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <main+0x5d0>)
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <main+0x5e4>)
 8001306:	fba3 2301 	umull	r2, r3, r3, r1
 800130a:	095a      	lsrs	r2, r3, #5
 800130c:	4613      	mov	r3, r2
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	1aca      	subs	r2, r1, r3
 8001316:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <main+0x5e8>)
 8001318:	601a      	str	r2, [r3, #0]
	  minute = (intro_minute + count_minute) % 60;
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <main+0x5ec>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <main+0x5d8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	18d1      	adds	r1, r2, r3
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <main+0x5e4>)
 8001328:	fba3 2301 	umull	r2, r3, r3, r1
 800132c:	095a      	lsrs	r2, r3, #5
 800132e:	4613      	mov	r3, r2
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	1aca      	subs	r2, r1, r3
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <main+0x5f0>)
 800133a:	601a      	str	r2, [r3, #0]
	  hour = (intro_hour + count_hour + ((intro_minute + count_minute) / 60)) % 24;
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <main+0x5f4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <main+0x5e0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	441a      	add	r2, r3
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <main+0x5ec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <main+0x5d8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	440b      	add	r3, r1
 8001354:	492b      	ldr	r1, [pc, #172]	; (8001404 <main+0x5e4>)
 8001356:	fba1 1303 	umull	r1, r3, r1, r3
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	18d1      	adds	r1, r2, r3
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <main+0x5f8>)
 8001360:	fba3 2301 	umull	r2, r3, r3, r1
 8001364:	091a      	lsrs	r2, r3, #4
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	1aca      	subs	r2, r1, r3
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <main+0x5fc>)
 8001372:	601a      	str	r2, [r3, #0]

	  flag_agua = detec_lvl(ADC_value[0]);
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <main+0x600>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fc2f 	bl	8000bdc <detec_lvl>
 800137e:	4603      	mov	r3, r0
 8001380:	4a28      	ldr	r2, [pc, #160]	; (8001424 <main+0x604>)
 8001382:	6013      	str	r3, [r2, #0]

	  char buffer [2];
	  if (media >= 10)
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <main+0x608>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b09      	cmp	r3, #9
 800138a:	d94f      	bls.n	800142c <main+0x60c>
	  	  sprintf(buffer, "%i", media);
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <main+0x608>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	463b      	mov	r3, r7
 8001392:	4906      	ldr	r1, [pc, #24]	; (80013ac <main+0x58c>)
 8001394:	4618      	mov	r0, r3
 8001396:	f004 fcff 	bl	8005d98 <siprintf>
 800139a:	e04e      	b.n	800143a <main+0x61a>
 800139c:	f3af 8000 	nop.w
 80013a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013a4:	3f50624d 	.word	0x3f50624d
 80013a8:	20000028 	.word	0x20000028
 80013ac:	080066cc 	.word	0x080066cc
 80013b0:	200002bc 	.word	0x200002bc
 80013b4:	080066d0 	.word	0x080066d0
 80013b8:	2000025c 	.word	0x2000025c
 80013bc:	08006740 	.word	0x08006740
 80013c0:	080066e8 	.word	0x080066e8
 80013c4:	200002ac 	.word	0x200002ac
 80013c8:	200002b4 	.word	0x200002b4
 80013cc:	20000250 	.word	0x20000250
 80013d0:	200002a8 	.word	0x200002a8
 80013d4:	200002b0 	.word	0x200002b0
 80013d8:	08006754 	.word	0x08006754
 80013dc:	200002c0 	.word	0x200002c0
 80013e0:	08006778 	.word	0x08006778
 80013e4:	0800670c 	.word	0x0800670c
 80013e8:	08006710 	.word	0x08006710
 80013ec:	200002b8 	.word	0x200002b8
 80013f0:	20000294 	.word	0x20000294
 80013f4:	45e7b273 	.word	0x45e7b273
 80013f8:	20000298 	.word	0x20000298
 80013fc:	95217cb1 	.word	0x95217cb1
 8001400:	2000029c 	.word	0x2000029c
 8001404:	88888889 	.word	0x88888889
 8001408:	20000288 	.word	0x20000288
 800140c:	200002a0 	.word	0x200002a0
 8001410:	2000028c 	.word	0x2000028c
 8001414:	200002a4 	.word	0x200002a4
 8001418:	aaaaaaab 	.word	0xaaaaaaab
 800141c:	20000290 	.word	0x20000290
 8001420:	20000244 	.word	0x20000244
 8001424:	20000254 	.word	0x20000254
 8001428:	20000258 	.word	0x20000258

	  else
		  sprintf(buffer, "0%i", media);
 800142c:	4b9c      	ldr	r3, [pc, #624]	; (80016a0 <main+0x880>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	463b      	mov	r3, r7
 8001432:	499c      	ldr	r1, [pc, #624]	; (80016a4 <main+0x884>)
 8001434:	4618      	mov	r0, r3
 8001436:	f004 fcaf 	bl	8005d98 <siprintf>

	  if (!flag_riego && flag_agua != 0){ // si no esta regando y hay agua en el deposito = midiendo
 800143a:	4b9b      	ldr	r3, [pc, #620]	; (80016a8 <main+0x888>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d12f      	bne.n	80014a2 <main+0x682>
 8001442:	4b9a      	ldr	r3, [pc, #616]	; (80016ac <main+0x88c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d02b      	beq.n	80014a2 <main+0x682>
		  strcpy(texto_pantalla, "Midiendo...|SistHumedad:");
 800144a:	4a99      	ldr	r2, [pc, #612]	; (80016b0 <main+0x890>)
 800144c:	4b99      	ldr	r3, [pc, #612]	; (80016b4 <main+0x894>)
 800144e:	4614      	mov	r4, r2
 8001450:	461d      	mov	r5, r3
 8001452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001456:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800145a:	c403      	stmia	r4!, {r0, r1}
 800145c:	7022      	strb	r2, [r4, #0]
	      strcat(texto_pantalla, buffer);
 800145e:	463b      	mov	r3, r7
 8001460:	4619      	mov	r1, r3
 8001462:	4893      	ldr	r0, [pc, #588]	; (80016b0 <main+0x890>)
 8001464:	f004 fcb8 	bl	8005dd8 <strcat>
	      if(media!=100)
 8001468:	4b8d      	ldr	r3, [pc, #564]	; (80016a0 <main+0x880>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b64      	cmp	r3, #100	; 0x64
 800146e:	d00b      	beq.n	8001488 <main+0x668>
	      strcat(texto_pantalla, "%");
 8001470:	488f      	ldr	r0, [pc, #572]	; (80016b0 <main+0x890>)
 8001472:	f7fe feb5 	bl	80001e0 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b8d      	ldr	r3, [pc, #564]	; (80016b0 <main+0x890>)
 800147c:	4413      	add	r3, r2
 800147e:	498e      	ldr	r1, [pc, #568]	; (80016b8 <main+0x898>)
 8001480:	461a      	mov	r2, r3
 8001482:	460b      	mov	r3, r1
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	8013      	strh	r3, [r2, #0]
	      strcat(texto_pantalla, "|STBY");
 8001488:	4889      	ldr	r0, [pc, #548]	; (80016b0 <main+0x890>)
 800148a:	f7fe fea9 	bl	80001e0 <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b87      	ldr	r3, [pc, #540]	; (80016b0 <main+0x890>)
 8001494:	4413      	add	r3, r2
 8001496:	4a89      	ldr	r2, [pc, #548]	; (80016bc <main+0x89c>)
 8001498:	6810      	ldr	r0, [r2, #0]
 800149a:	6018      	str	r0, [r3, #0]
 800149c:	8892      	ldrh	r2, [r2, #4]
 800149e:	809a      	strh	r2, [r3, #4]
 80014a0:	e0a1      	b.n	80015e6 <main+0x7c6>
	     }
	  else if (flag_riego && flag_agua != 0){ //Regando (hay suficiente agua para ello)
 80014a2:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <main+0x888>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d046      	beq.n	8001538 <main+0x718>
 80014aa:	4b80      	ldr	r3, [pc, #512]	; (80016ac <main+0x88c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d042      	beq.n	8001538 <main+0x718>
	      if ((water_hour == hour) && (water_minute == minute) && (second < 4)) //Ademas regando en hora programada
 80014b2:	4b83      	ldr	r3, [pc, #524]	; (80016c0 <main+0x8a0>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b83      	ldr	r3, [pc, #524]	; (80016c4 <main+0x8a4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d114      	bne.n	80014e8 <main+0x6c8>
 80014be:	4b82      	ldr	r3, [pc, #520]	; (80016c8 <main+0x8a8>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b82      	ldr	r3, [pc, #520]	; (80016cc <main+0x8ac>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d10e      	bne.n	80014e8 <main+0x6c8>
 80014ca:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <main+0x8b0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d80a      	bhi.n	80014e8 <main+0x6c8>
	    	  strcpy(texto_pantalla, "Hora regar.|SistHumedad:");
 80014d2:	4a77      	ldr	r2, [pc, #476]	; (80016b0 <main+0x890>)
 80014d4:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <main+0x8b4>)
 80014d6:	4614      	mov	r4, r2
 80014d8:	461d      	mov	r5, r3
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e2:	c403      	stmia	r4!, {r0, r1}
 80014e4:	7022      	strb	r2, [r4, #0]
 80014e6:	e009      	b.n	80014fc <main+0x6dc>
	      else
	    	  strcpy(texto_pantalla, "Regando....|SistHumedad:");
 80014e8:	4a71      	ldr	r2, [pc, #452]	; (80016b0 <main+0x890>)
 80014ea:	4b7b      	ldr	r3, [pc, #492]	; (80016d8 <main+0x8b8>)
 80014ec:	4614      	mov	r4, r2
 80014ee:	461d      	mov	r5, r3
 80014f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014f8:	c403      	stmia	r4!, {r0, r1}
 80014fa:	7022      	strb	r2, [r4, #0]
	      strcat(texto_pantalla, buffer);
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	486b      	ldr	r0, [pc, #428]	; (80016b0 <main+0x890>)
 8001502:	f004 fc69 	bl	8005dd8 <strcat>
	      strcat(texto_pantalla, "%");
 8001506:	486a      	ldr	r0, [pc, #424]	; (80016b0 <main+0x890>)
 8001508:	f7fe fe6a 	bl	80001e0 <strlen>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <main+0x890>)
 8001512:	4413      	add	r3, r2
 8001514:	4968      	ldr	r1, [pc, #416]	; (80016b8 <main+0x898>)
 8001516:	461a      	mov	r2, r3
 8001518:	460b      	mov	r3, r1
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	8013      	strh	r3, [r2, #0]
	      strcat(texto_pantalla, "|  ON");
 800151e:	4864      	ldr	r0, [pc, #400]	; (80016b0 <main+0x890>)
 8001520:	f7fe fe5e 	bl	80001e0 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <main+0x890>)
 800152a:	4413      	add	r3, r2
 800152c:	4a6b      	ldr	r2, [pc, #428]	; (80016dc <main+0x8bc>)
 800152e:	6810      	ldr	r0, [r2, #0]
 8001530:	6018      	str	r0, [r3, #0]
 8001532:	8892      	ldrh	r2, [r2, #4]
 8001534:	809a      	strh	r2, [r3, #4]
 8001536:	e056      	b.n	80015e6 <main+0x7c6>
	     }
	  else if (media < 50 && flag_agua == 0){ //Debería estar regando pero no hay agua
 8001538:	4b59      	ldr	r3, [pc, #356]	; (80016a0 <main+0x880>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b31      	cmp	r3, #49	; 0x31
 800153e:	d821      	bhi.n	8001584 <main+0x764>
 8001540:	4b5a      	ldr	r3, [pc, #360]	; (80016ac <main+0x88c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11d      	bne.n	8001584 <main+0x764>
	      strcpy(texto_pantalla, "ALERTA| Sin aguaHumedad:");
 8001548:	4a59      	ldr	r2, [pc, #356]	; (80016b0 <main+0x890>)
 800154a:	4b65      	ldr	r3, [pc, #404]	; (80016e0 <main+0x8c0>)
 800154c:	4614      	mov	r4, r2
 800154e:	461d      	mov	r5, r3
 8001550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001558:	c403      	stmia	r4!, {r0, r1}
 800155a:	7022      	strb	r2, [r4, #0]
	      strcat(texto_pantalla, buffer);
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4853      	ldr	r0, [pc, #332]	; (80016b0 <main+0x890>)
 8001562:	f004 fc39 	bl	8005dd8 <strcat>
	      strcat(texto_pantalla, "%| !!!");
 8001566:	4852      	ldr	r0, [pc, #328]	; (80016b0 <main+0x890>)
 8001568:	f7fe fe3a 	bl	80001e0 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <main+0x890>)
 8001572:	4413      	add	r3, r2
 8001574:	4a5b      	ldr	r2, [pc, #364]	; (80016e4 <main+0x8c4>)
 8001576:	6810      	ldr	r0, [r2, #0]
 8001578:	6018      	str	r0, [r3, #0]
 800157a:	8891      	ldrh	r1, [r2, #4]
 800157c:	7992      	ldrb	r2, [r2, #6]
 800157e:	8099      	strh	r1, [r3, #4]
 8001580:	719a      	strb	r2, [r3, #6]
 8001582:	e030      	b.n	80015e6 <main+0x7c6>
	      }
	  else if (!flag_riego && flag_agua == 0){ //No necesita regar pero si lo necesitara no habría agua
 8001584:	4b48      	ldr	r3, [pc, #288]	; (80016a8 <main+0x888>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d125      	bne.n	80015d8 <main+0x7b8>
 800158c:	4b47      	ldr	r3, [pc, #284]	; (80016ac <main+0x88c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d121      	bne.n	80015d8 <main+0x7b8>
	      strcpy(texto_pantalla, "Midiendo..|AVISOHum:");
 8001594:	4a46      	ldr	r2, [pc, #280]	; (80016b0 <main+0x890>)
 8001596:	4b54      	ldr	r3, [pc, #336]	; (80016e8 <main+0x8c8>)
 8001598:	4614      	mov	r4, r2
 800159a:	461d      	mov	r5, r3
 800159c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015a4:	6020      	str	r0, [r4, #0]
 80015a6:	3404      	adds	r4, #4
 80015a8:	7021      	strb	r1, [r4, #0]
	      strcat(texto_pantalla, buffer);
 80015aa:	463b      	mov	r3, r7
 80015ac:	4619      	mov	r1, r3
 80015ae:	4840      	ldr	r0, [pc, #256]	; (80016b0 <main+0x890>)
 80015b0:	f004 fc12 	bl	8005dd8 <strcat>
	      strcat(texto_pantalla, "%|SIN AGUA");
 80015b4:	483e      	ldr	r0, [pc, #248]	; (80016b0 <main+0x890>)
 80015b6:	f7fe fe13 	bl	80001e0 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <main+0x890>)
 80015c0:	4413      	add	r3, r2
 80015c2:	494a      	ldr	r1, [pc, #296]	; (80016ec <main+0x8cc>)
 80015c4:	461a      	mov	r2, r3
 80015c6:	460b      	mov	r3, r1
 80015c8:	cb03      	ldmia	r3!, {r0, r1}
 80015ca:	6010      	str	r0, [r2, #0]
 80015cc:	6051      	str	r1, [r2, #4]
 80015ce:	8819      	ldrh	r1, [r3, #0]
 80015d0:	789b      	ldrb	r3, [r3, #2]
 80015d2:	8111      	strh	r1, [r2, #8]
 80015d4:	7293      	strb	r3, [r2, #10]
 80015d6:	e006      	b.n	80015e6 <main+0x7c6>
	  	  }
	  else
	      strcpy(texto_pantalla, "ERROR");
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <main+0x890>)
 80015da:	4a45      	ldr	r2, [pc, #276]	; (80016f0 <main+0x8d0>)
 80015dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e0:	6018      	str	r0, [r3, #0]
 80015e2:	3304      	adds	r3, #4
 80015e4:	8019      	strh	r1, [r3, #0]




	  if (((media < 50) || (flag_boton == 1) || ((water_hour == hour) && (water_minute == minute) && (second < 4))) && (flag_riego == 0) && ((HAL_GetTick() - ultima_vez) > TIEMPO_DESDE_ULTIMA_VEZ)){
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <main+0x880>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b31      	cmp	r3, #49	; 0x31
 80015ec:	d913      	bls.n	8001616 <main+0x7f6>
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <main+0x8d4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d00f      	beq.n	8001616 <main+0x7f6>
 80015f6:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <main+0x8a0>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <main+0x8a4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d12f      	bne.n	8001662 <main+0x842>
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <main+0x8a8>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b31      	ldr	r3, [pc, #196]	; (80016cc <main+0x8ac>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d129      	bne.n	8001662 <main+0x842>
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <main+0x8b0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d825      	bhi.n	8001662 <main+0x842>
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <main+0x888>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d121      	bne.n	8001662 <main+0x842>
 800161e:	f000 fe77 	bl	8002310 <HAL_GetTick>
 8001622:	4603      	mov	r3, r0
 8001624:	4a34      	ldr	r2, [pc, #208]	; (80016f8 <main+0x8d8>)
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d917      	bls.n	8001662 <main+0x842>
		  flag_boton = 0;
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <main+0x8d4>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
	  	  if (detec_lvl(ADC_value[0]) > 0){
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <main+0x8dc>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff facd 	bl	8000bdc <detec_lvl>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	dd0c      	ble.n	8001662 <main+0x842>
	  		  HAL_NVIC_DisableIRQ(EXTI0_IRQn); //Deshabilitar las interrupciones
 8001648:	2006      	movs	r0, #6
 800164a:	f001 fcd6 	bl	8002ffa <HAL_NVIC_DisableIRQ>
	  		  flag_riego = 1;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <main+0x888>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
	  		  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
	  		  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001654:	2104      	movs	r1, #4
 8001656:	482a      	ldr	r0, [pc, #168]	; (8001700 <main+0x8e0>)
 8001658:	f003 fbd2 	bl	8004e00 <HAL_TIM_OC_Start_IT>
	  		  HAL_NVIC_EnableIRQ(EXTI0_IRQn); //Volver a habilitar las interrupciones
 800165c:	2006      	movs	r0, #6
 800165e:	f001 fcbe 	bl	8002fde <HAL_NVIC_EnableIRQ>
	  	  }
	  }

	  //Detener el riego si se queda sin agua
	  if ((!flag_agua) && (flag_riego)){
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <main+0x88c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f47f ae1b 	bne.w	80012a2 <main+0x482>
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <main+0x888>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f43f ae16 	beq.w	80012a2 <main+0x482>
		  flag_riego=0;
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <main+0x888>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
		  nint=0;
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <main+0x8e4>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
	  		 HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001682:	2104      	movs	r1, #4
 8001684:	481e      	ldr	r0, [pc, #120]	; (8001700 <main+0x8e0>)
 8001686:	f003 fcb9 	bl	8004ffc <HAL_TIM_OC_Stop_IT>
	  		 __HAL_TIM_SET_COUNTER(&htim1, 0);
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <main+0x8e0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
	  		 ultima_vez = HAL_GetTick();
 8001692:	f000 fe3d 	bl	8002310 <HAL_GetTick>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <main+0x8d8>)
 800169c:	601a      	str	r2, [r3, #0]
  {
 800169e:	e600      	b.n	80012a2 <main+0x482>
 80016a0:	20000258 	.word	0x20000258
 80016a4:	080066d0 	.word	0x080066d0
 80016a8:	2000024c 	.word	0x2000024c
 80016ac:	20000254 	.word	0x20000254
 80016b0:	2000025c 	.word	0x2000025c
 80016b4:	0800678c 	.word	0x0800678c
 80016b8:	080067a8 	.word	0x080067a8
 80016bc:	080067ac 	.word	0x080067ac
 80016c0:	20000028 	.word	0x20000028
 80016c4:	20000290 	.word	0x20000290
 80016c8:	200002a8 	.word	0x200002a8
 80016cc:	2000028c 	.word	0x2000028c
 80016d0:	20000288 	.word	0x20000288
 80016d4:	080067b4 	.word	0x080067b4
 80016d8:	080067d0 	.word	0x080067d0
 80016dc:	080067ec 	.word	0x080067ec
 80016e0:	080067f4 	.word	0x080067f4
 80016e4:	08006810 	.word	0x08006810
 80016e8:	08006818 	.word	0x08006818
 80016ec:	08006830 	.word	0x08006830
 80016f0:	0800683c 	.word	0x0800683c
 80016f4:	20000250 	.word	0x20000250
 80016f8:	20000280 	.word	0x20000280
 80016fc:	20000244 	.word	0x20000244
 8001700:	200001b4 	.word	0x200001b4
 8001704:	20000284 	.word	0x20000284

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	; 0x50
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	2230      	movs	r2, #48	; 0x30
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f004 fb36 	bl	8005d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <SystemClock_Config+0xc8>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <SystemClock_Config+0xc8>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <SystemClock_Config+0xc8>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <SystemClock_Config+0xcc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a20      	ldr	r2, [pc, #128]	; (80017d4 <SystemClock_Config+0xcc>)
 8001752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <SystemClock_Config+0xcc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001768:	2301      	movs	r3, #1
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176c:	2310      	movs	r3, #16
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001770:	2302      	movs	r3, #2
 8001772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001774:	2300      	movs	r3, #0
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001778:	2308      	movs	r3, #8
 800177a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800177c:	2332      	movs	r3, #50	; 0x32
 800177e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001780:	2302      	movs	r3, #2
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001784:	2308      	movs	r3, #8
 8001786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	4618      	mov	r0, r3
 800178e:	f002 fda7 	bl	80042e0 <HAL_RCC_OscConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001798:	f000 fb14 	bl	8001dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179c:	230f      	movs	r3, #15
 800179e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a0:	2302      	movs	r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	2101      	movs	r1, #1
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 f809 	bl	80047d0 <HAL_RCC_ClockConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017c4:	f000 fafe 	bl	8001dc4 <Error_Handler>
  }
}
 80017c8:	bf00      	nop
 80017ca:	3750      	adds	r7, #80	; 0x50
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000

080017d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017de:	463b      	mov	r3, r7
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <MX_ADC1_Init+0xb4>)
 80017ec:	4a28      	ldr	r2, [pc, #160]	; (8001890 <MX_ADC1_Init+0xb8>)
 80017ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <MX_ADC1_Init+0xb4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017f6:	4b25      	ldr	r3, [pc, #148]	; (800188c <MX_ADC1_Init+0xb4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017fc:	4b23      	ldr	r3, [pc, #140]	; (800188c <MX_ADC1_Init+0xb4>)
 80017fe:	2201      	movs	r2, #1
 8001800:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <MX_ADC1_Init+0xb4>)
 8001804:	2201      	movs	r2, #1
 8001806:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <MX_ADC1_Init+0xb4>)
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <MX_ADC1_Init+0xb4>)
 8001812:	2200      	movs	r2, #0
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_ADC1_Init+0xb4>)
 8001818:	4a1e      	ldr	r2, [pc, #120]	; (8001894 <MX_ADC1_Init+0xbc>)
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_ADC1_Init+0xb4>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_ADC1_Init+0xb4>)
 8001824:	2202      	movs	r2, #2
 8001826:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_ADC1_Init+0xb4>)
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_ADC1_Init+0xb4>)
 8001832:	2201      	movs	r2, #1
 8001834:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001836:	4815      	ldr	r0, [pc, #84]	; (800188c <MX_ADC1_Init+0xb4>)
 8001838:	f000 fd9a 	bl	8002370 <HAL_ADC_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001842:	f000 fabf 	bl	8001dc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001846:	2304      	movs	r3, #4
 8001848:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800184a:	2301      	movs	r3, #1
 800184c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800184e:	2307      	movs	r3, #7
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	463b      	mov	r3, r7
 8001854:	4619      	mov	r1, r3
 8001856:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_ADC1_Init+0xb4>)
 8001858:	f000 ffec 	bl	8002834 <HAL_ADC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001862:	f000 faaf 	bl	8001dc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001866:	2305      	movs	r3, #5
 8001868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800186a:	2302      	movs	r3, #2
 800186c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186e:	463b      	mov	r3, r7
 8001870:	4619      	mov	r1, r3
 8001872:	4806      	ldr	r0, [pc, #24]	; (800188c <MX_ADC1_Init+0xb4>)
 8001874:	f000 ffde 	bl	8002834 <HAL_ADC_ConfigChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800187e:	f000 faa1 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200000b8 	.word	0x200000b8
 8001890:	40012000 	.word	0x40012000
 8001894:	0f000001 	.word	0x0f000001

08001898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C1_Init+0x50>)
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <MX_I2C1_Init+0x54>)
 80018a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_I2C1_Init+0x58>)
 80018a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d6:	f002 f8b7 	bl	8003a48 <HAL_I2C_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018e0:	f000 fa70 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000160 	.word	0x20000160
 80018ec:	40005400 	.word	0x40005400
 80018f0:	000186a0 	.word	0x000186a0

080018f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b096      	sub	sp, #88	; 0x58
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001908:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2220      	movs	r2, #32
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f004 fa2b 	bl	8005d88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <MX_TIM1_Init+0x13c>)
 8001934:	4a3f      	ldr	r2, [pc, #252]	; (8001a34 <MX_TIM1_Init+0x140>)
 8001936:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49999;
 8001938:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <MX_TIM1_Init+0x13c>)
 800193a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800193e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <MX_TIM1_Init+0x13c>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <MX_TIM1_Init+0x13c>)
 8001948:	f241 3287 	movw	r2, #4999	; 0x1387
 800194c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <MX_TIM1_Init+0x13c>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001954:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <MX_TIM1_Init+0x13c>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <MX_TIM1_Init+0x13c>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001960:	4833      	ldr	r0, [pc, #204]	; (8001a30 <MX_TIM1_Init+0x13c>)
 8001962:	f003 f941 	bl	8004be8 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800196c:	f000 fa2a 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800197a:	4619      	mov	r1, r3
 800197c:	482c      	ldr	r0, [pc, #176]	; (8001a30 <MX_TIM1_Init+0x13c>)
 800197e:	f003 fd53 	bl	8005428 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001988:	f000 fa1c 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800198c:	4828      	ldr	r0, [pc, #160]	; (8001a30 <MX_TIM1_Init+0x13c>)
 800198e:	f003 f9dd 	bl	8004d4c <HAL_TIM_OC_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001998:	f000 fa14 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019a8:	4619      	mov	r1, r3
 80019aa:	4821      	ldr	r0, [pc, #132]	; (8001a30 <MX_TIM1_Init+0x13c>)
 80019ac:	f004 f8ee 	bl	8005b8c <HAL_TIMEx_MasterConfigSynchronization>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019b6:	f000 fa05 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80019ba:	2310      	movs	r3, #16
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019c6:	2300      	movs	r3, #0
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	2204      	movs	r2, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4814      	ldr	r0, [pc, #80]	; (8001a30 <MX_TIM1_Init+0x13c>)
 80019e0:	f003 fcc6 	bl	8005370 <HAL_TIM_OC_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80019ea:	f000 f9eb 	bl	8001dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_TIM1_Init+0x13c>)
 8001a12:	f004 f929 	bl	8005c68 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001a1c:	f000 f9d2 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM1_Init+0x13c>)
 8001a22:	f000 fb09 	bl	8002038 <HAL_TIM_MspPostInit>

}
 8001a26:	bf00      	nop
 8001a28:	3758      	adds	r7, #88	; 0x58
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200001b4 	.word	0x200001b4
 8001a34:	40010000 	.word	0x40010000

08001a38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <MX_TIM2_Init+0x98>)
 8001a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49999;
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <MX_TIM2_Init+0x98>)
 8001a5e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_TIM2_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <MX_TIM2_Init+0x98>)
 8001a6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_TIM2_Init+0x98>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_TIM2_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a7e:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <MX_TIM2_Init+0x98>)
 8001a80:	f003 f8b2 	bl	8004be8 <HAL_TIM_Base_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a8a:	f000 f99b 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <MX_TIM2_Init+0x98>)
 8001a9c:	f003 fcc4 	bl	8005428 <HAL_TIM_ConfigClockSource>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001aa6:	f000 f98d 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <MX_TIM2_Init+0x98>)
 8001ab8:	f004 f868 	bl	8005b8c <HAL_TIMEx_MasterConfigSynchronization>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ac2:	f000 f97f 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200001fc 	.word	0x200001fc

08001ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_DMA_Init+0x3c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <MX_DMA_Init+0x3c>)
 8001ae4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_DMA_Init+0x3c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2038      	movs	r0, #56	; 0x38
 8001afc:	f001 fa53 	bl	8002fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b00:	2038      	movs	r0, #56	; 0x38
 8001b02:	f001 fa6c 	bl	8002fde <HAL_NVIC_EnableIRQ>

}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <MX_GPIO_Init+0x9c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <MX_GPIO_Init+0x9c>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_GPIO_Init+0x9c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <MX_GPIO_Init+0x9c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <MX_GPIO_Init+0x9c>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MX_GPIO_Init+0x9c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_GPIO_Init+0x9c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <MX_GPIO_Init+0x9c>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_GPIO_Init+0x9c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4619      	mov	r1, r3
 8001b92:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <MX_GPIO_Init+0xa0>)
 8001b94:	f001 fdbc 	bl	8003710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2006      	movs	r0, #6
 8001b9e:	f001 fa02 	bl	8002fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ba2:	2006      	movs	r0, #6
 8001ba4:	f001 fa1b 	bl	8002fde <HAL_NVIC_EnableIRQ>

}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <lcd_send_data>:

/* USER CODE BEGIN 4 */
void lcd_send_data (char data)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f023 030f 	bic.w	r3, r3, #15
 8001bc8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	f043 030d 	orr.w	r3, r3, #13
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	f043 0309 	orr.w	r3, r3, #9
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001be4:	7bbb      	ldrb	r3, [r7, #14]
 8001be6:	f043 030d 	orr.w	r3, r3, #13
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	f043 0309 	orr.w	r3, r3, #9
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, HAL_MAX_DELAY);
 8001bf8:	f107 0208 	add.w	r2, r7, #8
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2304      	movs	r3, #4
 8001c04:	214e      	movs	r1, #78	; 0x4e
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <lcd_send_data+0x5c>)
 8001c08:	f002 f862 	bl	8003cd0 <HAL_I2C_Master_Transmit>
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000160 	.word	0x20000160

08001c18 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f023 030f 	bic.w	r3, r3, #15
 8001c28:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	f043 030c 	orr.w	r3, r3, #12
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001c44:	7bbb      	ldrb	r3, [r7, #14]
 8001c46:	f043 030c 	orr.w	r3, r3, #12
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001c4e:	7bbb      	ldrb	r3, [r7, #14]
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, HAL_MAX_DELAY);
 8001c58:	f107 0208 	add.w	r2, r7, #8
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2304      	movs	r3, #4
 8001c64:	214e      	movs	r1, #78	; 0x4e
 8001c66:	4803      	ldr	r0, [pc, #12]	; (8001c74 <lcd_send_cmd+0x5c>)
 8001c68:	f002 f832 	bl	8003cd0 <HAL_I2C_Master_Transmit>
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000160 	.word	0x20000160

08001c78 <lcd_init>:

void lcd_init (void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	HAL_Delay(45); //Datasheet especifica espera de 40ms
 8001c7c:	202d      	movs	r0, #45	; 0x2d
 8001c7e:	f000 fb53 	bl	8002328 <HAL_Delay>
	lcd_send_cmd (0x30); //Encendido del display y del cursor
 8001c82:	2030      	movs	r0, #48	; 0x30
 8001c84:	f7ff ffc8 	bl	8001c18 <lcd_send_cmd>
	HAL_Delay(5); //Datasheet especifica espera de 4.1ms
 8001c88:	2005      	movs	r0, #5
 8001c8a:	f000 fb4d 	bl	8002328 <HAL_Delay>
	lcd_send_cmd (0x30); //El datasheet especifica que se debe repetir el envio de esta instruccion
 8001c8e:	2030      	movs	r0, #48	; 0x30
 8001c90:	f7ff ffc2 	bl	8001c18 <lcd_send_cmd>
	HAL_Delay(1); //Datasheet especifica espera de 100us
 8001c94:	2001      	movs	r0, #1
 8001c96:	f000 fb47 	bl	8002328 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001c9a:	2030      	movs	r0, #48	; 0x30
 8001c9c:	f7ff ffbc 	bl	8001c18 <lcd_send_cmd>
	HAL_Delay(1);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f000 fb41 	bl	8002328 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001ca6:	2020      	movs	r0, #32
 8001ca8:	f7ff ffb6 	bl	8001c18 <lcd_send_cmd>
	HAL_Delay(1);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f000 fb3b 	bl	8002328 <HAL_Delay>
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001cb2:	2028      	movs	r0, #40	; 0x28
 8001cb4:	f7ff ffb0 	bl	8001c18 <lcd_send_cmd>
	HAL_Delay(1);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f000 fb35 	bl	8002328 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001cbe:	2008      	movs	r0, #8
 8001cc0:	f7ff ffaa 	bl	8001c18 <lcd_send_cmd>
	HAL_Delay(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f000 fb2f 	bl	8002328 <HAL_Delay>
	lcd_send_cmd (0x01);  //Clear
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff ffa4 	bl	8001c18 <lcd_send_cmd>
	HAL_Delay(1);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f000 fb29 	bl	8002328 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001cd6:	2006      	movs	r0, #6
 8001cd8:	f7ff ff9e 	bl	8001c18 <lcd_send_cmd>
	HAL_Delay(1);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f000 fb23 	bl	8002328 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001ce2:	200c      	movs	r0, #12
 8001ce4:	f7ff ff98 	bl	8001c18 <lcd_send_cmd>
	HAL_Delay(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f000 fb1d 	bl	8002328 <HAL_Delay>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	//Escribe a continuación de lo que haya
	static int contador_linea = 0; //Static para que no se borre entre ejecuciones de la función
	contador_linea = 0;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <lcd_send_string+0x68>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
	while (*str){
 8001d02:	e021      	b.n	8001d48 <lcd_send_string+0x54>
		lcd_send_data (*str++);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff53 	bl	8001bb8 <lcd_send_data>
		contador_linea = (contador_linea) % (ROWS*LINES); //Contar hasta el número de caracteres máximo
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <lcd_send_string+0x68>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	425a      	negs	r2, r3
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	f002 021f 	and.w	r2, r2, #31
 8001d20:	bf58      	it	pl
 8001d22:	4253      	negpl	r3, r2
 8001d24:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <lcd_send_string+0x68>)
 8001d26:	6013      	str	r3, [r2, #0]
		contador_linea++;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <lcd_send_string+0x68>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <lcd_send_string+0x68>)
 8001d30:	6013      	str	r3, [r2, #0]
		if (contador_linea == ROWS)
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <lcd_send_string+0x68>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d102      	bne.n	8001d40 <lcd_send_string+0x4c>
			lcd_send_cmd(0xc0); //Pasa a la segunda línea
 8001d3a:	20c0      	movs	r0, #192	; 0xc0
 8001d3c:	f7ff ff6c 	bl	8001c18 <lcd_send_cmd>
		if (contador_linea > ROWS*LINES)
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <lcd_send_string+0x68>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	dc04      	bgt.n	8001d52 <lcd_send_string+0x5e>
	while (*str){
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1d9      	bne.n	8001d04 <lcd_send_string+0x10>
 8001d50:	e000      	b.n	8001d54 <lcd_send_string+0x60>
			return; //No hace nada más porque no hay espacio
 8001d52:	bf00      	nop
	}
}
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200002c4 	.word	0x200002c4

08001d60 <lcd_update>:

void lcd_update (char *str){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

	lcd_clear(); //Borra la pantalla y pone el cursor en la esquina superior izquierda
 8001d68:	f000 f807 	bl	8001d7a <lcd_clear>
			lcd_send_cmd(0xc0); //Pasa a la segunda línea
		if (contador_lineas > ROWS*LINES)
			return; //No hace nada más porque no hay espacio
	}
	*/
	lcd_send_string(str);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ffc1 	bl	8001cf4 <lcd_send_string>

}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <lcd_clear>:

void lcd_clear(void){ //Tambien posiciona el cursor en la esquina superior izquierda. SOLO VALE PARA DISPLAY 16x2
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80); //Posiciona en el comienzo
 8001d80:	2080      	movs	r0, #128	; 0x80
 8001d82:	f7ff ff49 	bl	8001c18 <lcd_send_cmd>
	for (int i=0; i < LINES; i++){ //Recorrer todas las filas
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	e011      	b.n	8001db0 <lcd_clear+0x36>
		for (int j=0; j < ROWS; j++) //Recorrer todas las columnas
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	e005      	b.n	8001d9e <lcd_clear+0x24>
			lcd_send_data(' '); //Poner espacios (borrar todo)
 8001d92:	2020      	movs	r0, #32
 8001d94:	f7ff ff10 	bl	8001bb8 <lcd_send_data>
		for (int j=0; j < ROWS; j++) //Recorrer todas las columnas
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	ddf6      	ble.n	8001d92 <lcd_clear+0x18>
		lcd_send_cmd(0x0c); //Posicionar en la segunda linea
 8001da4:	200c      	movs	r0, #12
 8001da6:	f7ff ff37 	bl	8001c18 <lcd_send_cmd>
	for (int i=0; i < LINES; i++){ //Recorrer todas las filas
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3301      	adds	r3, #1
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	ddea      	ble.n	8001d8c <lcd_clear+0x12>
	}
	lcd_send_cmd(0x80); //Posicionar el cursor en el comienzo de nuevo
 8001db6:	2080      	movs	r0, #128	; 0x80
 8001db8:	f7ff ff2e 	bl	8001c18 <lcd_send_cmd>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <Error_Handler+0x8>
	...

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x4c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e0e:	2007      	movs	r0, #7
 8001e10:	f001 f8be 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800

08001e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a33      	ldr	r2, [pc, #204]	; (8001f0c <HAL_ADC_MspInit+0xec>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d15f      	bne.n	8001f02 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_ADC_MspInit+0xf0>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <HAL_ADC_MspInit+0xf0>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <HAL_ADC_MspInit+0xf0>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_ADC_MspInit+0xf0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a2a      	ldr	r2, [pc, #168]	; (8001f10 <HAL_ADC_MspInit+0xf0>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_ADC_MspInit+0xf0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e7a:	2330      	movs	r3, #48	; 0x30
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4821      	ldr	r0, [pc, #132]	; (8001f14 <HAL_ADC_MspInit+0xf4>)
 8001e8e:	f001 fc3f 	bl	8003710 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001e94:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <HAL_ADC_MspInit+0xfc>)
 8001e96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001ebc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ed6:	4810      	ldr	r0, [pc, #64]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001ed8:	f001 f8aa 	bl	8003030 <HAL_DMA_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ee2:	f7ff ff6f 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_ADC_MspInit+0xf8>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2012      	movs	r0, #18
 8001ef8:	f001 f855 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001efc:	2012      	movs	r0, #18
 8001efe:	f001 f86e 	bl	8002fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40012000 	.word	0x40012000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	20000100 	.word	0x20000100
 8001f1c:	40026410 	.word	0x40026410

08001f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <HAL_I2C_MspInit+0x84>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d12b      	bne.n	8001f9a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f5e:	23c0      	movs	r3, #192	; 0xc0
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f62:	2312      	movs	r3, #18
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <HAL_I2C_MspInit+0x8c>)
 8001f7a:	f001 fbc9 	bl	8003710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_I2C_MspInit+0x88>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	; 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40005400 	.word	0x40005400
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020400 	.word	0x40020400

08001fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_TIM_Base_MspInit+0x80>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d116      	bne.n	8001ff0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_TIM_Base_MspInit+0x84>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_TIM_Base_MspInit+0x84>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_TIM_Base_MspInit+0x84>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	201b      	movs	r0, #27
 8001fe4:	f000 ffdf 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001fe8:	201b      	movs	r0, #27
 8001fea:	f000 fff8 	bl	8002fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fee:	e01a      	b.n	8002026 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d115      	bne.n	8002026 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_TIM_Base_MspInit+0x84>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <HAL_TIM_Base_MspInit+0x84>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_TIM_Base_MspInit+0x84>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	201c      	movs	r0, #28
 800201c:	f000 ffc3 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002020:	201c      	movs	r0, #28
 8002022:	f000 ffdc 	bl	8002fde <HAL_NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40010000 	.word	0x40010000
 8002034:	40023800 	.word	0x40023800

08002038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_TIM_MspPostInit+0x68>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d11e      	bne.n	8002098 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_TIM_MspPostInit+0x6c>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_TIM_MspPostInit+0x6c>)
 8002064:	f043 0310 	orr.w	r3, r3, #16
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_TIM_MspPostInit+0x6c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800207a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002088:	2301      	movs	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	4619      	mov	r1, r3
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <HAL_TIM_MspPostInit+0x70>)
 8002094:	f001 fb3c 	bl	8003710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002098:	bf00      	nop
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40021000 	.word	0x40021000

080020ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <NMI_Handler+0x4>

080020b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <HardFault_Handler+0x4>

080020b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <MemManage_Handler+0x4>

080020be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <BusFault_Handler+0x4>

080020c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <UsageFault_Handler+0x4>

080020ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f8:	f000 f8f6 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002104:	2001      	movs	r0, #1
 8002106:	f001 fc87 	bl	8003a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <ADC_IRQHandler+0x10>)
 8002116:	f000 f96e 	bl	80023f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200000b8 	.word	0x200000b8

08002124 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <TIM1_CC_IRQHandler+0x10>)
 800212a:	f003 f819 	bl	8005160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200001b4 	.word	0x200001b4

08002138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <TIM2_IRQHandler+0x10>)
 800213e:	f003 f80f 	bl	8005160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200001fc 	.word	0x200001fc

0800214c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <DMA2_Stream0_IRQHandler+0x10>)
 8002152:	f001 f873 	bl	800323c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000100 	.word	0x20000100

08002160 <_sbrk>:
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
 8002190:	f003 fdd0 	bl	8005d34 <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20020000 	.word	0x20020000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	200002c8 	.word	0x200002c8
 80021c8:	200002e0 	.word	0x200002e0

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <Reset_Handler>:
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002228 <LoopFillZerobss+0x12>
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <LoopFillZerobss+0x16>)
 80021f6:	490e      	ldr	r1, [pc, #56]	; (8002230 <LoopFillZerobss+0x1a>)
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <LoopFillZerobss+0x1e>)
 80021fa:	2300      	movs	r3, #0
 80021fc:	e002      	b.n	8002204 <LoopCopyDataInit>

080021fe <CopyDataInit>:
 80021fe:	58d4      	ldr	r4, [r2, r3]
 8002200:	50c4      	str	r4, [r0, r3]
 8002202:	3304      	adds	r3, #4

08002204 <LoopCopyDataInit>:
 8002204:	18c4      	adds	r4, r0, r3
 8002206:	428c      	cmp	r4, r1
 8002208:	d3f9      	bcc.n	80021fe <CopyDataInit>
 800220a:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <LoopFillZerobss+0x22>)
 800220c:	4c0b      	ldr	r4, [pc, #44]	; (800223c <LoopFillZerobss+0x26>)
 800220e:	2300      	movs	r3, #0
 8002210:	e001      	b.n	8002216 <LoopFillZerobss>

08002212 <FillZerobss>:
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	3204      	adds	r2, #4

08002216 <LoopFillZerobss>:
 8002216:	42a2      	cmp	r2, r4
 8002218:	d3fb      	bcc.n	8002212 <FillZerobss>
 800221a:	f7ff ffd7 	bl	80021cc <SystemInit>
 800221e:	f003 fd8f 	bl	8005d40 <__libc_init_array>
 8002222:	f7fe fdfd 	bl	8000e20 <main>
 8002226:	4770      	bx	lr
 8002228:	20020000 	.word	0x20020000
 800222c:	20000000 	.word	0x20000000
 8002230:	2000009c 	.word	0x2000009c
 8002234:	080068b0 	.word	0x080068b0
 8002238:	2000009c 	.word	0x2000009c
 800223c:	200002e0 	.word	0x200002e0

08002240 <DMA1_Stream0_IRQHandler>:
 8002240:	e7fe      	b.n	8002240 <DMA1_Stream0_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_Init+0x40>)
 800224e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_Init+0x40>)
 800225a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800225e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_Init+0x40>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 fe8f 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fdaa 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 feb5 	bl	8003016 <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f000 fe6f 	bl	8002fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000002c 	.word	0x2000002c
 80022e0:	20000034 	.word	0x20000034
 80022e4:	20000030 	.word	0x20000030

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000034 	.word	0x20000034
 800230c:	200002cc 	.word	0x200002cc

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200002cc 	.word	0x200002cc

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000034 	.word	0x20000034

08002370 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e033      	b.n	80023ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fd46 	bl	8001e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b6:	f023 0302 	bic.w	r3, r3, #2
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fb68 	bl	8002a98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
 80023de:	e001      	b.n	80023e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d049      	beq.n	80024c0 <HAL_ADC_IRQHandler+0xca>
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d046      	beq.n	80024c0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d12b      	bne.n	80024b0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d127      	bne.n	80024b0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002478:	2b00      	cmp	r3, #0
 800247a:	d119      	bne.n	80024b0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0220 	bic.w	r2, r2, #32
 800248a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fb75 	bl	8000ba0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0212 	mvn.w	r2, #18
 80024be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d057      	beq.n	8002586 <HAL_ADC_IRQHandler+0x190>
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d054      	beq.n	8002586 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d139      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800251a:	2b00      	cmp	r3, #0
 800251c:	d12b      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002528:	2b00      	cmp	r3, #0
 800252a:	d124      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11d      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800253e:	2b00      	cmp	r3, #0
 8002540:	d119      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002550:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d105      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fc0c 	bl	8002d94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 020c 	mvn.w	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d017      	beq.n	80025cc <HAL_ADC_IRQHandler+0x1d6>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d014      	beq.n	80025cc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10d      	bne.n	80025cc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f925 	bl	800280c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f06f 0201 	mvn.w	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025da:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <HAL_ADC_IRQHandler+0x218>
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d012      	beq.n	800260e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f043 0202 	orr.w	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0220 	mvn.w	r2, #32
 80025fc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f90e 	bl	8002820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0220 	mvn.w	r2, #32
 800260c:	601a      	str	r2, [r3, #0]
  }
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Start_DMA+0x1e>
 8002632:	2302      	movs	r3, #2
 8002634:	e0ce      	b.n	80027d4 <HAL_ADC_Start_DMA+0x1bc>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d018      	beq.n	800267e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800265c:	4b5f      	ldr	r3, [pc, #380]	; (80027dc <HAL_ADC_Start_DMA+0x1c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a5f      	ldr	r2, [pc, #380]	; (80027e0 <HAL_ADC_Start_DMA+0x1c8>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	0c9a      	lsrs	r2, r3, #18
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002670:	e002      	b.n	8002678 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	3b01      	subs	r3, #1
 8002676:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f9      	bne.n	8002672 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268c:	d107      	bne.n	800269e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800269c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	f040 8086 	bne.w	80027ba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ec:	d106      	bne.n	80026fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f023 0206 	bic.w	r2, r3, #6
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
 80026fa:	e002      	b.n	8002702 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270a:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <HAL_ADC_Start_DMA+0x1cc>)
 800270c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	4a35      	ldr	r2, [pc, #212]	; (80027e8 <HAL_ADC_Start_DMA+0x1d0>)
 8002714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	4a34      	ldr	r2, [pc, #208]	; (80027ec <HAL_ADC_Start_DMA+0x1d4>)
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	4a33      	ldr	r2, [pc, #204]	; (80027f0 <HAL_ADC_Start_DMA+0x1d8>)
 8002724:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800272e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800273e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800274e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	334c      	adds	r3, #76	; 0x4c
 800275a:	4619      	mov	r1, r3
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f000 fd14 	bl	800318c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10f      	bne.n	8002790 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d129      	bne.n	80027d2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	e020      	b.n	80027d2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_ADC_Start_DMA+0x1dc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d11b      	bne.n	80027d2 <HAL_ADC_Start_DMA+0x1ba>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d114      	bne.n	80027d2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	e00b      	b.n	80027d2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	2000002c 	.word	0x2000002c
 80027e0:	431bde83 	.word	0x431bde83
 80027e4:	40012300 	.word	0x40012300
 80027e8:	08002c91 	.word	0x08002c91
 80027ec:	08002d4b 	.word	0x08002d4b
 80027f0:	08002d67 	.word	0x08002d67
 80027f4:	40012000 	.word	0x40012000

080027f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1c>
 800284c:	2302      	movs	r3, #2
 800284e:	e113      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x244>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b09      	cmp	r3, #9
 800285e:	d925      	bls.n	80028ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68d9      	ldr	r1, [r3, #12]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	3b1e      	subs	r3, #30
 8002876:	2207      	movs	r2, #7
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43da      	mvns	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	400a      	ands	r2, r1
 8002884:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68d9      	ldr	r1, [r3, #12]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	4618      	mov	r0, r3
 8002898:	4603      	mov	r3, r0
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4403      	add	r3, r0
 800289e:	3b1e      	subs	r3, #30
 80028a0:	409a      	lsls	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	e022      	b.n	80028f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6919      	ldr	r1, [r3, #16]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	2207      	movs	r2, #7
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	400a      	ands	r2, r1
 80028ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6919      	ldr	r1, [r3, #16]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4403      	add	r3, r0
 80028e8:	409a      	lsls	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d824      	bhi.n	8002944 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	3b05      	subs	r3, #5
 800290c:	221f      	movs	r2, #31
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	400a      	ands	r2, r1
 800291a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	4618      	mov	r0, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b05      	subs	r3, #5
 8002936:	fa00 f203 	lsl.w	r2, r0, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	635a      	str	r2, [r3, #52]	; 0x34
 8002942:	e04c      	b.n	80029de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b0c      	cmp	r3, #12
 800294a:	d824      	bhi.n	8002996 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b23      	subs	r3, #35	; 0x23
 800295e:	221f      	movs	r2, #31
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43da      	mvns	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	400a      	ands	r2, r1
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	4618      	mov	r0, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	3b23      	subs	r3, #35	; 0x23
 8002988:	fa00 f203 	lsl.w	r2, r0, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
 8002994:	e023      	b.n	80029de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b41      	subs	r3, #65	; 0x41
 80029a8:	221f      	movs	r2, #31
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	400a      	ands	r2, r1
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b41      	subs	r3, #65	; 0x41
 80029d2:	fa00 f203 	lsl.w	r2, r0, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_ADC_ConfigChannel+0x250>)
 80029e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a28      	ldr	r2, [pc, #160]	; (8002a88 <HAL_ADC_ConfigChannel+0x254>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d10f      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1d8>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b12      	cmp	r3, #18
 80029f2:	d10b      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_ADC_ConfigChannel+0x254>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d12b      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x23a>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_ADC_ConfigChannel+0x258>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <HAL_ADC_ConfigChannel+0x1f4>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b11      	cmp	r3, #17
 8002a26:	d122      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a11      	ldr	r2, [pc, #68]	; (8002a8c <HAL_ADC_ConfigChannel+0x258>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d111      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_ADC_ConfigChannel+0x25c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <HAL_ADC_ConfigChannel+0x260>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	0c9a      	lsrs	r2, r3, #18
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40012300 	.word	0x40012300
 8002a88:	40012000 	.word	0x40012000
 8002a8c:	10000012 	.word	0x10000012
 8002a90:	2000002c 	.word	0x2000002c
 8002a94:	431bde83 	.word	0x431bde83

08002a98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aa0:	4b79      	ldr	r3, [pc, #484]	; (8002c88 <ADC_Init+0x1f0>)
 8002aa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	021a      	lsls	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <ADC_Init+0x1f4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6899      	ldr	r1, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	e00f      	b.n	8002b96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0202 	bic.w	r2, r2, #2
 8002ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7e1b      	ldrb	r3, [r3, #24]
 8002bb0:	005a      	lsls	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002be2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	035a      	lsls	r2, r3, #13
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	e007      	b.n	8002c0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	051a      	lsls	r2, r3, #20
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c4e:	025a      	lsls	r2, r3, #9
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	029a      	lsls	r2, r3, #10
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40012300 	.word	0x40012300
 8002c8c:	0f000001 	.word	0x0f000001

08002c90 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d13c      	bne.n	8002d24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d12b      	bne.n	8002d1c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d127      	bne.n	8002d1c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d006      	beq.n	8002ce8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d119      	bne.n	8002d1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0220 	bic.w	r2, r2, #32
 8002cf6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7fd ff3f 	bl	8000ba0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d22:	e00e      	b.n	8002d42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff fd75 	bl	8002820 <HAL_ADC_ErrorCallback>
}
 8002d36:	e004      	b.n	8002d42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fd4d 	bl	80027f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2240      	movs	r2, #64	; 0x40
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f043 0204 	orr.w	r2, r3, #4
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7ff fd4a 	bl	8002820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <__NVIC_GetPriorityGrouping+0x18>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0307 	and.w	r3, r3, #7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	db0b      	blt.n	8002e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4907      	ldr	r1, [pc, #28]	; (8002e44 <__NVIC_EnableIRQ+0x38>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000e100 	.word	0xe000e100

08002e48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db12      	blt.n	8002e80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	490a      	ldr	r1, [pc, #40]	; (8002e8c <__NVIC_DisableIRQ+0x44>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2001      	movs	r0, #1
 8002e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6e:	3320      	adds	r3, #32
 8002e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e74:	f3bf 8f4f 	dsb	sy
}
 8002e78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e7a:	f3bf 8f6f 	isb	sy
}
 8002e7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000e100 	.word	0xe000e100

08002e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db0a      	blt.n	8002eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	490c      	ldr	r1, [pc, #48]	; (8002edc <__NVIC_SetPriority+0x4c>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb8:	e00a      	b.n	8002ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <__NVIC_SetPriority+0x50>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	3b04      	subs	r3, #4
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	440b      	add	r3, r1
 8002ece:	761a      	strb	r2, [r3, #24]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000e100 	.word	0xe000e100
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f1c3 0307 	rsb	r3, r3, #7
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	bf28      	it	cs
 8002f02:	2304      	movcs	r3, #4
 8002f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d902      	bls.n	8002f14 <NVIC_EncodePriority+0x30>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3b03      	subs	r3, #3
 8002f12:	e000      	b.n	8002f16 <NVIC_EncodePriority+0x32>
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	401a      	ands	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43d9      	mvns	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	4313      	orrs	r3, r2
         );
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3724      	adds	r7, #36	; 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f5c:	d301      	bcc.n	8002f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00f      	b.n	8002f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <SysTick_Config+0x40>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f7ff ff8e 	bl	8002e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <SysTick_Config+0x40>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <SysTick_Config+0x40>)
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	e000e010 	.word	0xe000e010

08002f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff05 	bl	8002da8 <__NVIC_SetPriorityGrouping>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	4603      	mov	r3, r0
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb8:	f7ff ff1a 	bl	8002df0 <__NVIC_GetPriorityGrouping>
 8002fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	6978      	ldr	r0, [r7, #20]
 8002fc4:	f7ff ff8e 	bl	8002ee4 <NVIC_EncodePriority>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff5d 	bl	8002e90 <__NVIC_SetPriority>
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff0d 	bl	8002e0c <__NVIC_EnableIRQ>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	4603      	mov	r3, r0
 8003002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff1d 	bl	8002e48 <__NVIC_DisableIRQ>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ff94 	bl	8002f4c <SysTick_Config>
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff f968 	bl	8002310 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e099      	b.n	8003180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306c:	e00f      	b.n	800308e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800306e:	f7ff f94f 	bl	8002310 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b05      	cmp	r3, #5
 800307a:	d908      	bls.n	800308e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2203      	movs	r2, #3
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e078      	b.n	8003180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e8      	bne.n	800306e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <HAL_DMA_Init+0x158>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4313      	orrs	r3, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0307 	bic.w	r3, r3, #7
 800310e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b04      	cmp	r3, #4
 8003120:	d117      	bne.n	8003152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa6f 	bl	8003618 <DMA_CheckFifoParam>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2240      	movs	r2, #64	; 0x40
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800314e:	2301      	movs	r3, #1
 8003150:	e016      	b.n	8003180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fa26 	bl	80035ac <DMA_CalcBaseAndBitshift>
 8003160:	4603      	mov	r3, r0
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	223f      	movs	r2, #63	; 0x3f
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	f010803f 	.word	0xf010803f

0800318c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_DMA_Start_IT+0x26>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e040      	b.n	8003234 <HAL_DMA_Start_IT+0xa8>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d12f      	bne.n	8003226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f9b8 	bl	8003550 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	223f      	movs	r2, #63	; 0x3f
 80031e6:	409a      	lsls	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0216 	orr.w	r2, r2, #22
 80031fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0208 	orr.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e005      	b.n	8003232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003248:	4b8e      	ldr	r3, [pc, #568]	; (8003484 <HAL_DMA_IRQHandler+0x248>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a8e      	ldr	r2, [pc, #568]	; (8003488 <HAL_DMA_IRQHandler+0x24c>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0a9b      	lsrs	r3, r3, #10
 8003254:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	2208      	movs	r2, #8
 8003268:	409a      	lsls	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01a      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0204 	bic.w	r2, r2, #4
 800328e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	2208      	movs	r2, #8
 8003296:	409a      	lsls	r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	2201      	movs	r2, #1
 80032ae:	409a      	lsls	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d012      	beq.n	80032de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	2201      	movs	r2, #1
 80032cc:	409a      	lsls	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f043 0202 	orr.w	r2, r3, #2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	2204      	movs	r2, #4
 80032e4:	409a      	lsls	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d012      	beq.n	8003314 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	2204      	movs	r2, #4
 8003302:	409a      	lsls	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f043 0204 	orr.w	r2, r3, #4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	2210      	movs	r2, #16
 800331a:	409a      	lsls	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d043      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d03c      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	2210      	movs	r2, #16
 8003338:	409a      	lsls	r2, r3
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d018      	beq.n	800337e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d108      	bne.n	800336c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d024      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
 800336a:	e01f      	b.n	80033ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01b      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
 800337c:	e016      	b.n	80033ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0208 	bic.w	r2, r2, #8
 800339a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2220      	movs	r2, #32
 80033b2:	409a      	lsls	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 808f 	beq.w	80034dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8087 	beq.w	80034dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	2220      	movs	r2, #32
 80033d4:	409a      	lsls	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	d136      	bne.n	8003454 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0216 	bic.w	r2, r2, #22
 80033f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003404:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <HAL_DMA_IRQHandler+0x1da>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0208 	bic.w	r2, r2, #8
 8003424:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	223f      	movs	r2, #63	; 0x3f
 800342c:	409a      	lsls	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	2b00      	cmp	r3, #0
 8003448:	d07e      	beq.n	8003548 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
        }
        return;
 8003452:	e079      	b.n	8003548 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01d      	beq.n	800349e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10d      	bne.n	800348c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	2b00      	cmp	r3, #0
 8003476:	d031      	beq.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
 8003480:	e02c      	b.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
 8003482:	bf00      	nop
 8003484:	2000002c 	.word	0x2000002c
 8003488:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d023      	beq.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
 800349c:	e01e      	b.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10f      	bne.n	80034cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0210 	bic.w	r2, r2, #16
 80034ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d032      	beq.n	800354a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2205      	movs	r2, #5
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	3301      	adds	r3, #1
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	429a      	cmp	r2, r3
 8003512:	d307      	bcc.n	8003524 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f2      	bne.n	8003508 <HAL_DMA_IRQHandler+0x2cc>
 8003522:	e000      	b.n	8003526 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003524:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
 8003546:	e000      	b.n	800354a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003548:	bf00      	nop
    }
  }
}
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800356c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d108      	bne.n	8003590 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800358e:	e007      	b.n	80035a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3b10      	subs	r3, #16
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <DMA_CalcBaseAndBitshift+0x64>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035c6:	4a13      	ldr	r2, [pc, #76]	; (8003614 <DMA_CalcBaseAndBitshift+0x68>)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d909      	bls.n	80035ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	1d1a      	adds	r2, r3, #4
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	659a      	str	r2, [r3, #88]	; 0x58
 80035ec:	e007      	b.n	80035fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035f6:	f023 0303 	bic.w	r3, r3, #3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	aaaaaaab 	.word	0xaaaaaaab
 8003614:	08006864 	.word	0x08006864

08003618 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11f      	bne.n	8003672 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d856      	bhi.n	80036e6 <DMA_CheckFifoParam+0xce>
 8003638:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <DMA_CheckFifoParam+0x28>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003651 	.word	0x08003651
 8003644:	08003663 	.word	0x08003663
 8003648:	08003651 	.word	0x08003651
 800364c:	080036e7 	.word	0x080036e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d046      	beq.n	80036ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003660:	e043      	b.n	80036ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800366a:	d140      	bne.n	80036ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003670:	e03d      	b.n	80036ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367a:	d121      	bne.n	80036c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d837      	bhi.n	80036f2 <DMA_CheckFifoParam+0xda>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <DMA_CheckFifoParam+0x70>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	08003699 	.word	0x08003699
 800368c:	0800369f 	.word	0x0800369f
 8003690:	08003699 	.word	0x08003699
 8003694:	080036b1 	.word	0x080036b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e030      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d025      	beq.n	80036f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ae:	e022      	b.n	80036f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b8:	d11f      	bne.n	80036fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036be:	e01c      	b.n	80036fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d903      	bls.n	80036ce <DMA_CheckFifoParam+0xb6>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d003      	beq.n	80036d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036cc:	e018      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
      break;
 80036d2:	e015      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      break;
 80036e4:	e00b      	b.n	80036fe <DMA_CheckFifoParam+0xe6>
      break;
 80036e6:	bf00      	nop
 80036e8:	e00a      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036ea:	bf00      	nop
 80036ec:	e008      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036ee:	bf00      	nop
 80036f0:	e006      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036f2:	bf00      	nop
 80036f4:	e004      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036f6:	bf00      	nop
 80036f8:	e002      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;   
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003700:	7bfb      	ldrb	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop

08003710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e159      	b.n	80039e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800372c:	2201      	movs	r2, #1
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	429a      	cmp	r2, r3
 8003746:	f040 8148 	bne.w	80039da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d005      	beq.n	8003762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800375e:	2b02      	cmp	r3, #2
 8003760:	d130      	bne.n	80037c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003798:	2201      	movs	r2, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 0201 	and.w	r2, r3, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d017      	beq.n	8003800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	2203      	movs	r2, #3
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d123      	bne.n	8003854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	220f      	movs	r2, #15
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	69b9      	ldr	r1, [r7, #24]
 8003850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80a2 	beq.w	80039da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <HAL_GPIO_Init+0x2e8>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	4a56      	ldr	r2, [pc, #344]	; (80039f8 <HAL_GPIO_Init+0x2e8>)
 80038a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a4:	6453      	str	r3, [r2, #68]	; 0x44
 80038a6:	4b54      	ldr	r3, [pc, #336]	; (80039f8 <HAL_GPIO_Init+0x2e8>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038b2:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_GPIO_Init+0x2ec>)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	3302      	adds	r3, #2
 80038ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a49      	ldr	r2, [pc, #292]	; (8003a00 <HAL_GPIO_Init+0x2f0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d019      	beq.n	8003912 <HAL_GPIO_Init+0x202>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a48      	ldr	r2, [pc, #288]	; (8003a04 <HAL_GPIO_Init+0x2f4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_GPIO_Init+0x1fe>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a47      	ldr	r2, [pc, #284]	; (8003a08 <HAL_GPIO_Init+0x2f8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00d      	beq.n	800390a <HAL_GPIO_Init+0x1fa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a46      	ldr	r2, [pc, #280]	; (8003a0c <HAL_GPIO_Init+0x2fc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <HAL_GPIO_Init+0x1f6>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a45      	ldr	r2, [pc, #276]	; (8003a10 <HAL_GPIO_Init+0x300>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <HAL_GPIO_Init+0x1f2>
 80038fe:	2304      	movs	r3, #4
 8003900:	e008      	b.n	8003914 <HAL_GPIO_Init+0x204>
 8003902:	2307      	movs	r3, #7
 8003904:	e006      	b.n	8003914 <HAL_GPIO_Init+0x204>
 8003906:	2303      	movs	r3, #3
 8003908:	e004      	b.n	8003914 <HAL_GPIO_Init+0x204>
 800390a:	2302      	movs	r3, #2
 800390c:	e002      	b.n	8003914 <HAL_GPIO_Init+0x204>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_GPIO_Init+0x204>
 8003912:	2300      	movs	r3, #0
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	f002 0203 	and.w	r2, r2, #3
 800391a:	0092      	lsls	r2, r2, #2
 800391c:	4093      	lsls	r3, r2
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003924:	4935      	ldr	r1, [pc, #212]	; (80039fc <HAL_GPIO_Init+0x2ec>)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	3302      	adds	r3, #2
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003932:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <HAL_GPIO_Init+0x304>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003956:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <HAL_GPIO_Init+0x304>)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800395c:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <HAL_GPIO_Init+0x304>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003980:	4a24      	ldr	r2, [pc, #144]	; (8003a14 <HAL_GPIO_Init+0x304>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003986:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <HAL_GPIO_Init+0x304>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039aa:	4a1a      	ldr	r2, [pc, #104]	; (8003a14 <HAL_GPIO_Init+0x304>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b0:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <HAL_GPIO_Init+0x304>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d4:	4a0f      	ldr	r2, [pc, #60]	; (8003a14 <HAL_GPIO_Init+0x304>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3301      	adds	r3, #1
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	f67f aea2 	bls.w	800372c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3724      	adds	r7, #36	; 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40013800 	.word	0x40013800
 8003a00:	40020000 	.word	0x40020000
 8003a04:	40020400 	.word	0x40020400
 8003a08:	40020800 	.word	0x40020800
 8003a0c:	40020c00 	.word	0x40020c00
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40013c00 	.word	0x40013c00

08003a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a22:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d006      	beq.n	8003a3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd f92e 	bl	8000c98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40013c00 	.word	0x40013c00

08003a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e12b      	b.n	8003cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fe fa56 	bl	8001f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2224      	movs	r2, #36	; 0x24
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003aac:	f001 f888 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8003ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4a81      	ldr	r2, [pc, #516]	; (8003cbc <HAL_I2C_Init+0x274>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d807      	bhi.n	8003acc <HAL_I2C_Init+0x84>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a80      	ldr	r2, [pc, #512]	; (8003cc0 <HAL_I2C_Init+0x278>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	bf94      	ite	ls
 8003ac4:	2301      	movls	r3, #1
 8003ac6:	2300      	movhi	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e006      	b.n	8003ada <HAL_I2C_Init+0x92>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a7d      	ldr	r2, [pc, #500]	; (8003cc4 <HAL_I2C_Init+0x27c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bf94      	ite	ls
 8003ad4:	2301      	movls	r3, #1
 8003ad6:	2300      	movhi	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0e7      	b.n	8003cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a78      	ldr	r2, [pc, #480]	; (8003cc8 <HAL_I2C_Init+0x280>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0c9b      	lsrs	r3, r3, #18
 8003aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a6a      	ldr	r2, [pc, #424]	; (8003cbc <HAL_I2C_Init+0x274>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d802      	bhi.n	8003b1c <HAL_I2C_Init+0xd4>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	e009      	b.n	8003b30 <HAL_I2C_Init+0xe8>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	4a69      	ldr	r2, [pc, #420]	; (8003ccc <HAL_I2C_Init+0x284>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	3301      	adds	r3, #1
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	495c      	ldr	r1, [pc, #368]	; (8003cbc <HAL_I2C_Init+0x274>)
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	d819      	bhi.n	8003b84 <HAL_I2C_Init+0x13c>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e59      	subs	r1, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b5e:	1c59      	adds	r1, r3, #1
 8003b60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b64:	400b      	ands	r3, r1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_I2C_Init+0x138>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e59      	subs	r1, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b78:	3301      	adds	r3, #1
 8003b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7e:	e051      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003b80:	2304      	movs	r3, #4
 8003b82:	e04f      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d111      	bne.n	8003bb0 <HAL_I2C_Init+0x168>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	440b      	add	r3, r1
 8003b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e012      	b.n	8003bd6 <HAL_I2C_Init+0x18e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e58      	subs	r0, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	0099      	lsls	r1, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Init+0x196>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e022      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10e      	bne.n	8003c04 <HAL_I2C_Init+0x1bc>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1e58      	subs	r0, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	440b      	add	r3, r1
 8003bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	e00f      	b.n	8003c24 <HAL_I2C_Init+0x1dc>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e58      	subs	r0, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	0099      	lsls	r1, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	6809      	ldr	r1, [r1, #0]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6911      	ldr	r1, [r2, #16]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68d2      	ldr	r2, [r2, #12]
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	000186a0 	.word	0x000186a0
 8003cc0:	001e847f 	.word	0x001e847f
 8003cc4:	003d08ff 	.word	0x003d08ff
 8003cc8:	431bde83 	.word	0x431bde83
 8003ccc:	10624dd3 	.word	0x10624dd3

08003cd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	460b      	mov	r3, r1
 8003cde:	817b      	strh	r3, [r7, #10]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7fe fb14 	bl	8002310 <HAL_GetTick>
 8003ce8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	f040 80e0 	bne.w	8003eb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2319      	movs	r3, #25
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4970      	ldr	r1, [pc, #448]	; (8003ec4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f964 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e0d3      	b.n	8003eba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_I2C_Master_Transmit+0x50>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e0cc      	b.n	8003eba <HAL_I2C_Master_Transmit+0x1ea>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d007      	beq.n	8003d46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2221      	movs	r2, #33	; 0x21
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2210      	movs	r2, #16
 8003d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	893a      	ldrh	r2, [r7, #8]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4a50      	ldr	r2, [pc, #320]	; (8003ec8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d88:	8979      	ldrh	r1, [r7, #10]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	6a3a      	ldr	r2, [r7, #32]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f89c 	bl	8003ecc <I2C_MasterRequestWrite>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e08d      	b.n	8003eba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003db4:	e066      	b.n	8003e84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	6a39      	ldr	r1, [r7, #32]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f9de 	bl	800417c <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d107      	bne.n	8003dde <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ddc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e06b      	b.n	8003eba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	781a      	ldrb	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d11b      	bne.n	8003e58 <HAL_I2C_Master_Transmit+0x188>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d017      	beq.n	8003e58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	6a39      	ldr	r1, [r7, #32]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f9ce 	bl	80041fe <I2C_WaitOnBTFFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d107      	bne.n	8003e80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e01a      	b.n	8003eba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d194      	bne.n	8003db6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	00100002 	.word	0x00100002
 8003ec8:	ffff0000 	.word	0xffff0000

08003ecc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d006      	beq.n	8003ef6 <I2C_MasterRequestWrite+0x2a>
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d003      	beq.n	8003ef6 <I2C_MasterRequestWrite+0x2a>
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ef4:	d108      	bne.n	8003f08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e00b      	b.n	8003f20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	2b12      	cmp	r3, #18
 8003f0e:	d107      	bne.n	8003f20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f84f 	bl	8003fd0 <I2C_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f46:	d103      	bne.n	8003f50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e035      	b.n	8003fc0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f5c:	d108      	bne.n	8003f70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f5e:	897b      	ldrh	r3, [r7, #10]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f6c:	611a      	str	r2, [r3, #16]
 8003f6e:	e01b      	b.n	8003fa8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f70:	897b      	ldrh	r3, [r7, #10]
 8003f72:	11db      	asrs	r3, r3, #7
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f003 0306 	and.w	r3, r3, #6
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f063 030f 	orn	r3, r3, #15
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	490e      	ldr	r1, [pc, #56]	; (8003fc8 <I2C_MasterRequestWrite+0xfc>)
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f875 	bl	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e010      	b.n	8003fc0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f9e:	897b      	ldrh	r3, [r7, #10]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4907      	ldr	r1, [pc, #28]	; (8003fcc <I2C_MasterRequestWrite+0x100>)
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f865 	bl	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	00010008 	.word	0x00010008
 8003fcc:	00010002 	.word	0x00010002

08003fd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe0:	e025      	b.n	800402e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d021      	beq.n	800402e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fe f991 	bl	8002310 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d116      	bne.n	800402e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e023      	b.n	8004076 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d10d      	bne.n	8004054 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	43da      	mvns	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	e00c      	b.n	800406e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf0c      	ite	eq
 8004066:	2301      	moveq	r3, #1
 8004068:	2300      	movne	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	429a      	cmp	r2, r3
 8004072:	d0b6      	beq.n	8003fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800408c:	e051      	b.n	8004132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409c:	d123      	bne.n	80040e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f043 0204 	orr.w	r2, r3, #4
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e046      	b.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d021      	beq.n	8004132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7fe f90f 	bl	8002310 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d116      	bne.n	8004132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f043 0220 	orr.w	r2, r3, #32
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e020      	b.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d10c      	bne.n	8004156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	43da      	mvns	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e00b      	b.n	800416e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	43da      	mvns	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4013      	ands	r3, r2
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d18d      	bne.n	800408e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004188:	e02d      	b.n	80041e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f878 	bl	8004280 <I2C_IsAcknowledgeFailed>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e02d      	b.n	80041f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d021      	beq.n	80041e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fe f8b5 	bl	8002310 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d116      	bne.n	80041e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e007      	b.n	80041f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d1ca      	bne.n	800418a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800420a:	e02d      	b.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f837 	bl	8004280 <I2C_IsAcknowledgeFailed>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e02d      	b.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d021      	beq.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004224:	f7fe f874 	bl	8002310 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d116      	bne.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e007      	b.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b04      	cmp	r3, #4
 8004274:	d1ca      	bne.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004296:	d11b      	bne.n	80042d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f043 0204 	orr.w	r2, r3, #4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e267      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d075      	beq.n	80043ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042fe:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b04      	cmp	r3, #4
 8004308:	d00c      	beq.n	8004324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430a:	4b85      	ldr	r3, [pc, #532]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004312:	2b08      	cmp	r3, #8
 8004314:	d112      	bne.n	800433c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004316:	4b82      	ldr	r3, [pc, #520]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004322:	d10b      	bne.n	800433c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004324:	4b7e      	ldr	r3, [pc, #504]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d05b      	beq.n	80043e8 <HAL_RCC_OscConfig+0x108>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d157      	bne.n	80043e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e242      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d106      	bne.n	8004354 <HAL_RCC_OscConfig+0x74>
 8004346:	4b76      	ldr	r3, [pc, #472]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a75      	ldr	r2, [pc, #468]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e01d      	b.n	8004390 <HAL_RCC_OscConfig+0xb0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x98>
 800435e:	4b70      	ldr	r3, [pc, #448]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a6f      	ldr	r2, [pc, #444]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b6d      	ldr	r3, [pc, #436]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6c      	ldr	r2, [pc, #432]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0xb0>
 8004378:	4b69      	ldr	r3, [pc, #420]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a68      	ldr	r2, [pc, #416]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800437e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b66      	ldr	r3, [pc, #408]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a65      	ldr	r2, [pc, #404]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fd ffba 	bl	8002310 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fd ffb6 	bl	8002310 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e207      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b5b      	ldr	r3, [pc, #364]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0xc0>
 80043be:	e014      	b.n	80043ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fd ffa6 	bl	8002310 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fd ffa2 	bl	8002310 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1f3      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043da:	4b51      	ldr	r3, [pc, #324]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0xe8>
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d063      	beq.n	80044be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043f6:	4b4a      	ldr	r3, [pc, #296]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800440a:	2b08      	cmp	r3, #8
 800440c:	d11c      	bne.n	8004448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440e:	4b44      	ldr	r3, [pc, #272]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d116      	bne.n	8004448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	4b41      	ldr	r3, [pc, #260]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_RCC_OscConfig+0x152>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e1c7      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4937      	ldr	r1, [pc, #220]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004446:	e03a      	b.n	80044be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004450:	4b34      	ldr	r3, [pc, #208]	; (8004524 <HAL_RCC_OscConfig+0x244>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fd ff5b 	bl	8002310 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445e:	f7fd ff57 	bl	8002310 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e1a8      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4b28      	ldr	r3, [pc, #160]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4925      	ldr	r1, [pc, #148]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
 8004490:	e015      	b.n	80044be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_OscConfig+0x244>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fd ff3a 	bl	8002310 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a0:	f7fd ff36 	bl	8002310 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e187      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d036      	beq.n	8004538 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_RCC_OscConfig+0x248>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d8:	f7fd ff1a 	bl	8002310 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e0:	f7fd ff16 	bl	8002310 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e167      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 80044f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x200>
 80044fe:	e01b      	b.n	8004538 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HAL_RCC_OscConfig+0x248>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004506:	f7fd ff03 	bl	8002310 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	e00e      	b.n	800452c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450e:	f7fd feff 	bl	8002310 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d907      	bls.n	800452c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e150      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
 8004520:	40023800 	.word	0x40023800
 8004524:	42470000 	.word	0x42470000
 8004528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	4b88      	ldr	r3, [pc, #544]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800452e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ea      	bne.n	800450e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8097 	beq.w	8004674 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454a:	4b81      	ldr	r3, [pc, #516]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	4b7d      	ldr	r3, [pc, #500]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	4a7c      	ldr	r2, [pc, #496]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004564:	6413      	str	r3, [r2, #64]	; 0x40
 8004566:	4b7a      	ldr	r3, [pc, #488]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004576:	4b77      	ldr	r3, [pc, #476]	; (8004754 <HAL_RCC_OscConfig+0x474>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d118      	bne.n	80045b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004582:	4b74      	ldr	r3, [pc, #464]	; (8004754 <HAL_RCC_OscConfig+0x474>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a73      	ldr	r2, [pc, #460]	; (8004754 <HAL_RCC_OscConfig+0x474>)
 8004588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458e:	f7fd febf 	bl	8002310 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004596:	f7fd febb 	bl	8002310 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e10c      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	4b6a      	ldr	r3, [pc, #424]	; (8004754 <HAL_RCC_OscConfig+0x474>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x2ea>
 80045bc:	4b64      	ldr	r3, [pc, #400]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	4a63      	ldr	r2, [pc, #396]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6713      	str	r3, [r2, #112]	; 0x70
 80045c8:	e01c      	b.n	8004604 <HAL_RCC_OscConfig+0x324>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b05      	cmp	r3, #5
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x30c>
 80045d2:	4b5f      	ldr	r3, [pc, #380]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	4a5e      	ldr	r2, [pc, #376]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045d8:	f043 0304 	orr.w	r3, r3, #4
 80045dc:	6713      	str	r3, [r2, #112]	; 0x70
 80045de:	4b5c      	ldr	r3, [pc, #368]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a5b      	ldr	r2, [pc, #364]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0x324>
 80045ec:	4b58      	ldr	r3, [pc, #352]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	4a57      	ldr	r2, [pc, #348]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	6713      	str	r3, [r2, #112]	; 0x70
 80045f8:	4b55      	ldr	r3, [pc, #340]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	4a54      	ldr	r2, [pc, #336]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045fe:	f023 0304 	bic.w	r3, r3, #4
 8004602:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d015      	beq.n	8004638 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fd fe80 	bl	8002310 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004612:	e00a      	b.n	800462a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fd fe7c 	bl	8002310 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e0cb      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462a:	4b49      	ldr	r3, [pc, #292]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0ee      	beq.n	8004614 <HAL_RCC_OscConfig+0x334>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004638:	f7fd fe6a 	bl	8002310 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463e:	e00a      	b.n	8004656 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fd fe66 	bl	8002310 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	; 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e0b5      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004656:	4b3e      	ldr	r3, [pc, #248]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1ee      	bne.n	8004640 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d105      	bne.n	8004674 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004668:	4b39      	ldr	r3, [pc, #228]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	4a38      	ldr	r2, [pc, #224]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800466e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004672:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80a1 	beq.w	80047c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800467e:	4b34      	ldr	r3, [pc, #208]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	2b08      	cmp	r3, #8
 8004688:	d05c      	beq.n	8004744 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d141      	bne.n	8004716 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004692:	4b31      	ldr	r3, [pc, #196]	; (8004758 <HAL_RCC_OscConfig+0x478>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fd fe3a 	bl	8002310 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fd fe36 	bl	8002310 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e087      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b2:	4b27      	ldr	r3, [pc, #156]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	019b      	lsls	r3, r3, #6
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	3b01      	subs	r3, #1
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	491b      	ldr	r1, [pc, #108]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_RCC_OscConfig+0x478>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7fd fe0f 	bl	8002310 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f6:	f7fd fe0b 	bl	8002310 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e05c      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004708:	4b11      	ldr	r3, [pc, #68]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x416>
 8004714:	e054      	b.n	80047c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <HAL_RCC_OscConfig+0x478>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fd fdf8 	bl	8002310 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004724:	f7fd fdf4 	bl	8002310 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e045      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x444>
 8004742:	e03d      	b.n	80047c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e038      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
 8004750:	40023800 	.word	0x40023800
 8004754:	40007000 	.word	0x40007000
 8004758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d028      	beq.n	80047bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d121      	bne.n	80047bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d11a      	bne.n	80047bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800478c:	4013      	ands	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004794:	4293      	cmp	r3, r2
 8004796:	d111      	bne.n	80047bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	3b01      	subs	r3, #1
 80047a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800

080047d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0cc      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e4:	4b68      	ldr	r3, [pc, #416]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d90c      	bls.n	800480c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f2:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b63      	ldr	r3, [pc, #396]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0b8      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d020      	beq.n	800485a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004824:	4b59      	ldr	r3, [pc, #356]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	4a58      	ldr	r2, [pc, #352]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800482e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800483c:	4b53      	ldr	r3, [pc, #332]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4a52      	ldr	r2, [pc, #328]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004848:	4b50      	ldr	r3, [pc, #320]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	494d      	ldr	r1, [pc, #308]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d044      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486e:	4b47      	ldr	r3, [pc, #284]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d119      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e07f      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d003      	beq.n	800488e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800488a:	2b03      	cmp	r3, #3
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488e:	4b3f      	ldr	r3, [pc, #252]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e06f      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489e:	4b3b      	ldr	r3, [pc, #236]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e067      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ae:	4b37      	ldr	r3, [pc, #220]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f023 0203 	bic.w	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4934      	ldr	r1, [pc, #208]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c0:	f7fd fd26 	bl	8002310 <HAL_GetTick>
 80048c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	e00a      	b.n	80048de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c8:	f7fd fd22 	bl	8002310 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e04f      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048de:	4b2b      	ldr	r3, [pc, #172]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 020c 	and.w	r2, r3, #12
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d1eb      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048f0:	4b25      	ldr	r3, [pc, #148]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d20c      	bcs.n	8004918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b22      	ldr	r3, [pc, #136]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b20      	ldr	r3, [pc, #128]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e032      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004924:	4b19      	ldr	r3, [pc, #100]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4916      	ldr	r1, [pc, #88]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004942:	4b12      	ldr	r3, [pc, #72]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	490e      	ldr	r1, [pc, #56]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004956:	f000 f821 	bl	800499c <HAL_RCC_GetSysClockFreq>
 800495a:	4602      	mov	r2, r0
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	490a      	ldr	r1, [pc, #40]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004968:	5ccb      	ldrb	r3, [r1, r3]
 800496a:	fa22 f303 	lsr.w	r3, r2, r3
 800496e:	4a09      	ldr	r2, [pc, #36]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <HAL_RCC_ClockConfig+0x1c8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7fd fc86 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40023c00 	.word	0x40023c00
 800498c:	40023800 	.word	0x40023800
 8004990:	0800684c 	.word	0x0800684c
 8004994:	2000002c 	.word	0x2000002c
 8004998:	20000030 	.word	0x20000030

0800499c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800499c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a0:	b094      	sub	sp, #80	; 0x50
 80049a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	647b      	str	r3, [r7, #68]	; 0x44
 80049a8:	2300      	movs	r3, #0
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ac:	2300      	movs	r3, #0
 80049ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b4:	4b79      	ldr	r3, [pc, #484]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 030c 	and.w	r3, r3, #12
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d00d      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x40>
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	f200 80e1 	bhi.w	8004b88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x34>
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d003      	beq.n	80049d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ce:	e0db      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049d0:	4b73      	ldr	r3, [pc, #460]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 80049d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049d4:	e0db      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049d6:	4b73      	ldr	r3, [pc, #460]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x208>)
 80049d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049da:	e0d8      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049dc:	4b6f      	ldr	r3, [pc, #444]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049e6:	4b6d      	ldr	r3, [pc, #436]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d063      	beq.n	8004aba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f2:	4b6a      	ldr	r3, [pc, #424]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	2200      	movs	r2, #0
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80049fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a04:	633b      	str	r3, [r7, #48]	; 0x30
 8004a06:	2300      	movs	r3, #0
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a0e:	4622      	mov	r2, r4
 8004a10:	462b      	mov	r3, r5
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f04f 0100 	mov.w	r1, #0
 8004a1a:	0159      	lsls	r1, r3, #5
 8004a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a20:	0150      	lsls	r0, r2, #5
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4621      	mov	r1, r4
 8004a28:	1a51      	subs	r1, r2, r1
 8004a2a:	6139      	str	r1, [r7, #16]
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a40:	4659      	mov	r1, fp
 8004a42:	018b      	lsls	r3, r1, #6
 8004a44:	4651      	mov	r1, sl
 8004a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a4a:	4651      	mov	r1, sl
 8004a4c:	018a      	lsls	r2, r1, #6
 8004a4e:	4651      	mov	r1, sl
 8004a50:	ebb2 0801 	subs.w	r8, r2, r1
 8004a54:	4659      	mov	r1, fp
 8004a56:	eb63 0901 	sbc.w	r9, r3, r1
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a6e:	4690      	mov	r8, r2
 8004a70:	4699      	mov	r9, r3
 8004a72:	4623      	mov	r3, r4
 8004a74:	eb18 0303 	adds.w	r3, r8, r3
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	eb49 0303 	adc.w	r3, r9, r3
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a8e:	4629      	mov	r1, r5
 8004a90:	024b      	lsls	r3, r1, #9
 8004a92:	4621      	mov	r1, r4
 8004a94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a98:	4621      	mov	r1, r4
 8004a9a:	024a      	lsls	r2, r1, #9
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aac:	f7fb fef6 	bl	800089c <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab8:	e058      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aba:	4b38      	ldr	r3, [pc, #224]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aca:	623b      	str	r3, [r7, #32]
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	f04f 0000 	mov.w	r0, #0
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	0159      	lsls	r1, r3, #5
 8004ae2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae6:	0150      	lsls	r0, r2, #5
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4641      	mov	r1, r8
 8004aee:	ebb2 0a01 	subs.w	sl, r2, r1
 8004af2:	4649      	mov	r1, r9
 8004af4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b0c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b10:	eb63 050b 	sbc.w	r5, r3, fp
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	00eb      	lsls	r3, r5, #3
 8004b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b22:	00e2      	lsls	r2, r4, #3
 8004b24:	4614      	mov	r4, r2
 8004b26:	461d      	mov	r5, r3
 8004b28:	4643      	mov	r3, r8
 8004b2a:	18e3      	adds	r3, r4, r3
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	464b      	mov	r3, r9
 8004b30:	eb45 0303 	adc.w	r3, r5, r3
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b42:	4629      	mov	r1, r5
 8004b44:	028b      	lsls	r3, r1, #10
 8004b46:	4621      	mov	r1, r4
 8004b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	028a      	lsls	r2, r1, #10
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b56:	2200      	movs	r2, #0
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	61fa      	str	r2, [r7, #28]
 8004b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b60:	f7fb fe9c 	bl	800089c <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	3301      	adds	r3, #1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b86:	e002      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3750      	adds	r7, #80	; 0x50
 8004b94:	46bd      	mov	sp, r7
 8004b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	00f42400 	.word	0x00f42400
 8004ba4:	007a1200 	.word	0x007a1200

08004ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bac:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bae:	681b      	ldr	r3, [r3, #0]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	2000002c 	.word	0x2000002c

08004bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bc4:	f7ff fff0 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	0a9b      	lsrs	r3, r3, #10
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4903      	ldr	r1, [pc, #12]	; (8004be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40023800 	.word	0x40023800
 8004be4:	0800685c 	.word	0x0800685c

08004be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e041      	b.n	8004c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fd f9ce 	bl	8001fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f000 fce4 	bl	80055f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d001      	beq.n	8004ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e044      	b.n	8004d2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1e      	ldr	r2, [pc, #120]	; (8004d38 <HAL_TIM_Base_Start_IT+0xb0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d018      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cca:	d013      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1a      	ldr	r2, [pc, #104]	; (8004d3c <HAL_TIM_Base_Start_IT+0xb4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_TIM_Base_Start_IT+0xb8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x6c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <HAL_TIM_Base_Start_IT+0xc0>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d111      	bne.n	8004d18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b06      	cmp	r3, #6
 8004d04:	d010      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d16:	e007      	b.n	8004d28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40010000 	.word	0x40010000
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40000c00 	.word	0x40000c00
 8004d48:	40014000 	.word	0x40014000

08004d4c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e041      	b.n	8004de2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f839 	bl	8004dea <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	f000 fc32 	bl	80055f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <HAL_TIM_OC_Start_IT+0x28>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e022      	b.n	8004e6e <HAL_TIM_OC_Start_IT+0x6e>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d109      	bne.n	8004e42 <HAL_TIM_OC_Start_IT+0x42>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	e015      	b.n	8004e6e <HAL_TIM_OC_Start_IT+0x6e>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_OC_Start_IT+0x5c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e008      	b.n	8004e6e <HAL_TIM_OC_Start_IT+0x6e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0b3      	b.n	8004fde <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_OC_Start_IT+0x86>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e84:	e013      	b.n	8004eae <HAL_TIM_OC_Start_IT+0xae>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_OC_Start_IT+0x96>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e94:	e00b      	b.n	8004eae <HAL_TIM_OC_Start_IT+0xae>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_OC_Start_IT+0xa6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea4:	e003      	b.n	8004eae <HAL_TIM_OC_Start_IT+0xae>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b0c      	cmp	r3, #12
 8004eb2:	d841      	bhi.n	8004f38 <HAL_TIM_OC_Start_IT+0x138>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <HAL_TIM_OC_Start_IT+0xbc>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ef1 	.word	0x08004ef1
 8004ec0:	08004f39 	.word	0x08004f39
 8004ec4:	08004f39 	.word	0x08004f39
 8004ec8:	08004f39 	.word	0x08004f39
 8004ecc:	08004f03 	.word	0x08004f03
 8004ed0:	08004f39 	.word	0x08004f39
 8004ed4:	08004f39 	.word	0x08004f39
 8004ed8:	08004f39 	.word	0x08004f39
 8004edc:	08004f15 	.word	0x08004f15
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f39 	.word	0x08004f39
 8004ee8:	08004f39 	.word	0x08004f39
 8004eec:	08004f27 	.word	0x08004f27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0202 	orr.w	r2, r2, #2
 8004efe:	60da      	str	r2, [r3, #12]
      break;
 8004f00:	e01d      	b.n	8004f3e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0204 	orr.w	r2, r2, #4
 8004f10:	60da      	str	r2, [r3, #12]
      break;
 8004f12:	e014      	b.n	8004f3e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0208 	orr.w	r2, r2, #8
 8004f22:	60da      	str	r2, [r3, #12]
      break;
 8004f24:	e00b      	b.n	8004f3e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0210 	orr.w	r2, r2, #16
 8004f34:	60da      	str	r2, [r3, #12]
      break;
 8004f36:	e002      	b.n	8004f3e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d14b      	bne.n	8004fdc <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fdf7 	bl	8005b40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a24      	ldr	r2, [pc, #144]	; (8004fe8 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d107      	bne.n	8004f6c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7e:	d013      	beq.n	8004fa8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a19      	ldr	r2, [pc, #100]	; (8004fec <HAL_TIM_OC_Start_IT+0x1ec>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a18      	ldr	r2, [pc, #96]	; (8004ff0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d111      	bne.n	8004fcc <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b06      	cmp	r3, #6
 8004fb8:	d010      	beq.n	8004fdc <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0201 	orr.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fca:	e007      	b.n	8004fdc <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40014000 	.word	0x40014000

08004ffc <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b0c      	cmp	r3, #12
 800500e:	d841      	bhi.n	8005094 <HAL_TIM_OC_Stop_IT+0x98>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <HAL_TIM_OC_Stop_IT+0x1c>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800504d 	.word	0x0800504d
 800501c:	08005095 	.word	0x08005095
 8005020:	08005095 	.word	0x08005095
 8005024:	08005095 	.word	0x08005095
 8005028:	0800505f 	.word	0x0800505f
 800502c:	08005095 	.word	0x08005095
 8005030:	08005095 	.word	0x08005095
 8005034:	08005095 	.word	0x08005095
 8005038:	08005071 	.word	0x08005071
 800503c:	08005095 	.word	0x08005095
 8005040:	08005095 	.word	0x08005095
 8005044:	08005095 	.word	0x08005095
 8005048:	08005083 	.word	0x08005083
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0202 	bic.w	r2, r2, #2
 800505a:	60da      	str	r2, [r3, #12]
      break;
 800505c:	e01d      	b.n	800509a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0204 	bic.w	r2, r2, #4
 800506c:	60da      	str	r2, [r3, #12]
      break;
 800506e:	e014      	b.n	800509a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0208 	bic.w	r2, r2, #8
 800507e:	60da      	str	r2, [r3, #12]
      break;
 8005080:	e00b      	b.n	800509a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0210 	bic.w	r2, r2, #16
 8005090:	60da      	str	r2, [r3, #12]
      break;
 8005092:	e002      	b.n	800509a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      break;
 8005098:	bf00      	nop
  }

  if (status == HAL_OK)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d157      	bne.n	8005150 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2200      	movs	r2, #0
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fd49 	bl	8005b40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2a      	ldr	r2, [pc, #168]	; (800515c <HAL_TIM_OC_Stop_IT+0x160>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d117      	bne.n	80050e8 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	f241 1311 	movw	r3, #4369	; 0x1111
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10f      	bne.n	80050e8 <HAL_TIM_OC_Stop_IT+0xec>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a1a      	ldr	r2, [r3, #32]
 80050ce:	f240 4344 	movw	r3, #1092	; 0x444
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d107      	bne.n	80050e8 <HAL_TIM_OC_Stop_IT+0xec>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6a1a      	ldr	r2, [r3, #32]
 80050ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10f      	bne.n	8005118 <HAL_TIM_OC_Stop_IT+0x11c>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6a1a      	ldr	r2, [r3, #32]
 80050fe:	f240 4344 	movw	r3, #1092	; 0x444
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d107      	bne.n	8005118 <HAL_TIM_OC_Stop_IT+0x11c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <HAL_TIM_OC_Stop_IT+0x12c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005126:	e013      	b.n	8005150 <HAL_TIM_OC_Stop_IT+0x154>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d104      	bne.n	8005138 <HAL_TIM_OC_Stop_IT+0x13c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005136:	e00b      	b.n	8005150 <HAL_TIM_OC_Stop_IT+0x154>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b08      	cmp	r3, #8
 800513c:	d104      	bne.n	8005148 <HAL_TIM_OC_Stop_IT+0x14c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005146:	e003      	b.n	8005150 <HAL_TIM_OC_Stop_IT+0x154>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40010000 	.word	0x40010000

08005160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b02      	cmp	r3, #2
 8005174:	d122      	bne.n	80051bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b02      	cmp	r3, #2
 8005182:	d11b      	bne.n	80051bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0202 	mvn.w	r2, #2
 800518c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa07 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fb fdae 	bl	8000d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fa0a 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d122      	bne.n	8005210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d11b      	bne.n	8005210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0204 	mvn.w	r2, #4
 80051e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f9dd 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fb fd84 	bl	8000d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f9e0 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b08      	cmp	r3, #8
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b08      	cmp	r3, #8
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0208 	mvn.w	r2, #8
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2204      	movs	r2, #4
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9b3 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fb fd5a 	bl	8000d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9b6 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b10      	cmp	r3, #16
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b10      	cmp	r3, #16
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0210 	mvn.w	r2, #16
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2208      	movs	r2, #8
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f989 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fb fd30 	bl	8000d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f98c 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10e      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d107      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0201 	mvn.w	r2, #1
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fb fd48 	bl	8000d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ee:	2b80      	cmp	r3, #128	; 0x80
 80052f0:	d10e      	bne.n	8005310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	2b80      	cmp	r3, #128	; 0x80
 80052fe:	d107      	bne.n	8005310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fd08 	bl	8005d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d10e      	bne.n	800533c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d107      	bne.n	800533c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f951 	bl	80055de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b20      	cmp	r3, #32
 8005348:	d10e      	bne.n	8005368 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b20      	cmp	r3, #32
 8005356:	d107      	bne.n	8005368 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0220 	mvn.w	r2, #32
 8005360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fcd2 	bl	8005d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_TIM_OC_ConfigChannel+0x1e>
 800538a:	2302      	movs	r3, #2
 800538c:	e048      	b.n	8005420 <HAL_TIM_OC_ConfigChannel+0xb0>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b0c      	cmp	r3, #12
 800539a:	d839      	bhi.n	8005410 <HAL_TIM_OC_ConfigChannel+0xa0>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053d9 	.word	0x080053d9
 80053a8:	08005411 	.word	0x08005411
 80053ac:	08005411 	.word	0x08005411
 80053b0:	08005411 	.word	0x08005411
 80053b4:	080053e7 	.word	0x080053e7
 80053b8:	08005411 	.word	0x08005411
 80053bc:	08005411 	.word	0x08005411
 80053c0:	08005411 	.word	0x08005411
 80053c4:	080053f5 	.word	0x080053f5
 80053c8:	08005411 	.word	0x08005411
 80053cc:	08005411 	.word	0x08005411
 80053d0:	08005411 	.word	0x08005411
 80053d4:	08005403 	.word	0x08005403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f988 	bl	80056f4 <TIM_OC1_SetConfig>
      break;
 80053e4:	e017      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f9e7 	bl	80057c0 <TIM_OC2_SetConfig>
      break;
 80053f2:	e010      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fa4c 	bl	8005898 <TIM_OC3_SetConfig>
      break;
 8005400:	e009      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 faaf 	bl	800596c <TIM_OC4_SetConfig>
      break;
 800540e:	e002      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
      break;
 8005414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800541e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIM_ConfigClockSource+0x1c>
 8005440:	2302      	movs	r3, #2
 8005442:	e0b4      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x186>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800546a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547c:	d03e      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0xd4>
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005482:	f200 8087 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548a:	f000 8086 	beq.w	800559a <HAL_TIM_ConfigClockSource+0x172>
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005492:	d87f      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 8005494:	2b70      	cmp	r3, #112	; 0x70
 8005496:	d01a      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0xa6>
 8005498:	2b70      	cmp	r3, #112	; 0x70
 800549a:	d87b      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 800549c:	2b60      	cmp	r3, #96	; 0x60
 800549e:	d050      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x11a>
 80054a0:	2b60      	cmp	r3, #96	; 0x60
 80054a2:	d877      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b50      	cmp	r3, #80	; 0x50
 80054a6:	d03c      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0xfa>
 80054a8:	2b50      	cmp	r3, #80	; 0x50
 80054aa:	d873      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	d058      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x13a>
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d86f      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b30      	cmp	r3, #48	; 0x30
 80054b6:	d064      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054b8:	2b30      	cmp	r3, #48	; 0x30
 80054ba:	d86b      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d060      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d867      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d05c      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d05a      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054cc:	e062      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6899      	ldr	r1, [r3, #8]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f000 fb0f 	bl	8005b00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	609a      	str	r2, [r3, #8]
      break;
 80054fa:	e04f      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f000 faf8 	bl	8005b00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800551e:	609a      	str	r2, [r3, #8]
      break;
 8005520:	e03c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6859      	ldr	r1, [r3, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	461a      	mov	r2, r3
 8005530:	f000 fa6c 	bl	8005a0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2150      	movs	r1, #80	; 0x50
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fac5 	bl	8005aca <TIM_ITRx_SetConfig>
      break;
 8005540:	e02c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	461a      	mov	r2, r3
 8005550:	f000 fa8b 	bl	8005a6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2160      	movs	r1, #96	; 0x60
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fab5 	bl	8005aca <TIM_ITRx_SetConfig>
      break;
 8005560:	e01c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	461a      	mov	r2, r3
 8005570:	f000 fa4c 	bl	8005a0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2140      	movs	r1, #64	; 0x40
 800557a:	4618      	mov	r0, r3
 800557c:	f000 faa5 	bl	8005aca <TIM_ITRx_SetConfig>
      break;
 8005580:	e00c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f000 fa9c 	bl	8005aca <TIM_ITRx_SetConfig>
      break;
 8005592:	e003      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      break;
 8005598:	e000      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800559a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a34      	ldr	r2, [pc, #208]	; (80056d8 <TIM_Base_SetConfig+0xe4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00f      	beq.n	800562c <TIM_Base_SetConfig+0x38>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005612:	d00b      	beq.n	800562c <TIM_Base_SetConfig+0x38>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a31      	ldr	r2, [pc, #196]	; (80056dc <TIM_Base_SetConfig+0xe8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_Base_SetConfig+0x38>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a30      	ldr	r2, [pc, #192]	; (80056e0 <TIM_Base_SetConfig+0xec>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0x38>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a2f      	ldr	r2, [pc, #188]	; (80056e4 <TIM_Base_SetConfig+0xf0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d108      	bne.n	800563e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a25      	ldr	r2, [pc, #148]	; (80056d8 <TIM_Base_SetConfig+0xe4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d01b      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564c:	d017      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a22      	ldr	r2, [pc, #136]	; (80056dc <TIM_Base_SetConfig+0xe8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a21      	ldr	r2, [pc, #132]	; (80056e0 <TIM_Base_SetConfig+0xec>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00f      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a20      	ldr	r2, [pc, #128]	; (80056e4 <TIM_Base_SetConfig+0xf0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00b      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <TIM_Base_SetConfig+0xf4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d007      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <TIM_Base_SetConfig+0xf8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <TIM_Base_SetConfig+0x8a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <TIM_Base_SetConfig+0xfc>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d108      	bne.n	8005690 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <TIM_Base_SetConfig+0xe4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d103      	bne.n	80056c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	615a      	str	r2, [r3, #20]
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800

080056f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 0302 	bic.w	r3, r3, #2
 800573c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <TIM_OC1_SetConfig+0xc8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10c      	bne.n	800576a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f023 0308 	bic.w	r3, r3, #8
 8005756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 0304 	bic.w	r3, r3, #4
 8005768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a13      	ldr	r2, [pc, #76]	; (80057bc <TIM_OC1_SetConfig+0xc8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d111      	bne.n	8005796 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	621a      	str	r2, [r3, #32]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	40010000 	.word	0x40010000

080057c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0210 	bic.w	r2, r3, #16
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0320 	bic.w	r3, r3, #32
 800580a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <TIM_OC2_SetConfig+0xd4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10d      	bne.n	800583c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a15      	ldr	r2, [pc, #84]	; (8005894 <TIM_OC2_SetConfig+0xd4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d113      	bne.n	800586c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800584a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40010000 	.word	0x40010000

08005898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1d      	ldr	r2, [pc, #116]	; (8005968 <TIM_OC3_SetConfig+0xd0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d10d      	bne.n	8005912 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a14      	ldr	r2, [pc, #80]	; (8005968 <TIM_OC3_SetConfig+0xd0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d113      	bne.n	8005942 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	621a      	str	r2, [r3, #32]
}
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40010000 	.word	0x40010000

0800596c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	031b      	lsls	r3, r3, #12
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a10      	ldr	r2, [pc, #64]	; (8005a08 <TIM_OC4_SetConfig+0x9c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d109      	bne.n	80059e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40010000 	.word	0x40010000

08005a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f023 0201 	bic.w	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f023 030a 	bic.w	r3, r3, #10
 8005a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0210 	bic.w	r2, r3, #16
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	031b      	lsls	r3, r3, #12
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b085      	sub	sp, #20
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f043 0307 	orr.w	r3, r3, #7
 8005aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	609a      	str	r2, [r3, #8]
}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	021a      	lsls	r2, r3, #8
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	609a      	str	r2, [r3, #8]
}
 8005b34:	bf00      	nop
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	2201      	movs	r2, #1
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1a      	ldr	r2, [r3, #32]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	401a      	ands	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a1a      	ldr	r2, [r3, #32]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e050      	b.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d018      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf0:	d013      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00e      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d009      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a15      	ldr	r2, [pc, #84]	; (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d004      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a13      	ldr	r2, [pc, #76]	; (8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d10c      	bne.n	8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800
 8005c60:	40000c00 	.word	0x40000c00
 8005c64:	40014000 	.word	0x40014000

08005c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e03d      	b.n	8005d00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <__errno>:
 8005d34:	4b01      	ldr	r3, [pc, #4]	; (8005d3c <__errno+0x8>)
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000038 	.word	0x20000038

08005d40 <__libc_init_array>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	4d0d      	ldr	r5, [pc, #52]	; (8005d78 <__libc_init_array+0x38>)
 8005d44:	4c0d      	ldr	r4, [pc, #52]	; (8005d7c <__libc_init_array+0x3c>)
 8005d46:	1b64      	subs	r4, r4, r5
 8005d48:	10a4      	asrs	r4, r4, #2
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	42a6      	cmp	r6, r4
 8005d4e:	d109      	bne.n	8005d64 <__libc_init_array+0x24>
 8005d50:	4d0b      	ldr	r5, [pc, #44]	; (8005d80 <__libc_init_array+0x40>)
 8005d52:	4c0c      	ldr	r4, [pc, #48]	; (8005d84 <__libc_init_array+0x44>)
 8005d54:	f000 fc9c 	bl	8006690 <_init>
 8005d58:	1b64      	subs	r4, r4, r5
 8005d5a:	10a4      	asrs	r4, r4, #2
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	42a6      	cmp	r6, r4
 8005d60:	d105      	bne.n	8005d6e <__libc_init_array+0x2e>
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d68:	4798      	blx	r3
 8005d6a:	3601      	adds	r6, #1
 8005d6c:	e7ee      	b.n	8005d4c <__libc_init_array+0xc>
 8005d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d72:	4798      	blx	r3
 8005d74:	3601      	adds	r6, #1
 8005d76:	e7f2      	b.n	8005d5e <__libc_init_array+0x1e>
 8005d78:	080068a8 	.word	0x080068a8
 8005d7c:	080068a8 	.word	0x080068a8
 8005d80:	080068a8 	.word	0x080068a8
 8005d84:	080068ac 	.word	0x080068ac

08005d88 <memset>:
 8005d88:	4402      	add	r2, r0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d100      	bne.n	8005d92 <memset+0xa>
 8005d90:	4770      	bx	lr
 8005d92:	f803 1b01 	strb.w	r1, [r3], #1
 8005d96:	e7f9      	b.n	8005d8c <memset+0x4>

08005d98 <siprintf>:
 8005d98:	b40e      	push	{r1, r2, r3}
 8005d9a:	b500      	push	{lr}
 8005d9c:	b09c      	sub	sp, #112	; 0x70
 8005d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8005da0:	9002      	str	r0, [sp, #8]
 8005da2:	9006      	str	r0, [sp, #24]
 8005da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005da8:	4809      	ldr	r0, [pc, #36]	; (8005dd0 <siprintf+0x38>)
 8005daa:	9107      	str	r1, [sp, #28]
 8005dac:	9104      	str	r1, [sp, #16]
 8005dae:	4909      	ldr	r1, [pc, #36]	; (8005dd4 <siprintf+0x3c>)
 8005db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db4:	9105      	str	r1, [sp, #20]
 8005db6:	6800      	ldr	r0, [r0, #0]
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	a902      	add	r1, sp, #8
 8005dbc:	f000 f876 	bl	8005eac <_svfiprintf_r>
 8005dc0:	9b02      	ldr	r3, [sp, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	b01c      	add	sp, #112	; 0x70
 8005dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dcc:	b003      	add	sp, #12
 8005dce:	4770      	bx	lr
 8005dd0:	20000038 	.word	0x20000038
 8005dd4:	ffff0208 	.word	0xffff0208

08005dd8 <strcat>:
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	4602      	mov	r2, r0
 8005ddc:	7814      	ldrb	r4, [r2, #0]
 8005dde:	4613      	mov	r3, r2
 8005de0:	3201      	adds	r2, #1
 8005de2:	2c00      	cmp	r4, #0
 8005de4:	d1fa      	bne.n	8005ddc <strcat+0x4>
 8005de6:	3b01      	subs	r3, #1
 8005de8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	d1f9      	bne.n	8005de8 <strcat+0x10>
 8005df4:	bd10      	pop	{r4, pc}

08005df6 <__ssputs_r>:
 8005df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfa:	688e      	ldr	r6, [r1, #8]
 8005dfc:	429e      	cmp	r6, r3
 8005dfe:	4682      	mov	sl, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	4690      	mov	r8, r2
 8005e04:	461f      	mov	r7, r3
 8005e06:	d838      	bhi.n	8005e7a <__ssputs_r+0x84>
 8005e08:	898a      	ldrh	r2, [r1, #12]
 8005e0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e0e:	d032      	beq.n	8005e76 <__ssputs_r+0x80>
 8005e10:	6825      	ldr	r5, [r4, #0]
 8005e12:	6909      	ldr	r1, [r1, #16]
 8005e14:	eba5 0901 	sub.w	r9, r5, r1
 8005e18:	6965      	ldr	r5, [r4, #20]
 8005e1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e22:	3301      	adds	r3, #1
 8005e24:	444b      	add	r3, r9
 8005e26:	106d      	asrs	r5, r5, #1
 8005e28:	429d      	cmp	r5, r3
 8005e2a:	bf38      	it	cc
 8005e2c:	461d      	movcc	r5, r3
 8005e2e:	0553      	lsls	r3, r2, #21
 8005e30:	d531      	bpl.n	8005e96 <__ssputs_r+0xa0>
 8005e32:	4629      	mov	r1, r5
 8005e34:	f000 fb62 	bl	80064fc <_malloc_r>
 8005e38:	4606      	mov	r6, r0
 8005e3a:	b950      	cbnz	r0, 8005e52 <__ssputs_r+0x5c>
 8005e3c:	230c      	movs	r3, #12
 8005e3e:	f8ca 3000 	str.w	r3, [sl]
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e48:	81a3      	strh	r3, [r4, #12]
 8005e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e52:	6921      	ldr	r1, [r4, #16]
 8005e54:	464a      	mov	r2, r9
 8005e56:	f000 fabd 	bl	80063d4 <memcpy>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e64:	81a3      	strh	r3, [r4, #12]
 8005e66:	6126      	str	r6, [r4, #16]
 8005e68:	6165      	str	r5, [r4, #20]
 8005e6a:	444e      	add	r6, r9
 8005e6c:	eba5 0509 	sub.w	r5, r5, r9
 8005e70:	6026      	str	r6, [r4, #0]
 8005e72:	60a5      	str	r5, [r4, #8]
 8005e74:	463e      	mov	r6, r7
 8005e76:	42be      	cmp	r6, r7
 8005e78:	d900      	bls.n	8005e7c <__ssputs_r+0x86>
 8005e7a:	463e      	mov	r6, r7
 8005e7c:	6820      	ldr	r0, [r4, #0]
 8005e7e:	4632      	mov	r2, r6
 8005e80:	4641      	mov	r1, r8
 8005e82:	f000 fab5 	bl	80063f0 <memmove>
 8005e86:	68a3      	ldr	r3, [r4, #8]
 8005e88:	1b9b      	subs	r3, r3, r6
 8005e8a:	60a3      	str	r3, [r4, #8]
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	4433      	add	r3, r6
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	2000      	movs	r0, #0
 8005e94:	e7db      	b.n	8005e4e <__ssputs_r+0x58>
 8005e96:	462a      	mov	r2, r5
 8005e98:	f000 fba4 	bl	80065e4 <_realloc_r>
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d1e1      	bne.n	8005e66 <__ssputs_r+0x70>
 8005ea2:	6921      	ldr	r1, [r4, #16]
 8005ea4:	4650      	mov	r0, sl
 8005ea6:	f000 fabd 	bl	8006424 <_free_r>
 8005eaa:	e7c7      	b.n	8005e3c <__ssputs_r+0x46>

08005eac <_svfiprintf_r>:
 8005eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb0:	4698      	mov	r8, r3
 8005eb2:	898b      	ldrh	r3, [r1, #12]
 8005eb4:	061b      	lsls	r3, r3, #24
 8005eb6:	b09d      	sub	sp, #116	; 0x74
 8005eb8:	4607      	mov	r7, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	d50e      	bpl.n	8005ede <_svfiprintf_r+0x32>
 8005ec0:	690b      	ldr	r3, [r1, #16]
 8005ec2:	b963      	cbnz	r3, 8005ede <_svfiprintf_r+0x32>
 8005ec4:	2140      	movs	r1, #64	; 0x40
 8005ec6:	f000 fb19 	bl	80064fc <_malloc_r>
 8005eca:	6028      	str	r0, [r5, #0]
 8005ecc:	6128      	str	r0, [r5, #16]
 8005ece:	b920      	cbnz	r0, 8005eda <_svfiprintf_r+0x2e>
 8005ed0:	230c      	movs	r3, #12
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed8:	e0d1      	b.n	800607e <_svfiprintf_r+0x1d2>
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	616b      	str	r3, [r5, #20]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee2:	2320      	movs	r3, #32
 8005ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eec:	2330      	movs	r3, #48	; 0x30
 8005eee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006098 <_svfiprintf_r+0x1ec>
 8005ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ef6:	f04f 0901 	mov.w	r9, #1
 8005efa:	4623      	mov	r3, r4
 8005efc:	469a      	mov	sl, r3
 8005efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f02:	b10a      	cbz	r2, 8005f08 <_svfiprintf_r+0x5c>
 8005f04:	2a25      	cmp	r2, #37	; 0x25
 8005f06:	d1f9      	bne.n	8005efc <_svfiprintf_r+0x50>
 8005f08:	ebba 0b04 	subs.w	fp, sl, r4
 8005f0c:	d00b      	beq.n	8005f26 <_svfiprintf_r+0x7a>
 8005f0e:	465b      	mov	r3, fp
 8005f10:	4622      	mov	r2, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	4638      	mov	r0, r7
 8005f16:	f7ff ff6e 	bl	8005df6 <__ssputs_r>
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f000 80aa 	beq.w	8006074 <_svfiprintf_r+0x1c8>
 8005f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f22:	445a      	add	r2, fp
 8005f24:	9209      	str	r2, [sp, #36]	; 0x24
 8005f26:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80a2 	beq.w	8006074 <_svfiprintf_r+0x1c8>
 8005f30:	2300      	movs	r3, #0
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295
 8005f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f3a:	f10a 0a01 	add.w	sl, sl, #1
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	9307      	str	r3, [sp, #28]
 8005f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f46:	931a      	str	r3, [sp, #104]	; 0x68
 8005f48:	4654      	mov	r4, sl
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f50:	4851      	ldr	r0, [pc, #324]	; (8006098 <_svfiprintf_r+0x1ec>)
 8005f52:	f7fa f94d 	bl	80001f0 <memchr>
 8005f56:	9a04      	ldr	r2, [sp, #16]
 8005f58:	b9d8      	cbnz	r0, 8005f92 <_svfiprintf_r+0xe6>
 8005f5a:	06d0      	lsls	r0, r2, #27
 8005f5c:	bf44      	itt	mi
 8005f5e:	2320      	movmi	r3, #32
 8005f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f64:	0711      	lsls	r1, r2, #28
 8005f66:	bf44      	itt	mi
 8005f68:	232b      	movmi	r3, #43	; 0x2b
 8005f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f72:	2b2a      	cmp	r3, #42	; 0x2a
 8005f74:	d015      	beq.n	8005fa2 <_svfiprintf_r+0xf6>
 8005f76:	9a07      	ldr	r2, [sp, #28]
 8005f78:	4654      	mov	r4, sl
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f04f 0c0a 	mov.w	ip, #10
 8005f80:	4621      	mov	r1, r4
 8005f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f86:	3b30      	subs	r3, #48	; 0x30
 8005f88:	2b09      	cmp	r3, #9
 8005f8a:	d94e      	bls.n	800602a <_svfiprintf_r+0x17e>
 8005f8c:	b1b0      	cbz	r0, 8005fbc <_svfiprintf_r+0x110>
 8005f8e:	9207      	str	r2, [sp, #28]
 8005f90:	e014      	b.n	8005fbc <_svfiprintf_r+0x110>
 8005f92:	eba0 0308 	sub.w	r3, r0, r8
 8005f96:	fa09 f303 	lsl.w	r3, r9, r3
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	9304      	str	r3, [sp, #16]
 8005f9e:	46a2      	mov	sl, r4
 8005fa0:	e7d2      	b.n	8005f48 <_svfiprintf_r+0x9c>
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	1d19      	adds	r1, r3, #4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	9103      	str	r1, [sp, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bfbb      	ittet	lt
 8005fae:	425b      	neglt	r3, r3
 8005fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8005fb4:	9307      	strge	r3, [sp, #28]
 8005fb6:	9307      	strlt	r3, [sp, #28]
 8005fb8:	bfb8      	it	lt
 8005fba:	9204      	strlt	r2, [sp, #16]
 8005fbc:	7823      	ldrb	r3, [r4, #0]
 8005fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8005fc0:	d10c      	bne.n	8005fdc <_svfiprintf_r+0x130>
 8005fc2:	7863      	ldrb	r3, [r4, #1]
 8005fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc6:	d135      	bne.n	8006034 <_svfiprintf_r+0x188>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	9203      	str	r2, [sp, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bfb8      	it	lt
 8005fd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fd8:	3402      	adds	r4, #2
 8005fda:	9305      	str	r3, [sp, #20]
 8005fdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060a8 <_svfiprintf_r+0x1fc>
 8005fe0:	7821      	ldrb	r1, [r4, #0]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	f7fa f903 	bl	80001f0 <memchr>
 8005fea:	b140      	cbz	r0, 8005ffe <_svfiprintf_r+0x152>
 8005fec:	2340      	movs	r3, #64	; 0x40
 8005fee:	eba0 000a 	sub.w	r0, r0, sl
 8005ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ff6:	9b04      	ldr	r3, [sp, #16]
 8005ff8:	4303      	orrs	r3, r0
 8005ffa:	3401      	adds	r4, #1
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006002:	4826      	ldr	r0, [pc, #152]	; (800609c <_svfiprintf_r+0x1f0>)
 8006004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006008:	2206      	movs	r2, #6
 800600a:	f7fa f8f1 	bl	80001f0 <memchr>
 800600e:	2800      	cmp	r0, #0
 8006010:	d038      	beq.n	8006084 <_svfiprintf_r+0x1d8>
 8006012:	4b23      	ldr	r3, [pc, #140]	; (80060a0 <_svfiprintf_r+0x1f4>)
 8006014:	bb1b      	cbnz	r3, 800605e <_svfiprintf_r+0x1b2>
 8006016:	9b03      	ldr	r3, [sp, #12]
 8006018:	3307      	adds	r3, #7
 800601a:	f023 0307 	bic.w	r3, r3, #7
 800601e:	3308      	adds	r3, #8
 8006020:	9303      	str	r3, [sp, #12]
 8006022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006024:	4433      	add	r3, r6
 8006026:	9309      	str	r3, [sp, #36]	; 0x24
 8006028:	e767      	b.n	8005efa <_svfiprintf_r+0x4e>
 800602a:	fb0c 3202 	mla	r2, ip, r2, r3
 800602e:	460c      	mov	r4, r1
 8006030:	2001      	movs	r0, #1
 8006032:	e7a5      	b.n	8005f80 <_svfiprintf_r+0xd4>
 8006034:	2300      	movs	r3, #0
 8006036:	3401      	adds	r4, #1
 8006038:	9305      	str	r3, [sp, #20]
 800603a:	4619      	mov	r1, r3
 800603c:	f04f 0c0a 	mov.w	ip, #10
 8006040:	4620      	mov	r0, r4
 8006042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006046:	3a30      	subs	r2, #48	; 0x30
 8006048:	2a09      	cmp	r2, #9
 800604a:	d903      	bls.n	8006054 <_svfiprintf_r+0x1a8>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0c5      	beq.n	8005fdc <_svfiprintf_r+0x130>
 8006050:	9105      	str	r1, [sp, #20]
 8006052:	e7c3      	b.n	8005fdc <_svfiprintf_r+0x130>
 8006054:	fb0c 2101 	mla	r1, ip, r1, r2
 8006058:	4604      	mov	r4, r0
 800605a:	2301      	movs	r3, #1
 800605c:	e7f0      	b.n	8006040 <_svfiprintf_r+0x194>
 800605e:	ab03      	add	r3, sp, #12
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	462a      	mov	r2, r5
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <_svfiprintf_r+0x1f8>)
 8006066:	a904      	add	r1, sp, #16
 8006068:	4638      	mov	r0, r7
 800606a:	f3af 8000 	nop.w
 800606e:	1c42      	adds	r2, r0, #1
 8006070:	4606      	mov	r6, r0
 8006072:	d1d6      	bne.n	8006022 <_svfiprintf_r+0x176>
 8006074:	89ab      	ldrh	r3, [r5, #12]
 8006076:	065b      	lsls	r3, r3, #25
 8006078:	f53f af2c 	bmi.w	8005ed4 <_svfiprintf_r+0x28>
 800607c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800607e:	b01d      	add	sp, #116	; 0x74
 8006080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006084:	ab03      	add	r3, sp, #12
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	462a      	mov	r2, r5
 800608a:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <_svfiprintf_r+0x1f8>)
 800608c:	a904      	add	r1, sp, #16
 800608e:	4638      	mov	r0, r7
 8006090:	f000 f87a 	bl	8006188 <_printf_i>
 8006094:	e7eb      	b.n	800606e <_svfiprintf_r+0x1c2>
 8006096:	bf00      	nop
 8006098:	0800686c 	.word	0x0800686c
 800609c:	08006876 	.word	0x08006876
 80060a0:	00000000 	.word	0x00000000
 80060a4:	08005df7 	.word	0x08005df7
 80060a8:	08006872 	.word	0x08006872

080060ac <_printf_common>:
 80060ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	4616      	mov	r6, r2
 80060b2:	4699      	mov	r9, r3
 80060b4:	688a      	ldr	r2, [r1, #8]
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060bc:	4293      	cmp	r3, r2
 80060be:	bfb8      	it	lt
 80060c0:	4613      	movlt	r3, r2
 80060c2:	6033      	str	r3, [r6, #0]
 80060c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c8:	4607      	mov	r7, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	b10a      	cbz	r2, 80060d2 <_printf_common+0x26>
 80060ce:	3301      	adds	r3, #1
 80060d0:	6033      	str	r3, [r6, #0]
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	0699      	lsls	r1, r3, #26
 80060d6:	bf42      	ittt	mi
 80060d8:	6833      	ldrmi	r3, [r6, #0]
 80060da:	3302      	addmi	r3, #2
 80060dc:	6033      	strmi	r3, [r6, #0]
 80060de:	6825      	ldr	r5, [r4, #0]
 80060e0:	f015 0506 	ands.w	r5, r5, #6
 80060e4:	d106      	bne.n	80060f4 <_printf_common+0x48>
 80060e6:	f104 0a19 	add.w	sl, r4, #25
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	6832      	ldr	r2, [r6, #0]
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dc26      	bgt.n	8006142 <_printf_common+0x96>
 80060f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060f8:	1e13      	subs	r3, r2, #0
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	bf18      	it	ne
 80060fe:	2301      	movne	r3, #1
 8006100:	0692      	lsls	r2, r2, #26
 8006102:	d42b      	bmi.n	800615c <_printf_common+0xb0>
 8006104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006108:	4649      	mov	r1, r9
 800610a:	4638      	mov	r0, r7
 800610c:	47c0      	blx	r8
 800610e:	3001      	adds	r0, #1
 8006110:	d01e      	beq.n	8006150 <_printf_common+0xa4>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	68e5      	ldr	r5, [r4, #12]
 8006116:	6832      	ldr	r2, [r6, #0]
 8006118:	f003 0306 	and.w	r3, r3, #6
 800611c:	2b04      	cmp	r3, #4
 800611e:	bf08      	it	eq
 8006120:	1aad      	subeq	r5, r5, r2
 8006122:	68a3      	ldr	r3, [r4, #8]
 8006124:	6922      	ldr	r2, [r4, #16]
 8006126:	bf0c      	ite	eq
 8006128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800612c:	2500      	movne	r5, #0
 800612e:	4293      	cmp	r3, r2
 8006130:	bfc4      	itt	gt
 8006132:	1a9b      	subgt	r3, r3, r2
 8006134:	18ed      	addgt	r5, r5, r3
 8006136:	2600      	movs	r6, #0
 8006138:	341a      	adds	r4, #26
 800613a:	42b5      	cmp	r5, r6
 800613c:	d11a      	bne.n	8006174 <_printf_common+0xc8>
 800613e:	2000      	movs	r0, #0
 8006140:	e008      	b.n	8006154 <_printf_common+0xa8>
 8006142:	2301      	movs	r3, #1
 8006144:	4652      	mov	r2, sl
 8006146:	4649      	mov	r1, r9
 8006148:	4638      	mov	r0, r7
 800614a:	47c0      	blx	r8
 800614c:	3001      	adds	r0, #1
 800614e:	d103      	bne.n	8006158 <_printf_common+0xac>
 8006150:	f04f 30ff 	mov.w	r0, #4294967295
 8006154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006158:	3501      	adds	r5, #1
 800615a:	e7c6      	b.n	80060ea <_printf_common+0x3e>
 800615c:	18e1      	adds	r1, r4, r3
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	2030      	movs	r0, #48	; 0x30
 8006162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006166:	4422      	add	r2, r4
 8006168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800616c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006170:	3302      	adds	r3, #2
 8006172:	e7c7      	b.n	8006104 <_printf_common+0x58>
 8006174:	2301      	movs	r3, #1
 8006176:	4622      	mov	r2, r4
 8006178:	4649      	mov	r1, r9
 800617a:	4638      	mov	r0, r7
 800617c:	47c0      	blx	r8
 800617e:	3001      	adds	r0, #1
 8006180:	d0e6      	beq.n	8006150 <_printf_common+0xa4>
 8006182:	3601      	adds	r6, #1
 8006184:	e7d9      	b.n	800613a <_printf_common+0x8e>
	...

08006188 <_printf_i>:
 8006188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	7e0f      	ldrb	r7, [r1, #24]
 800618e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006190:	2f78      	cmp	r7, #120	; 0x78
 8006192:	4691      	mov	r9, r2
 8006194:	4680      	mov	r8, r0
 8006196:	460c      	mov	r4, r1
 8006198:	469a      	mov	sl, r3
 800619a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800619e:	d807      	bhi.n	80061b0 <_printf_i+0x28>
 80061a0:	2f62      	cmp	r7, #98	; 0x62
 80061a2:	d80a      	bhi.n	80061ba <_printf_i+0x32>
 80061a4:	2f00      	cmp	r7, #0
 80061a6:	f000 80d8 	beq.w	800635a <_printf_i+0x1d2>
 80061aa:	2f58      	cmp	r7, #88	; 0x58
 80061ac:	f000 80a3 	beq.w	80062f6 <_printf_i+0x16e>
 80061b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061b8:	e03a      	b.n	8006230 <_printf_i+0xa8>
 80061ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061be:	2b15      	cmp	r3, #21
 80061c0:	d8f6      	bhi.n	80061b0 <_printf_i+0x28>
 80061c2:	a101      	add	r1, pc, #4	; (adr r1, 80061c8 <_printf_i+0x40>)
 80061c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061c8:	08006221 	.word	0x08006221
 80061cc:	08006235 	.word	0x08006235
 80061d0:	080061b1 	.word	0x080061b1
 80061d4:	080061b1 	.word	0x080061b1
 80061d8:	080061b1 	.word	0x080061b1
 80061dc:	080061b1 	.word	0x080061b1
 80061e0:	08006235 	.word	0x08006235
 80061e4:	080061b1 	.word	0x080061b1
 80061e8:	080061b1 	.word	0x080061b1
 80061ec:	080061b1 	.word	0x080061b1
 80061f0:	080061b1 	.word	0x080061b1
 80061f4:	08006341 	.word	0x08006341
 80061f8:	08006265 	.word	0x08006265
 80061fc:	08006323 	.word	0x08006323
 8006200:	080061b1 	.word	0x080061b1
 8006204:	080061b1 	.word	0x080061b1
 8006208:	08006363 	.word	0x08006363
 800620c:	080061b1 	.word	0x080061b1
 8006210:	08006265 	.word	0x08006265
 8006214:	080061b1 	.word	0x080061b1
 8006218:	080061b1 	.word	0x080061b1
 800621c:	0800632b 	.word	0x0800632b
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	1d1a      	adds	r2, r3, #4
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	602a      	str	r2, [r5, #0]
 8006228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800622c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006230:	2301      	movs	r3, #1
 8006232:	e0a3      	b.n	800637c <_printf_i+0x1f4>
 8006234:	6820      	ldr	r0, [r4, #0]
 8006236:	6829      	ldr	r1, [r5, #0]
 8006238:	0606      	lsls	r6, r0, #24
 800623a:	f101 0304 	add.w	r3, r1, #4
 800623e:	d50a      	bpl.n	8006256 <_printf_i+0xce>
 8006240:	680e      	ldr	r6, [r1, #0]
 8006242:	602b      	str	r3, [r5, #0]
 8006244:	2e00      	cmp	r6, #0
 8006246:	da03      	bge.n	8006250 <_printf_i+0xc8>
 8006248:	232d      	movs	r3, #45	; 0x2d
 800624a:	4276      	negs	r6, r6
 800624c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006250:	485e      	ldr	r0, [pc, #376]	; (80063cc <_printf_i+0x244>)
 8006252:	230a      	movs	r3, #10
 8006254:	e019      	b.n	800628a <_printf_i+0x102>
 8006256:	680e      	ldr	r6, [r1, #0]
 8006258:	602b      	str	r3, [r5, #0]
 800625a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800625e:	bf18      	it	ne
 8006260:	b236      	sxthne	r6, r6
 8006262:	e7ef      	b.n	8006244 <_printf_i+0xbc>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	6820      	ldr	r0, [r4, #0]
 8006268:	1d19      	adds	r1, r3, #4
 800626a:	6029      	str	r1, [r5, #0]
 800626c:	0601      	lsls	r1, r0, #24
 800626e:	d501      	bpl.n	8006274 <_printf_i+0xec>
 8006270:	681e      	ldr	r6, [r3, #0]
 8006272:	e002      	b.n	800627a <_printf_i+0xf2>
 8006274:	0646      	lsls	r6, r0, #25
 8006276:	d5fb      	bpl.n	8006270 <_printf_i+0xe8>
 8006278:	881e      	ldrh	r6, [r3, #0]
 800627a:	4854      	ldr	r0, [pc, #336]	; (80063cc <_printf_i+0x244>)
 800627c:	2f6f      	cmp	r7, #111	; 0x6f
 800627e:	bf0c      	ite	eq
 8006280:	2308      	moveq	r3, #8
 8006282:	230a      	movne	r3, #10
 8006284:	2100      	movs	r1, #0
 8006286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800628a:	6865      	ldr	r5, [r4, #4]
 800628c:	60a5      	str	r5, [r4, #8]
 800628e:	2d00      	cmp	r5, #0
 8006290:	bfa2      	ittt	ge
 8006292:	6821      	ldrge	r1, [r4, #0]
 8006294:	f021 0104 	bicge.w	r1, r1, #4
 8006298:	6021      	strge	r1, [r4, #0]
 800629a:	b90e      	cbnz	r6, 80062a0 <_printf_i+0x118>
 800629c:	2d00      	cmp	r5, #0
 800629e:	d04d      	beq.n	800633c <_printf_i+0x1b4>
 80062a0:	4615      	mov	r5, r2
 80062a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80062a6:	fb03 6711 	mls	r7, r3, r1, r6
 80062aa:	5dc7      	ldrb	r7, [r0, r7]
 80062ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062b0:	4637      	mov	r7, r6
 80062b2:	42bb      	cmp	r3, r7
 80062b4:	460e      	mov	r6, r1
 80062b6:	d9f4      	bls.n	80062a2 <_printf_i+0x11a>
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d10b      	bne.n	80062d4 <_printf_i+0x14c>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	07de      	lsls	r6, r3, #31
 80062c0:	d508      	bpl.n	80062d4 <_printf_i+0x14c>
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	6861      	ldr	r1, [r4, #4]
 80062c6:	4299      	cmp	r1, r3
 80062c8:	bfde      	ittt	le
 80062ca:	2330      	movle	r3, #48	; 0x30
 80062cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062d4:	1b52      	subs	r2, r2, r5
 80062d6:	6122      	str	r2, [r4, #16]
 80062d8:	f8cd a000 	str.w	sl, [sp]
 80062dc:	464b      	mov	r3, r9
 80062de:	aa03      	add	r2, sp, #12
 80062e0:	4621      	mov	r1, r4
 80062e2:	4640      	mov	r0, r8
 80062e4:	f7ff fee2 	bl	80060ac <_printf_common>
 80062e8:	3001      	adds	r0, #1
 80062ea:	d14c      	bne.n	8006386 <_printf_i+0x1fe>
 80062ec:	f04f 30ff 	mov.w	r0, #4294967295
 80062f0:	b004      	add	sp, #16
 80062f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f6:	4835      	ldr	r0, [pc, #212]	; (80063cc <_printf_i+0x244>)
 80062f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062fc:	6829      	ldr	r1, [r5, #0]
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	f851 6b04 	ldr.w	r6, [r1], #4
 8006304:	6029      	str	r1, [r5, #0]
 8006306:	061d      	lsls	r5, r3, #24
 8006308:	d514      	bpl.n	8006334 <_printf_i+0x1ac>
 800630a:	07df      	lsls	r7, r3, #31
 800630c:	bf44      	itt	mi
 800630e:	f043 0320 	orrmi.w	r3, r3, #32
 8006312:	6023      	strmi	r3, [r4, #0]
 8006314:	b91e      	cbnz	r6, 800631e <_printf_i+0x196>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	f023 0320 	bic.w	r3, r3, #32
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	2310      	movs	r3, #16
 8006320:	e7b0      	b.n	8006284 <_printf_i+0xfc>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	f043 0320 	orr.w	r3, r3, #32
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	2378      	movs	r3, #120	; 0x78
 800632c:	4828      	ldr	r0, [pc, #160]	; (80063d0 <_printf_i+0x248>)
 800632e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006332:	e7e3      	b.n	80062fc <_printf_i+0x174>
 8006334:	0659      	lsls	r1, r3, #25
 8006336:	bf48      	it	mi
 8006338:	b2b6      	uxthmi	r6, r6
 800633a:	e7e6      	b.n	800630a <_printf_i+0x182>
 800633c:	4615      	mov	r5, r2
 800633e:	e7bb      	b.n	80062b8 <_printf_i+0x130>
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	6826      	ldr	r6, [r4, #0]
 8006344:	6961      	ldr	r1, [r4, #20]
 8006346:	1d18      	adds	r0, r3, #4
 8006348:	6028      	str	r0, [r5, #0]
 800634a:	0635      	lsls	r5, r6, #24
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	d501      	bpl.n	8006354 <_printf_i+0x1cc>
 8006350:	6019      	str	r1, [r3, #0]
 8006352:	e002      	b.n	800635a <_printf_i+0x1d2>
 8006354:	0670      	lsls	r0, r6, #25
 8006356:	d5fb      	bpl.n	8006350 <_printf_i+0x1c8>
 8006358:	8019      	strh	r1, [r3, #0]
 800635a:	2300      	movs	r3, #0
 800635c:	6123      	str	r3, [r4, #16]
 800635e:	4615      	mov	r5, r2
 8006360:	e7ba      	b.n	80062d8 <_printf_i+0x150>
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	1d1a      	adds	r2, r3, #4
 8006366:	602a      	str	r2, [r5, #0]
 8006368:	681d      	ldr	r5, [r3, #0]
 800636a:	6862      	ldr	r2, [r4, #4]
 800636c:	2100      	movs	r1, #0
 800636e:	4628      	mov	r0, r5
 8006370:	f7f9 ff3e 	bl	80001f0 <memchr>
 8006374:	b108      	cbz	r0, 800637a <_printf_i+0x1f2>
 8006376:	1b40      	subs	r0, r0, r5
 8006378:	6060      	str	r0, [r4, #4]
 800637a:	6863      	ldr	r3, [r4, #4]
 800637c:	6123      	str	r3, [r4, #16]
 800637e:	2300      	movs	r3, #0
 8006380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006384:	e7a8      	b.n	80062d8 <_printf_i+0x150>
 8006386:	6923      	ldr	r3, [r4, #16]
 8006388:	462a      	mov	r2, r5
 800638a:	4649      	mov	r1, r9
 800638c:	4640      	mov	r0, r8
 800638e:	47d0      	blx	sl
 8006390:	3001      	adds	r0, #1
 8006392:	d0ab      	beq.n	80062ec <_printf_i+0x164>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	079b      	lsls	r3, r3, #30
 8006398:	d413      	bmi.n	80063c2 <_printf_i+0x23a>
 800639a:	68e0      	ldr	r0, [r4, #12]
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	4298      	cmp	r0, r3
 80063a0:	bfb8      	it	lt
 80063a2:	4618      	movlt	r0, r3
 80063a4:	e7a4      	b.n	80062f0 <_printf_i+0x168>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4632      	mov	r2, r6
 80063aa:	4649      	mov	r1, r9
 80063ac:	4640      	mov	r0, r8
 80063ae:	47d0      	blx	sl
 80063b0:	3001      	adds	r0, #1
 80063b2:	d09b      	beq.n	80062ec <_printf_i+0x164>
 80063b4:	3501      	adds	r5, #1
 80063b6:	68e3      	ldr	r3, [r4, #12]
 80063b8:	9903      	ldr	r1, [sp, #12]
 80063ba:	1a5b      	subs	r3, r3, r1
 80063bc:	42ab      	cmp	r3, r5
 80063be:	dcf2      	bgt.n	80063a6 <_printf_i+0x21e>
 80063c0:	e7eb      	b.n	800639a <_printf_i+0x212>
 80063c2:	2500      	movs	r5, #0
 80063c4:	f104 0619 	add.w	r6, r4, #25
 80063c8:	e7f5      	b.n	80063b6 <_printf_i+0x22e>
 80063ca:	bf00      	nop
 80063cc:	0800687d 	.word	0x0800687d
 80063d0:	0800688e 	.word	0x0800688e

080063d4 <memcpy>:
 80063d4:	440a      	add	r2, r1
 80063d6:	4291      	cmp	r1, r2
 80063d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063dc:	d100      	bne.n	80063e0 <memcpy+0xc>
 80063de:	4770      	bx	lr
 80063e0:	b510      	push	{r4, lr}
 80063e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ea:	4291      	cmp	r1, r2
 80063ec:	d1f9      	bne.n	80063e2 <memcpy+0xe>
 80063ee:	bd10      	pop	{r4, pc}

080063f0 <memmove>:
 80063f0:	4288      	cmp	r0, r1
 80063f2:	b510      	push	{r4, lr}
 80063f4:	eb01 0402 	add.w	r4, r1, r2
 80063f8:	d902      	bls.n	8006400 <memmove+0x10>
 80063fa:	4284      	cmp	r4, r0
 80063fc:	4623      	mov	r3, r4
 80063fe:	d807      	bhi.n	8006410 <memmove+0x20>
 8006400:	1e43      	subs	r3, r0, #1
 8006402:	42a1      	cmp	r1, r4
 8006404:	d008      	beq.n	8006418 <memmove+0x28>
 8006406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800640a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800640e:	e7f8      	b.n	8006402 <memmove+0x12>
 8006410:	4402      	add	r2, r0
 8006412:	4601      	mov	r1, r0
 8006414:	428a      	cmp	r2, r1
 8006416:	d100      	bne.n	800641a <memmove+0x2a>
 8006418:	bd10      	pop	{r4, pc}
 800641a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800641e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006422:	e7f7      	b.n	8006414 <memmove+0x24>

08006424 <_free_r>:
 8006424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006426:	2900      	cmp	r1, #0
 8006428:	d044      	beq.n	80064b4 <_free_r+0x90>
 800642a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800642e:	9001      	str	r0, [sp, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	f1a1 0404 	sub.w	r4, r1, #4
 8006436:	bfb8      	it	lt
 8006438:	18e4      	addlt	r4, r4, r3
 800643a:	f000 f913 	bl	8006664 <__malloc_lock>
 800643e:	4a1e      	ldr	r2, [pc, #120]	; (80064b8 <_free_r+0x94>)
 8006440:	9801      	ldr	r0, [sp, #4]
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	b933      	cbnz	r3, 8006454 <_free_r+0x30>
 8006446:	6063      	str	r3, [r4, #4]
 8006448:	6014      	str	r4, [r2, #0]
 800644a:	b003      	add	sp, #12
 800644c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006450:	f000 b90e 	b.w	8006670 <__malloc_unlock>
 8006454:	42a3      	cmp	r3, r4
 8006456:	d908      	bls.n	800646a <_free_r+0x46>
 8006458:	6825      	ldr	r5, [r4, #0]
 800645a:	1961      	adds	r1, r4, r5
 800645c:	428b      	cmp	r3, r1
 800645e:	bf01      	itttt	eq
 8006460:	6819      	ldreq	r1, [r3, #0]
 8006462:	685b      	ldreq	r3, [r3, #4]
 8006464:	1949      	addeq	r1, r1, r5
 8006466:	6021      	streq	r1, [r4, #0]
 8006468:	e7ed      	b.n	8006446 <_free_r+0x22>
 800646a:	461a      	mov	r2, r3
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	b10b      	cbz	r3, 8006474 <_free_r+0x50>
 8006470:	42a3      	cmp	r3, r4
 8006472:	d9fa      	bls.n	800646a <_free_r+0x46>
 8006474:	6811      	ldr	r1, [r2, #0]
 8006476:	1855      	adds	r5, r2, r1
 8006478:	42a5      	cmp	r5, r4
 800647a:	d10b      	bne.n	8006494 <_free_r+0x70>
 800647c:	6824      	ldr	r4, [r4, #0]
 800647e:	4421      	add	r1, r4
 8006480:	1854      	adds	r4, r2, r1
 8006482:	42a3      	cmp	r3, r4
 8006484:	6011      	str	r1, [r2, #0]
 8006486:	d1e0      	bne.n	800644a <_free_r+0x26>
 8006488:	681c      	ldr	r4, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	6053      	str	r3, [r2, #4]
 800648e:	4421      	add	r1, r4
 8006490:	6011      	str	r1, [r2, #0]
 8006492:	e7da      	b.n	800644a <_free_r+0x26>
 8006494:	d902      	bls.n	800649c <_free_r+0x78>
 8006496:	230c      	movs	r3, #12
 8006498:	6003      	str	r3, [r0, #0]
 800649a:	e7d6      	b.n	800644a <_free_r+0x26>
 800649c:	6825      	ldr	r5, [r4, #0]
 800649e:	1961      	adds	r1, r4, r5
 80064a0:	428b      	cmp	r3, r1
 80064a2:	bf04      	itt	eq
 80064a4:	6819      	ldreq	r1, [r3, #0]
 80064a6:	685b      	ldreq	r3, [r3, #4]
 80064a8:	6063      	str	r3, [r4, #4]
 80064aa:	bf04      	itt	eq
 80064ac:	1949      	addeq	r1, r1, r5
 80064ae:	6021      	streq	r1, [r4, #0]
 80064b0:	6054      	str	r4, [r2, #4]
 80064b2:	e7ca      	b.n	800644a <_free_r+0x26>
 80064b4:	b003      	add	sp, #12
 80064b6:	bd30      	pop	{r4, r5, pc}
 80064b8:	200002d0 	.word	0x200002d0

080064bc <sbrk_aligned>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	4e0e      	ldr	r6, [pc, #56]	; (80064f8 <sbrk_aligned+0x3c>)
 80064c0:	460c      	mov	r4, r1
 80064c2:	6831      	ldr	r1, [r6, #0]
 80064c4:	4605      	mov	r5, r0
 80064c6:	b911      	cbnz	r1, 80064ce <sbrk_aligned+0x12>
 80064c8:	f000 f8bc 	bl	8006644 <_sbrk_r>
 80064cc:	6030      	str	r0, [r6, #0]
 80064ce:	4621      	mov	r1, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 f8b7 	bl	8006644 <_sbrk_r>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	d00a      	beq.n	80064f0 <sbrk_aligned+0x34>
 80064da:	1cc4      	adds	r4, r0, #3
 80064dc:	f024 0403 	bic.w	r4, r4, #3
 80064e0:	42a0      	cmp	r0, r4
 80064e2:	d007      	beq.n	80064f4 <sbrk_aligned+0x38>
 80064e4:	1a21      	subs	r1, r4, r0
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 f8ac 	bl	8006644 <_sbrk_r>
 80064ec:	3001      	adds	r0, #1
 80064ee:	d101      	bne.n	80064f4 <sbrk_aligned+0x38>
 80064f0:	f04f 34ff 	mov.w	r4, #4294967295
 80064f4:	4620      	mov	r0, r4
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	200002d4 	.word	0x200002d4

080064fc <_malloc_r>:
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	1ccd      	adds	r5, r1, #3
 8006502:	f025 0503 	bic.w	r5, r5, #3
 8006506:	3508      	adds	r5, #8
 8006508:	2d0c      	cmp	r5, #12
 800650a:	bf38      	it	cc
 800650c:	250c      	movcc	r5, #12
 800650e:	2d00      	cmp	r5, #0
 8006510:	4607      	mov	r7, r0
 8006512:	db01      	blt.n	8006518 <_malloc_r+0x1c>
 8006514:	42a9      	cmp	r1, r5
 8006516:	d905      	bls.n	8006524 <_malloc_r+0x28>
 8006518:	230c      	movs	r3, #12
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	2600      	movs	r6, #0
 800651e:	4630      	mov	r0, r6
 8006520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006524:	4e2e      	ldr	r6, [pc, #184]	; (80065e0 <_malloc_r+0xe4>)
 8006526:	f000 f89d 	bl	8006664 <__malloc_lock>
 800652a:	6833      	ldr	r3, [r6, #0]
 800652c:	461c      	mov	r4, r3
 800652e:	bb34      	cbnz	r4, 800657e <_malloc_r+0x82>
 8006530:	4629      	mov	r1, r5
 8006532:	4638      	mov	r0, r7
 8006534:	f7ff ffc2 	bl	80064bc <sbrk_aligned>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	4604      	mov	r4, r0
 800653c:	d14d      	bne.n	80065da <_malloc_r+0xde>
 800653e:	6834      	ldr	r4, [r6, #0]
 8006540:	4626      	mov	r6, r4
 8006542:	2e00      	cmp	r6, #0
 8006544:	d140      	bne.n	80065c8 <_malloc_r+0xcc>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	4631      	mov	r1, r6
 800654a:	4638      	mov	r0, r7
 800654c:	eb04 0803 	add.w	r8, r4, r3
 8006550:	f000 f878 	bl	8006644 <_sbrk_r>
 8006554:	4580      	cmp	r8, r0
 8006556:	d13a      	bne.n	80065ce <_malloc_r+0xd2>
 8006558:	6821      	ldr	r1, [r4, #0]
 800655a:	3503      	adds	r5, #3
 800655c:	1a6d      	subs	r5, r5, r1
 800655e:	f025 0503 	bic.w	r5, r5, #3
 8006562:	3508      	adds	r5, #8
 8006564:	2d0c      	cmp	r5, #12
 8006566:	bf38      	it	cc
 8006568:	250c      	movcc	r5, #12
 800656a:	4629      	mov	r1, r5
 800656c:	4638      	mov	r0, r7
 800656e:	f7ff ffa5 	bl	80064bc <sbrk_aligned>
 8006572:	3001      	adds	r0, #1
 8006574:	d02b      	beq.n	80065ce <_malloc_r+0xd2>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	442b      	add	r3, r5
 800657a:	6023      	str	r3, [r4, #0]
 800657c:	e00e      	b.n	800659c <_malloc_r+0xa0>
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	1b52      	subs	r2, r2, r5
 8006582:	d41e      	bmi.n	80065c2 <_malloc_r+0xc6>
 8006584:	2a0b      	cmp	r2, #11
 8006586:	d916      	bls.n	80065b6 <_malloc_r+0xba>
 8006588:	1961      	adds	r1, r4, r5
 800658a:	42a3      	cmp	r3, r4
 800658c:	6025      	str	r5, [r4, #0]
 800658e:	bf18      	it	ne
 8006590:	6059      	strne	r1, [r3, #4]
 8006592:	6863      	ldr	r3, [r4, #4]
 8006594:	bf08      	it	eq
 8006596:	6031      	streq	r1, [r6, #0]
 8006598:	5162      	str	r2, [r4, r5]
 800659a:	604b      	str	r3, [r1, #4]
 800659c:	4638      	mov	r0, r7
 800659e:	f104 060b 	add.w	r6, r4, #11
 80065a2:	f000 f865 	bl	8006670 <__malloc_unlock>
 80065a6:	f026 0607 	bic.w	r6, r6, #7
 80065aa:	1d23      	adds	r3, r4, #4
 80065ac:	1af2      	subs	r2, r6, r3
 80065ae:	d0b6      	beq.n	800651e <_malloc_r+0x22>
 80065b0:	1b9b      	subs	r3, r3, r6
 80065b2:	50a3      	str	r3, [r4, r2]
 80065b4:	e7b3      	b.n	800651e <_malloc_r+0x22>
 80065b6:	6862      	ldr	r2, [r4, #4]
 80065b8:	42a3      	cmp	r3, r4
 80065ba:	bf0c      	ite	eq
 80065bc:	6032      	streq	r2, [r6, #0]
 80065be:	605a      	strne	r2, [r3, #4]
 80065c0:	e7ec      	b.n	800659c <_malloc_r+0xa0>
 80065c2:	4623      	mov	r3, r4
 80065c4:	6864      	ldr	r4, [r4, #4]
 80065c6:	e7b2      	b.n	800652e <_malloc_r+0x32>
 80065c8:	4634      	mov	r4, r6
 80065ca:	6876      	ldr	r6, [r6, #4]
 80065cc:	e7b9      	b.n	8006542 <_malloc_r+0x46>
 80065ce:	230c      	movs	r3, #12
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	4638      	mov	r0, r7
 80065d4:	f000 f84c 	bl	8006670 <__malloc_unlock>
 80065d8:	e7a1      	b.n	800651e <_malloc_r+0x22>
 80065da:	6025      	str	r5, [r4, #0]
 80065dc:	e7de      	b.n	800659c <_malloc_r+0xa0>
 80065de:	bf00      	nop
 80065e0:	200002d0 	.word	0x200002d0

080065e4 <_realloc_r>:
 80065e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e8:	4680      	mov	r8, r0
 80065ea:	4614      	mov	r4, r2
 80065ec:	460e      	mov	r6, r1
 80065ee:	b921      	cbnz	r1, 80065fa <_realloc_r+0x16>
 80065f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065f4:	4611      	mov	r1, r2
 80065f6:	f7ff bf81 	b.w	80064fc <_malloc_r>
 80065fa:	b92a      	cbnz	r2, 8006608 <_realloc_r+0x24>
 80065fc:	f7ff ff12 	bl	8006424 <_free_r>
 8006600:	4625      	mov	r5, r4
 8006602:	4628      	mov	r0, r5
 8006604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006608:	f000 f838 	bl	800667c <_malloc_usable_size_r>
 800660c:	4284      	cmp	r4, r0
 800660e:	4607      	mov	r7, r0
 8006610:	d802      	bhi.n	8006618 <_realloc_r+0x34>
 8006612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006616:	d812      	bhi.n	800663e <_realloc_r+0x5a>
 8006618:	4621      	mov	r1, r4
 800661a:	4640      	mov	r0, r8
 800661c:	f7ff ff6e 	bl	80064fc <_malloc_r>
 8006620:	4605      	mov	r5, r0
 8006622:	2800      	cmp	r0, #0
 8006624:	d0ed      	beq.n	8006602 <_realloc_r+0x1e>
 8006626:	42bc      	cmp	r4, r7
 8006628:	4622      	mov	r2, r4
 800662a:	4631      	mov	r1, r6
 800662c:	bf28      	it	cs
 800662e:	463a      	movcs	r2, r7
 8006630:	f7ff fed0 	bl	80063d4 <memcpy>
 8006634:	4631      	mov	r1, r6
 8006636:	4640      	mov	r0, r8
 8006638:	f7ff fef4 	bl	8006424 <_free_r>
 800663c:	e7e1      	b.n	8006602 <_realloc_r+0x1e>
 800663e:	4635      	mov	r5, r6
 8006640:	e7df      	b.n	8006602 <_realloc_r+0x1e>
	...

08006644 <_sbrk_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4d06      	ldr	r5, [pc, #24]	; (8006660 <_sbrk_r+0x1c>)
 8006648:	2300      	movs	r3, #0
 800664a:	4604      	mov	r4, r0
 800664c:	4608      	mov	r0, r1
 800664e:	602b      	str	r3, [r5, #0]
 8006650:	f7fb fd86 	bl	8002160 <_sbrk>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d102      	bne.n	800665e <_sbrk_r+0x1a>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	b103      	cbz	r3, 800665e <_sbrk_r+0x1a>
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	bd38      	pop	{r3, r4, r5, pc}
 8006660:	200002d8 	.word	0x200002d8

08006664 <__malloc_lock>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__malloc_lock+0x8>)
 8006666:	f000 b811 	b.w	800668c <__retarget_lock_acquire_recursive>
 800666a:	bf00      	nop
 800666c:	200002dc 	.word	0x200002dc

08006670 <__malloc_unlock>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__malloc_unlock+0x8>)
 8006672:	f000 b80c 	b.w	800668e <__retarget_lock_release_recursive>
 8006676:	bf00      	nop
 8006678:	200002dc 	.word	0x200002dc

0800667c <_malloc_usable_size_r>:
 800667c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006680:	1f18      	subs	r0, r3, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	bfbc      	itt	lt
 8006686:	580b      	ldrlt	r3, [r1, r0]
 8006688:	18c0      	addlt	r0, r0, r3
 800668a:	4770      	bx	lr

0800668c <__retarget_lock_acquire_recursive>:
 800668c:	4770      	bx	lr

0800668e <__retarget_lock_release_recursive>:
 800668e:	4770      	bx	lr

08006690 <_init>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr

0800669c <_fini>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr
