
Sistema de riego.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa4  08005aa4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aac  08005aac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ab0  08005ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08005b24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005b24  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3b5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d3  00000000  00000000  0002f455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00031528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00032408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d9b  00000000  00000000  00033208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ce  00000000  00000000  0004afa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a4ea  00000000  00000000  0005c371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f685b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000437c  00000000  00000000  000f68ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005968 	.word	0x08005968

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005968 	.word	0x08005968

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_ADC_ConvCpltCallback>:
uint32_t media = 0;
char texto_pantalla [LINES*ROWS];
int contador_linea=0;


void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

	if (hadc->Instance == ADC1){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <HAL_ADC_ConvCpltCallback+0x30>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d107      	bne.n	80005b6 <HAL_ADC_ConvCpltCallback+0x22>
		ADC_value[0]=ADC_buffer[0]; // Nivel
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x34>)
 80005a8:	881a      	ldrh	r2, [r3, #0]
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_ADC_ConvCpltCallback+0x38>)
 80005ac:	801a      	strh	r2, [r3, #0]
		ADC_value[1]=ADC_buffer[1]; // Tierra
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x34>)
 80005b0:	885a      	ldrh	r2, [r3, #2]
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_ADC_ConvCpltCallback+0x38>)
 80005b4:	805a      	strh	r2, [r3, #2]
	}

}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40012000 	.word	0x40012000
 80005c8:	2000021c 	.word	0x2000021c
 80005cc:	20000218 	.word	0x20000218

080005d0 <detec_lvl>:
int detec_lvl(uint16_t valor)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	if ( valor >=4000)
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80005e0:	d301      	bcc.n	80005e6 <detec_lvl+0x16>
		return 3;//50<x<100%
 80005e2:	2303      	movs	r3, #3
 80005e4:	e015      	b.n	8000612 <detec_lvl+0x42>
	else if (valor<4000 && valor>=3500)
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80005ec:	d206      	bcs.n	80005fc <detec_lvl+0x2c>
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	f640 52ab 	movw	r2, #3499	; 0xdab
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d901      	bls.n	80005fc <detec_lvl+0x2c>
		return 2;//<=25<x<50%
 80005f8:	2302      	movs	r3, #2
 80005fa:	e00a      	b.n	8000612 <detec_lvl+0x42>
	else if(valor<3500 && valor>180)
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000602:	4293      	cmp	r3, r2
 8000604:	d804      	bhi.n	8000610 <detec_lvl+0x40>
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	2bb4      	cmp	r3, #180	; 0xb4
 800060a:	d901      	bls.n	8000610 <detec_lvl+0x40>
		return 1;//<=25%
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <detec_lvl+0x42>
	else//0%
		return 0;
 8000610:	2300      	movs	r3, #0

}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==GPIO_PIN_0){
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d10e      	bne.n	800064e <HAL_GPIO_EXTI_Callback+0x2e>
    	if (flag_riego == 0){
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_GPIO_EXTI_Callback+0x38>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d103      	bne.n	8000640 <HAL_GPIO_EXTI_Callback+0x20>
    		flag_boton = 1;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_GPIO_EXTI_Callback+0x3c>)
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
    		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);

    	}

    }
}
 800063e:	e006      	b.n	800064e <HAL_GPIO_EXTI_Callback+0x2e>
    		flag_riego = 0;
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_GPIO_EXTI_Callback+0x38>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
    		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8000646:	2104      	movs	r1, #4
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <HAL_GPIO_EXTI_Callback+0x40>)
 800064a:	f003 fd93 	bl	8004174 <HAL_TIM_OC_Stop>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000220 	.word	0x20000220
 800065c:	20000224 	.word	0x20000224
 8000660:	20000188 	.word	0x20000188

08000664 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback (TIM_HandleTypeDef* htim){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d110      	bne.n	8000698 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		flag_riego = 0;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 800067c:	2104      	movs	r1, #4
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8000680:	f003 fd78 	bl	8004174 <HAL_TIM_OC_Stop>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800068a:	4808      	ldr	r0, [pc, #32]	; (80006ac <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 800068c:	f002 fb4a 	bl	8002d24 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2200      	movs	r2, #0
 8000696:	625a      	str	r2, [r3, #36]	; 0x24
	}

}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40010000 	.word	0x40010000
 80006a4:	20000220 	.word	0x20000220
 80006a8:	20000188 	.word	0x20000188
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006c0:	d107      	bne.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80006c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006c8:	f002 fb45 	bl	8002d56 <HAL_GPIO_TogglePin>
		lcd_update(texto_pantalla);
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80006ce:	f000 fc92 	bl	8000ff6 <lcd_update>
	}
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40020c00 	.word	0x40020c00
 80006e0:	2000022c 	.word	0x2000022c

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f000 ff31 	bl	8001550 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f969 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 fb6b 	bl	8000dcc <MX_GPIO_Init>
  MX_DMA_Init();
 80006f6:	f000 fb49 	bl	8000d8c <MX_DMA_Init>
  MX_ADC1_Init();
 80006fa:	f000 f9cb 	bl	8000a94 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006fe:	f000 fa57 	bl	8000bb0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000702:	f000 fa27 	bl	8000b54 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000706:	f000 faf3 	bl	8000cf0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800070a:	f000 fc37 	bl	8000f7c <lcd_init>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000714:	4892      	ldr	r0, [pc, #584]	; (8000960 <main+0x27c>)
 8000716:	f002 fb05 	bl	8002d24 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, 2);
 800071a:	2202      	movs	r2, #2
 800071c:	4991      	ldr	r1, [pc, #580]	; (8000964 <main+0x280>)
 800071e:	4892      	ldr	r0, [pc, #584]	; (8000968 <main+0x284>)
 8000720:	f001 f900 	bl	8001924 <HAL_ADC_Start_DMA>
  strcpy(texto_pantalla, "Bienvenido al   sistema de riego");
 8000724:	4a91      	ldr	r2, [pc, #580]	; (800096c <main+0x288>)
 8000726:	4b92      	ldr	r3, [pc, #584]	; (8000970 <main+0x28c>)
 8000728:	4614      	mov	r4, r2
 800072a:	461d      	mov	r5, r3
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	682b      	ldr	r3, [r5, #0]
 8000736:	7023      	strb	r3, [r4, #0]
  lcd_update(texto_pantalla);
 8000738:	488c      	ldr	r0, [pc, #560]	; (800096c <main+0x288>)
 800073a:	f000 fc5c 	bl	8000ff6 <lcd_update>
  HAL_Delay(1000); //Para que el mensaje se mantenga en la patanlla 1 segundo
 800073e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000742:	f000 ff77 	bl	8001634 <HAL_Delay>
  lcd_clear();
 8000746:	f000 fc86 	bl	8001056 <lcd_clear>
  HAL_TIM_Base_Start_IT(&htim2);
 800074a:	488a      	ldr	r0, [pc, #552]	; (8000974 <main+0x290>)
 800074c:	f003 fc56 	bl	8003ffc <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //info();
	  strdel(texto_pantalla);
 8000750:	4886      	ldr	r0, [pc, #536]	; (800096c <main+0x288>)
 8000752:	f000 fca5 	bl	80010a0 <strdel>
	  char buffer [2];
	  if (ADC_value[0]/100 > 10)
 8000756:	4b88      	ldr	r3, [pc, #544]	; (8000978 <main+0x294>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	f240 424b 	movw	r2, #1099	; 0x44b
 800075e:	4293      	cmp	r3, r2
 8000760:	d90d      	bls.n	800077e <main+0x9a>
	  	  sprintf(buffer, "%i", ADC_value[1]/100);
 8000762:	4b85      	ldr	r3, [pc, #532]	; (8000978 <main+0x294>)
 8000764:	885b      	ldrh	r3, [r3, #2]
 8000766:	4a85      	ldr	r2, [pc, #532]	; (800097c <main+0x298>)
 8000768:	fba2 2303 	umull	r2, r3, r2, r3
 800076c:	095b      	lsrs	r3, r3, #5
 800076e:	b29b      	uxth	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	463b      	mov	r3, r7
 8000774:	4982      	ldr	r1, [pc, #520]	; (8000980 <main+0x29c>)
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fc7a 	bl	8005070 <siprintf>
 800077c:	e00c      	b.n	8000798 <main+0xb4>
	  else
		  sprintf(buffer, "0%i", ADC_value[1]/100);
 800077e:	4b7e      	ldr	r3, [pc, #504]	; (8000978 <main+0x294>)
 8000780:	885b      	ldrh	r3, [r3, #2]
 8000782:	4a7e      	ldr	r2, [pc, #504]	; (800097c <main+0x298>)
 8000784:	fba2 2303 	umull	r2, r3, r2, r3
 8000788:	095b      	lsrs	r3, r3, #5
 800078a:	b29b      	uxth	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	463b      	mov	r3, r7
 8000790:	497c      	ldr	r1, [pc, #496]	; (8000984 <main+0x2a0>)
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fc6c 	bl	8005070 <siprintf>

	  if (!flag_riego && !flag_agua){
 8000798:	4b7b      	ldr	r3, [pc, #492]	; (8000988 <main+0x2a4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d12b      	bne.n	80007f8 <main+0x114>
 80007a0:	4b7a      	ldr	r3, [pc, #488]	; (800098c <main+0x2a8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d127      	bne.n	80007f8 <main+0x114>
		  strcpy(texto_pantalla, "Midiendo...|SistHumedad:");
 80007a8:	4a70      	ldr	r2, [pc, #448]	; (800096c <main+0x288>)
 80007aa:	4b79      	ldr	r3, [pc, #484]	; (8000990 <main+0x2ac>)
 80007ac:	4614      	mov	r4, r2
 80007ae:	461d      	mov	r5, r3
 80007b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b8:	c403      	stmia	r4!, {r0, r1}
 80007ba:	7022      	strb	r2, [r4, #0]
	      strcat(texto_pantalla, buffer);
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	486a      	ldr	r0, [pc, #424]	; (800096c <main+0x288>)
 80007c2:	f004 fc75 	bl	80050b0 <strcat>
	      strcat(texto_pantalla, "%");
 80007c6:	4869      	ldr	r0, [pc, #420]	; (800096c <main+0x288>)
 80007c8:	f7ff fd0a 	bl	80001e0 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b66      	ldr	r3, [pc, #408]	; (800096c <main+0x288>)
 80007d2:	4413      	add	r3, r2
 80007d4:	496f      	ldr	r1, [pc, #444]	; (8000994 <main+0x2b0>)
 80007d6:	461a      	mov	r2, r3
 80007d8:	460b      	mov	r3, r1
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	8013      	strh	r3, [r2, #0]
	      strcat(texto_pantalla, "|STBY");
 80007de:	4863      	ldr	r0, [pc, #396]	; (800096c <main+0x288>)
 80007e0:	f7ff fcfe 	bl	80001e0 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b60      	ldr	r3, [pc, #384]	; (800096c <main+0x288>)
 80007ea:	4413      	add	r3, r2
 80007ec:	4a6a      	ldr	r2, [pc, #424]	; (8000998 <main+0x2b4>)
 80007ee:	6810      	ldr	r0, [r2, #0]
 80007f0:	6018      	str	r0, [r3, #0]
 80007f2:	8892      	ldrh	r2, [r2, #4]
 80007f4:	809a      	strh	r2, [r3, #4]
 80007f6:	e084      	b.n	8000902 <main+0x21e>
	     }
	  else if (flag_riego && !flag_agua){
 80007f8:	4b63      	ldr	r3, [pc, #396]	; (8000988 <main+0x2a4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d02b      	beq.n	8000858 <main+0x174>
 8000800:	4b62      	ldr	r3, [pc, #392]	; (800098c <main+0x2a8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d127      	bne.n	8000858 <main+0x174>
	      strcpy(texto_pantalla, "Regando....|SistHumedad:");
 8000808:	4a58      	ldr	r2, [pc, #352]	; (800096c <main+0x288>)
 800080a:	4b64      	ldr	r3, [pc, #400]	; (800099c <main+0x2b8>)
 800080c:	4614      	mov	r4, r2
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000818:	c403      	stmia	r4!, {r0, r1}
 800081a:	7022      	strb	r2, [r4, #0]
	      strcat(texto_pantalla, buffer);
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4852      	ldr	r0, [pc, #328]	; (800096c <main+0x288>)
 8000822:	f004 fc45 	bl	80050b0 <strcat>
	      strcat(texto_pantalla, "%");
 8000826:	4851      	ldr	r0, [pc, #324]	; (800096c <main+0x288>)
 8000828:	f7ff fcda 	bl	80001e0 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	4b4e      	ldr	r3, [pc, #312]	; (800096c <main+0x288>)
 8000832:	4413      	add	r3, r2
 8000834:	4957      	ldr	r1, [pc, #348]	; (8000994 <main+0x2b0>)
 8000836:	461a      	mov	r2, r3
 8000838:	460b      	mov	r3, r1
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	8013      	strh	r3, [r2, #0]
	      strcat(texto_pantalla, "|  ON");
 800083e:	484b      	ldr	r0, [pc, #300]	; (800096c <main+0x288>)
 8000840:	f7ff fcce 	bl	80001e0 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b48      	ldr	r3, [pc, #288]	; (800096c <main+0x288>)
 800084a:	4413      	add	r3, r2
 800084c:	4a54      	ldr	r2, [pc, #336]	; (80009a0 <main+0x2bc>)
 800084e:	6810      	ldr	r0, [r2, #0]
 8000850:	6018      	str	r0, [r3, #0]
 8000852:	8892      	ldrh	r2, [r2, #4]
 8000854:	809a      	strh	r2, [r3, #4]
 8000856:	e054      	b.n	8000902 <main+0x21e>
	     }
	  else if (flag_riego && flag_agua){
 8000858:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <main+0x2a4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d01f      	beq.n	80008a0 <main+0x1bc>
 8000860:	4b4a      	ldr	r3, [pc, #296]	; (800098c <main+0x2a8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d01b      	beq.n	80008a0 <main+0x1bc>
	      strcpy(texto_pantalla, "ALERTA| Sin aguaHumedad:");
 8000868:	4a40      	ldr	r2, [pc, #256]	; (800096c <main+0x288>)
 800086a:	4b4e      	ldr	r3, [pc, #312]	; (80009a4 <main+0x2c0>)
 800086c:	4614      	mov	r4, r2
 800086e:	461d      	mov	r5, r3
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000878:	c403      	stmia	r4!, {r0, r1}
 800087a:	7022      	strb	r2, [r4, #0]
	      strcat(texto_pantalla, buffer);
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	483a      	ldr	r0, [pc, #232]	; (800096c <main+0x288>)
 8000882:	f004 fc15 	bl	80050b0 <strcat>
	      strcat(texto_pantalla, "% !!!");
 8000886:	4839      	ldr	r0, [pc, #228]	; (800096c <main+0x288>)
 8000888:	f7ff fcaa 	bl	80001e0 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	4b36      	ldr	r3, [pc, #216]	; (800096c <main+0x288>)
 8000892:	4413      	add	r3, r2
 8000894:	4a44      	ldr	r2, [pc, #272]	; (80009a8 <main+0x2c4>)
 8000896:	6810      	ldr	r0, [r2, #0]
 8000898:	6018      	str	r0, [r3, #0]
 800089a:	8892      	ldrh	r2, [r2, #4]
 800089c:	809a      	strh	r2, [r3, #4]
 800089e:	e030      	b.n	8000902 <main+0x21e>
	      }
	  else if (!flag_riego && flag_agua){
 80008a0:	4b39      	ldr	r3, [pc, #228]	; (8000988 <main+0x2a4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d125      	bne.n	80008f4 <main+0x210>
 80008a8:	4b38      	ldr	r3, [pc, #224]	; (800098c <main+0x2a8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d021      	beq.n	80008f4 <main+0x210>
	      strcpy(texto_pantalla, "Midiendo..|AVISOHum:");
 80008b0:	4a2e      	ldr	r2, [pc, #184]	; (800096c <main+0x288>)
 80008b2:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <main+0x2c8>)
 80008b4:	4614      	mov	r4, r2
 80008b6:	461d      	mov	r5, r3
 80008b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008c0:	6020      	str	r0, [r4, #0]
 80008c2:	3404      	adds	r4, #4
 80008c4:	7021      	strb	r1, [r4, #0]
	      strcat(texto_pantalla, buffer);
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	4828      	ldr	r0, [pc, #160]	; (800096c <main+0x288>)
 80008cc:	f004 fbf0 	bl	80050b0 <strcat>
	      strcat(texto_pantalla, "%|SIN AGUA");
 80008d0:	4826      	ldr	r0, [pc, #152]	; (800096c <main+0x288>)
 80008d2:	f7ff fc85 	bl	80001e0 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b24      	ldr	r3, [pc, #144]	; (800096c <main+0x288>)
 80008dc:	4413      	add	r3, r2
 80008de:	4934      	ldr	r1, [pc, #208]	; (80009b0 <main+0x2cc>)
 80008e0:	461a      	mov	r2, r3
 80008e2:	460b      	mov	r3, r1
 80008e4:	cb03      	ldmia	r3!, {r0, r1}
 80008e6:	6010      	str	r0, [r2, #0]
 80008e8:	6051      	str	r1, [r2, #4]
 80008ea:	8819      	ldrh	r1, [r3, #0]
 80008ec:	789b      	ldrb	r3, [r3, #2]
 80008ee:	8111      	strh	r1, [r2, #8]
 80008f0:	7293      	strb	r3, [r2, #10]
 80008f2:	e006      	b.n	8000902 <main+0x21e>
	  	  }
	  else
	      strcpy(texto_pantalla, "ERROR");
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <main+0x288>)
 80008f6:	4a2f      	ldr	r2, [pc, #188]	; (80009b4 <main+0x2d0>)
 80008f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008fc:	6018      	str	r0, [r3, #0]
 80008fe:	3304      	adds	r3, #4
 8000900:	8019      	strh	r1, [r3, #0]

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000906:	4816      	ldr	r0, [pc, #88]	; (8000960 <main+0x27c>)
 8000908:	f002 fa25 	bl	8002d56 <HAL_GPIO_TogglePin>

	  for (int i=0; i<500; i++){
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	e002      	b.n	8000918 <main+0x234>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800091e:	dbf8      	blt.n	8000912 <main+0x22e>
		//media
	  }
	  //if ((nivel humedad < 25%) || (flag_boton == 1)) && (flag_riego == 0){
	  	  flag_boton = 0;
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <main+0x2d4>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
	  	  if (detec_lvl(ADC_value[0]) > 1){
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <main+0x294>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe50 	bl	80005d0 <detec_lvl>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	f77f af0c 	ble.w	8000750 <main+0x6c>
	  		  HAL_NVIC_DisableIRQ(EXTI0_IRQn); //Deshabilitar las interrupciones
 8000938:	2006      	movs	r0, #6
 800093a:	f001 fce4 	bl	8002306 <HAL_NVIC_DisableIRQ>
	  		  flag_riego = 1;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <main+0x2a4>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800094a:	481c      	ldr	r0, [pc, #112]	; (80009bc <main+0x2d8>)
 800094c:	f002 f9ea 	bl	8002d24 <HAL_GPIO_WritePin>
	  		  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000950:	2104      	movs	r1, #4
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <main+0x2dc>)
 8000954:	f003 fc72 	bl	800423c <HAL_TIM_OC_Start_IT>
	  		  HAL_NVIC_EnableIRQ(EXTI0_IRQn); //Volver a habilitar las interrupciones
 8000958:	2006      	movs	r0, #6
 800095a:	f001 fcc6 	bl	80022ea <HAL_NVIC_EnableIRQ>
  {
 800095e:	e6f7      	b.n	8000750 <main+0x6c>
 8000960:	40020c00 	.word	0x40020c00
 8000964:	2000021c 	.word	0x2000021c
 8000968:	2000008c 	.word	0x2000008c
 800096c:	2000022c 	.word	0x2000022c
 8000970:	08005980 	.word	0x08005980
 8000974:	200001d0 	.word	0x200001d0
 8000978:	20000218 	.word	0x20000218
 800097c:	51eb851f 	.word	0x51eb851f
 8000980:	080059a4 	.word	0x080059a4
 8000984:	080059a8 	.word	0x080059a8
 8000988:	20000220 	.word	0x20000220
 800098c:	20000228 	.word	0x20000228
 8000990:	080059ac 	.word	0x080059ac
 8000994:	080059c8 	.word	0x080059c8
 8000998:	080059cc 	.word	0x080059cc
 800099c:	080059d4 	.word	0x080059d4
 80009a0:	080059f0 	.word	0x080059f0
 80009a4:	080059f8 	.word	0x080059f8
 80009a8:	08005a14 	.word	0x08005a14
 80009ac:	08005a1c 	.word	0x08005a1c
 80009b0:	08005a34 	.word	0x08005a34
 80009b4:	08005a40 	.word	0x08005a40
 80009b8:	20000224 	.word	0x20000224
 80009bc:	40021000 	.word	0x40021000
 80009c0:	20000188 	.word	0x20000188

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	; 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	2230      	movs	r2, #48	; 0x30
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f004 fb44 	bl	8005060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <SystemClock_Config+0xc8>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <SystemClock_Config+0xc8>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <SystemClock_Config+0xc8>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <SystemClock_Config+0xcc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <SystemClock_Config+0xcc>)
 8000a0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <SystemClock_Config+0xcc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a34:	2308      	movs	r3, #8
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a38:	2332      	movs	r3, #50	; 0x32
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a40:	2308      	movs	r3, #8
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fe03 	bl	8003654 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a54:	f000 fb3d 	bl	80010d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	2101      	movs	r1, #1
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 f865 	bl	8003b44 <HAL_RCC_ClockConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a80:	f000 fb27 	bl	80010d2 <Error_Handler>
  }
}
 8000a84:	bf00      	nop
 8000a86:	3750      	adds	r7, #80	; 0x50
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000aa8:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <MX_ADC1_Init+0xb8>)
 8000aaa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <MX_ADC1_Init+0xbc>)
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af2:	4815      	ldr	r0, [pc, #84]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000af4:	f000 fdc2 	bl	800167c <HAL_ADC_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fae8 	bl	80010d2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b02:	2304      	movs	r3, #4
 8000b04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4619      	mov	r1, r3
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000b14:	f001 f814 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b1e:	f000 fad8 	bl	80010d2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b22:	2305      	movs	r3, #5
 8000b24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_ADC1_Init+0xb4>)
 8000b30:	f001 f806 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b3a:	f000 faca 	bl	80010d2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	40012000 	.word	0x40012000
 8000b50:	0f000001 	.word	0x0f000001

08000b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <MX_I2C1_Init+0x54>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_I2C1_Init+0x58>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b92:	f002 f913 	bl	8002dbc <HAL_I2C_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b9c:	f000 fa99 	bl	80010d2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000134 	.word	0x20000134
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	000186a0 	.word	0x000186a0

08000bb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b096      	sub	sp, #88	; 0x58
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2220      	movs	r2, #32
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 fa39 	bl	8005060 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000bf0:	4a3e      	ldr	r2, [pc, #248]	; (8000cec <MX_TIM1_Init+0x13c>)
 8000bf2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bf4:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c00:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c1a:	4833      	ldr	r0, [pc, #204]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000c1c:	f003 f99e 	bl	8003f5c <HAL_TIM_Base_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c26:	f000 fa54 	bl	80010d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c34:	4619      	mov	r1, r3
 8000c36:	482c      	ldr	r0, [pc, #176]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000c38:	f003 fd62 	bl	8004700 <HAL_TIM_ConfigClockSource>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c42:	f000 fa46 	bl	80010d2 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000c46:	4828      	ldr	r0, [pc, #160]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000c48:	f003 fa3a 	bl	80040c0 <HAL_TIM_OC_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c52:	f000 fa3e 	bl	80010d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c62:	4619      	mov	r1, r3
 8000c64:	4820      	ldr	r0, [pc, #128]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000c66:	f004 f8fd 	bl	8004e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c70:	f000 fa2f 	bl	80010d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000c74:	2320      	movs	r3, #32
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	2204      	movs	r2, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000c9a:	f003 fcd5 	bl	8004648 <HAL_TIM_OC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ca4:	f000 fa15 	bl	80010d2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000ccc:	f004 f938 	bl	8004f40 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000cd6:	f000 f9fc 	bl	80010d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cda:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <MX_TIM1_Init+0x138>)
 8000cdc:	f000 fb32 	bl	8001344 <HAL_TIM_MspPostInit>

}
 8000ce0:	bf00      	nop
 8000ce2:	3758      	adds	r7, #88	; 0x58
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000188 	.word	0x20000188
 8000cec:	40010000 	.word	0x40010000

08000cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24999;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d16:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000d1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d36:	4814      	ldr	r0, [pc, #80]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d38:	f003 f910 	bl	8003f5c <HAL_TIM_Base_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d42:	f000 f9c6 	bl	80010d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	4619      	mov	r1, r3
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d54:	f003 fcd4 	bl	8004700 <HAL_TIM_ConfigClockSource>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d5e:	f000 f9b8 	bl	80010d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_TIM2_Init+0x98>)
 8000d70:	f004 f878 	bl	8004e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d7a:	f000 f9aa 	bl	80010d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200001d0 	.word	0x200001d0

08000d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_DMA_Init+0x3c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <MX_DMA_Init+0x3c>)
 8000d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_DMA_Init+0x3c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2038      	movs	r0, #56	; 0x38
 8000db4:	f001 fa7d 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000db8:	2038      	movs	r0, #56	; 0x38
 8000dba:	f001 fa96 	bl	80022ea <HAL_NVIC_EnableIRQ>

}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a31      	ldr	r2, [pc, #196]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a2a      	ldr	r2, [pc, #168]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e08:	f043 0310 	orr.w	r3, r3, #16
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4816      	ldr	r0, [pc, #88]	; (8000eb4 <MX_GPIO_Init+0xe8>)
 8000e5a:	f001 ff63 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <MX_GPIO_Init+0xec>)
 8000e74:	f001 fdd2 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <MX_GPIO_Init+0xe8>)
 8000e92:	f001 fdc3 	bl	8002a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2006      	movs	r0, #6
 8000e9c:	f001 fa09 	bl	80022b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ea0:	2006      	movs	r0, #6
 8000ea2:	f001 fa22 	bl	80022ea <HAL_NVIC_EnableIRQ>

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	40020000 	.word	0x40020000

08000ebc <lcd_send_data>:

/* USER CODE BEGIN 4 */
void lcd_send_data (char data)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f023 030f 	bic.w	r3, r3, #15
 8000ecc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f043 030d 	orr.w	r3, r3, #13
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	f043 0309 	orr.w	r3, r3, #9
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	f043 030d 	orr.w	r3, r3, #13
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	f043 0309 	orr.w	r3, r3, #9
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, HAL_MAX_DELAY);
 8000efc:	f107 0208 	add.w	r2, r7, #8
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2304      	movs	r3, #4
 8000f08:	214e      	movs	r1, #78	; 0x4e
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <lcd_send_data+0x5c>)
 8000f0c:	f002 f89a 	bl	8003044 <HAL_I2C_Master_Transmit>
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000134 	.word	0x20000134

08000f1c <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f023 030f 	bic.w	r3, r3, #15
 8000f2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 030c 	orr.w	r3, r3, #12
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	f043 030c 	orr.w	r3, r3, #12
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, HAL_MAX_DELAY);
 8000f5c:	f107 0208 	add.w	r2, r7, #8
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2304      	movs	r3, #4
 8000f68:	214e      	movs	r1, #78	; 0x4e
 8000f6a:	4803      	ldr	r0, [pc, #12]	; (8000f78 <lcd_send_cmd+0x5c>)
 8000f6c:	f002 f86a 	bl	8003044 <HAL_I2C_Master_Transmit>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000134 	.word	0x20000134

08000f7c <lcd_init>:

void lcd_init (void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	HAL_Delay(45); //Datasheet especifica espera de 40ms
 8000f80:	202d      	movs	r0, #45	; 0x2d
 8000f82:	f000 fb57 	bl	8001634 <HAL_Delay>
	lcd_send_cmd (0x30); //Encendido del display y del cursor
 8000f86:	2030      	movs	r0, #48	; 0x30
 8000f88:	f7ff ffc8 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(5); //Datasheet especifica espera de 4.1ms
 8000f8c:	2005      	movs	r0, #5
 8000f8e:	f000 fb51 	bl	8001634 <HAL_Delay>
	lcd_send_cmd (0x30); //El datasheet especifica que se debe repetir el envio de esta instruccion
 8000f92:	2030      	movs	r0, #48	; 0x30
 8000f94:	f7ff ffc2 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1); //Datasheet especifica espera de 100us
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 fb4b 	bl	8001634 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000f9e:	2030      	movs	r0, #48	; 0x30
 8000fa0:	f7ff ffbc 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f000 fb45 	bl	8001634 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000faa:	2020      	movs	r0, #32
 8000fac:	f7ff ffb6 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 fb3f 	bl	8001634 <HAL_Delay>
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000fb6:	2028      	movs	r0, #40	; 0x28
 8000fb8:	f7ff ffb0 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 fb39 	bl	8001634 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000fc2:	2008      	movs	r0, #8
 8000fc4:	f7ff ffaa 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f000 fb33 	bl	8001634 <HAL_Delay>
	lcd_send_cmd (0x01);  //Clear
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff ffa4 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f000 fb2d 	bl	8001634 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f7ff ff9e 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f000 fb27 	bl	8001634 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000fe6:	200c      	movs	r0, #12
 8000fe8:	f7ff ff98 	bl	8000f1c <lcd_send_cmd>
	HAL_Delay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f000 fb21 	bl	8001634 <HAL_Delay>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <lcd_update>:
		if (contador_linea > ROWS*LINES)
			return; //No hace nada más porque no hay espacio
	}
}

void lcd_update (char *str){
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]

	lcd_clear(); //Borra la pantalla y pone el cursor en la esquina superior izquierda
 8000ffe:	f000 f82a 	bl	8001056 <lcd_clear>
	//En esta funcion se hacen los saltos de linea necesarios.
	int contador_lineas = 0; //Static para que no se borre entre ejecuciones de la función
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
	contador_lineas = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
	while (*str){
 800100a:	e01b      	b.n	8001044 <lcd_update+0x4e>
		lcd_send_data (*str++);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff51 	bl	8000ebc <lcd_send_data>
		contador_lineas = (contador_lineas) % (ROWS*LINES); //Contar hasta el número de caracteres máximo
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	425a      	negs	r2, r3
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	f002 021f 	and.w	r2, r2, #31
 8001026:	bf58      	it	pl
 8001028:	4253      	negpl	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
		contador_lineas++;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
		if (contador_lineas == ROWS)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b10      	cmp	r3, #16
 8001036:	d102      	bne.n	800103e <lcd_update+0x48>
			lcd_send_cmd(0xc0); //Pasa a la segunda línea
 8001038:	20c0      	movs	r0, #192	; 0xc0
 800103a:	f7ff ff6f 	bl	8000f1c <lcd_send_cmd>
		if (contador_lineas > ROWS*LINES)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b20      	cmp	r3, #32
 8001042:	dc04      	bgt.n	800104e <lcd_update+0x58>
	while (*str){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1df      	bne.n	800100c <lcd_update+0x16>
 800104c:	e000      	b.n	8001050 <lcd_update+0x5a>
			return; //No hace nada más porque no hay espacio
 800104e:	bf00      	nop
	}

}
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <lcd_clear>:

void lcd_clear(void){ //Tambien posiciona el cursor en la esquina superior izquierda. SOLO VALE PARA DISPLAY 16x2
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80); //Posiciona en el comienzo
 800105c:	2080      	movs	r0, #128	; 0x80
 800105e:	f7ff ff5d 	bl	8000f1c <lcd_send_cmd>
	for (int i=0; i < LINES; i++){ //Recorrer todas las filas
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	e011      	b.n	800108c <lcd_clear+0x36>
		for (int j=0; j < ROWS; j++) //Recorrer todas las columnas
 8001068:	2300      	movs	r3, #0
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	e005      	b.n	800107a <lcd_clear+0x24>
			lcd_send_data(' '); //Poner espacios (borrar todo)
 800106e:	2020      	movs	r0, #32
 8001070:	f7ff ff24 	bl	8000ebc <lcd_send_data>
		for (int j=0; j < ROWS; j++) //Recorrer todas las columnas
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	ddf6      	ble.n	800106e <lcd_clear+0x18>
		lcd_send_cmd(0x0c); //Posicionar en la segunda linea
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff4b 	bl	8000f1c <lcd_send_cmd>
	for (int i=0; i < LINES; i++){ //Recorrer todas las filas
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3301      	adds	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	ddea      	ble.n	8001068 <lcd_clear+0x12>
	}
	lcd_send_cmd(0x80); //Posicionar el cursor en el comienzo de nuevo
 8001092:	2080      	movs	r0, #128	; 0x80
 8001094:	f7ff ff42 	bl	8000f1c <lcd_send_cmd>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <strdel>:

void strdel(char* cadena){
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	for (int i=0; i < LINES*ROWS; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	e007      	b.n	80010be <strdel+0x1e>
		*cadena++ = ' ';
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	2220      	movs	r2, #32
 80010b6:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < LINES*ROWS; i++)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b1f      	cmp	r3, #31
 80010c2:	ddf4      	ble.n	80010ae <strdel+0xe>
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d6:	b672      	cpsid	i
}
 80010d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010da:	e7fe      	b.n	80010da <Error_Handler+0x8>

080010dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <HAL_MspInit+0x4c>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_MspInit+0x4c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800111a:	2007      	movs	r0, #7
 800111c:	f001 f8be 	bl	800229c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800

0800112c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a33      	ldr	r2, [pc, #204]	; (8001218 <HAL_ADC_MspInit+0xec>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d15f      	bne.n	800120e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <HAL_ADC_MspInit+0xf0>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a31      	ldr	r2, [pc, #196]	; (800121c <HAL_ADC_MspInit+0xf0>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <HAL_ADC_MspInit+0xf0>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <HAL_ADC_MspInit+0xf0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a2a      	ldr	r2, [pc, #168]	; (800121c <HAL_ADC_MspInit+0xf0>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_ADC_MspInit+0xf0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001186:	2330      	movs	r3, #48	; 0x30
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118a:	2303      	movs	r3, #3
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4821      	ldr	r0, [pc, #132]	; (8001220 <HAL_ADC_MspInit+0xf4>)
 800119a:	f001 fc3f 	bl	8002a1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <HAL_ADC_MspInit+0xfc>)
 80011a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e2:	4810      	ldr	r0, [pc, #64]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011e4:	f001 f8aa 	bl	800233c <HAL_DMA_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011ee:	f7ff ff70 	bl	80010d2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_ADC_MspInit+0xf8>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2012      	movs	r0, #18
 8001204:	f001 f855 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001208:	2012      	movs	r0, #18
 800120a:	f001 f86e 	bl	80022ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40012000 	.word	0x40012000
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000
 8001224:	200000d4 	.word	0x200000d4
 8001228:	40026410 	.word	0x40026410

0800122c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_I2C_MspInit+0x84>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12b      	bne.n	80012a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800126a:	23c0      	movs	r3, #192	; 0xc0
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126e:	2312      	movs	r3, #18
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800127a:	2304      	movs	r3, #4
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <HAL_I2C_MspInit+0x8c>)
 8001286:	f001 fbc9 	bl	8002a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40005400 	.word	0x40005400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020400 	.word	0x40020400

080012bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1c      	ldr	r2, [pc, #112]	; (800133c <HAL_TIM_Base_MspInit+0x80>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d116      	bne.n	80012fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_TIM_Base_MspInit+0x84>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <HAL_TIM_Base_MspInit+0x84>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_TIM_Base_MspInit+0x84>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	201b      	movs	r0, #27
 80012f0:	f000 ffdf 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012f4:	201b      	movs	r0, #27
 80012f6:	f000 fff8 	bl	80022ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012fa:	e01a      	b.n	8001332 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001304:	d115      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_TIM_Base_MspInit+0x84>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <HAL_TIM_Base_MspInit+0x84>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_TIM_Base_MspInit+0x84>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	201c      	movs	r0, #28
 8001328:	f000 ffc3 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800132c:	201c      	movs	r0, #28
 800132e:	f000 ffdc 	bl	80022ea <HAL_NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010000 	.word	0x40010000
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_TIM_MspPostInit+0x68>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d11e      	bne.n	80013a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_TIM_MspPostInit+0x6c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_TIM_MspPostInit+0x6c>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_TIM_MspPostInit+0x6c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001382:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001386:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_TIM_MspPostInit+0x70>)
 80013a0:	f001 fb3c 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40010000 	.word	0x40010000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40021000 	.word	0x40021000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f8f6 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001410:	2001      	movs	r0, #1
 8001412:	f001 fcbb 	bl	8002d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <ADC_IRQHandler+0x10>)
 8001422:	f000 f96e 	bl	8001702 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000008c 	.word	0x2000008c

08001430 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM1_CC_IRQHandler+0x10>)
 8001436:	f002 ffff 	bl	8004438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000188 	.word	0x20000188

08001444 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <TIM2_IRQHandler+0x10>)
 800144a:	f002 fff5 	bl	8004438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200001d0 	.word	0x200001d0

08001458 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA2_Stream0_IRQHandler+0x10>)
 800145e:	f001 f873 	bl	8002548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200000d4 	.word	0x200000d4

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d207      	bcs.n	80014ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800149c:	f003 fdb6 	bl	800500c <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	e009      	b.n	80014c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <_sbrk+0x64>)
 80014bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20020000 	.word	0x20020000
 80014cc:	00000400 	.word	0x00000400
 80014d0:	2000024c 	.word	0x2000024c
 80014d4:	20000268 	.word	0x20000268

080014d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <SystemInit+0x20>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <SystemInit+0x20>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001534 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001502:	490e      	ldr	r1, [pc, #56]	; (800153c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001504:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001518:	4c0b      	ldr	r4, [pc, #44]	; (8001548 <LoopFillZerobss+0x26>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001526:	f7ff ffd7 	bl	80014d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152a:	f003 fd75 	bl	8005018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7ff f8d9 	bl	80006e4 <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001540:	08005ab4 	.word	0x08005ab4
  ldr r2, =_sbss
 8001544:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001548:	20000264 	.word	0x20000264

0800154c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <DMA1_Stream0_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <HAL_Init+0x40>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_Init+0x40>)
 8001566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_Init+0x40>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 fe8f 	bl	800229c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	2000      	movs	r0, #0
 8001580:	f000 f808 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff fdaa 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 feb5 	bl	8002322 <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 fe6f 	bl	80022b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	20000250 	.word	0x20000250

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000250 	.word	0x20000250

08001634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff ffee 	bl	800161c <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d005      	beq.n	800165a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_Delay+0x44>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800165a:	bf00      	nop
 800165c:	f7ff ffde 	bl	800161c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d8f7      	bhi.n	800165c <HAL_Delay+0x28>
  {
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008

0800167c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e033      	b.n	80016fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fd46 	bl	800112c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d118      	bne.n	80016ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016c2:	f023 0302 	bic.w	r3, r3, #2
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fb68 	bl	8001da4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
 80016ea:	e001      	b.n	80016f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f003 0320 	and.w	r3, r3, #32
 8001730:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d049      	beq.n	80017cc <HAL_ADC_IRQHandler+0xca>
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d046      	beq.n	80017cc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d12b      	bne.n	80017bc <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001768:	2b00      	cmp	r3, #0
 800176a:	d127      	bne.n	80017bc <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001784:	2b00      	cmp	r3, #0
 8001786:	d119      	bne.n	80017bc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0220 	bic.w	r2, r2, #32
 8001796:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fee9 	bl	8000594 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f06f 0212 	mvn.w	r2, #18
 80017ca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017da:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d057      	beq.n	8001892 <HAL_ADC_IRQHandler+0x190>
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d054      	beq.n	8001892 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d139      	bne.n	8001882 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001826:	2b00      	cmp	r3, #0
 8001828:	d12b      	bne.n	8001882 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001834:	2b00      	cmp	r3, #0
 8001836:	d124      	bne.n	8001882 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001842:	2b00      	cmp	r3, #0
 8001844:	d11d      	bne.n	8001882 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d119      	bne.n	8001882 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800185c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fc0c 	bl	80020a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f06f 020c 	mvn.w	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d017      	beq.n	80018d8 <HAL_ADC_IRQHandler+0x1d6>
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d014      	beq.n	80018d8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d10d      	bne.n	80018d8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f925 	bl	8001b18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f06f 0201 	mvn.w	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018e6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d015      	beq.n	800191a <HAL_ADC_IRQHandler+0x218>
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d012      	beq.n	800191a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	f043 0202 	orr.w	r2, r3, #2
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0220 	mvn.w	r2, #32
 8001908:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f90e 	bl	8001b2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 0220 	mvn.w	r2, #32
 8001918:	601a      	str	r2, [r3, #0]
  }
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Start_DMA+0x1e>
 800193e:	2302      	movs	r3, #2
 8001940:	e0ce      	b.n	8001ae0 <HAL_ADC_Start_DMA+0x1bc>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d018      	beq.n	800198a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001968:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_ADC_Start_DMA+0x1c4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a5f      	ldr	r2, [pc, #380]	; (8001aec <HAL_ADC_Start_DMA+0x1c8>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9a      	lsrs	r2, r3, #18
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800197c:	e002      	b.n	8001984 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	3b01      	subs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f9      	bne.n	800197e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001998:	d107      	bne.n	80019aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f040 8086 	bne.w	8001ac6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f8:	d106      	bne.n	8001a08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f023 0206 	bic.w	r2, r3, #6
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
 8001a06:	e002      	b.n	8001a0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a16:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_ADC_Start_DMA+0x1cc>)
 8001a18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	4a35      	ldr	r2, [pc, #212]	; (8001af4 <HAL_ADC_Start_DMA+0x1d0>)
 8001a20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	4a34      	ldr	r2, [pc, #208]	; (8001af8 <HAL_ADC_Start_DMA+0x1d4>)
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	4a33      	ldr	r2, [pc, #204]	; (8001afc <HAL_ADC_Start_DMA+0x1d8>)
 8001a30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	334c      	adds	r3, #76	; 0x4c
 8001a66:	4619      	mov	r1, r3
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f000 fd14 	bl	8002498 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10f      	bne.n	8001a9c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d129      	bne.n	8001ade <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	e020      	b.n	8001ade <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <HAL_ADC_Start_DMA+0x1dc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d11b      	bne.n	8001ade <HAL_ADC_Start_DMA+0x1ba>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d114      	bne.n	8001ade <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	e00b      	b.n	8001ade <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	431bde83 	.word	0x431bde83
 8001af0:	40012300 	.word	0x40012300
 8001af4:	08001f9d 	.word	0x08001f9d
 8001af8:	08002057 	.word	0x08002057
 8001afc:	08002073 	.word	0x08002073
 8001b00:	40012000 	.word	0x40012000

08001b04 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1c>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e113      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x244>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d925      	bls.n	8001bb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b1e      	subs	r3, #30
 8001b82:	2207      	movs	r2, #7
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	400a      	ands	r2, r1
 8001b90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68d9      	ldr	r1, [r3, #12]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4403      	add	r3, r0
 8001baa:	3b1e      	subs	r3, #30
 8001bac:	409a      	lsls	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	e022      	b.n	8001bfe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6919      	ldr	r1, [r3, #16]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	2207      	movs	r2, #7
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	400a      	ands	r2, r1
 8001bda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4403      	add	r3, r0
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d824      	bhi.n	8001c50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	3b05      	subs	r3, #5
 8001c18:	221f      	movs	r2, #31
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	400a      	ands	r2, r1
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b05      	subs	r3, #5
 8001c42:	fa00 f203 	lsl.w	r2, r0, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4e:	e04c      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	d824      	bhi.n	8001ca2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b23      	subs	r3, #35	; 0x23
 8001c6a:	221f      	movs	r2, #31
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43da      	mvns	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	400a      	ands	r2, r1
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	3b23      	subs	r3, #35	; 0x23
 8001c94:	fa00 f203 	lsl.w	r2, r0, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca0:	e023      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3b41      	subs	r3, #65	; 0x41
 8001cb4:	221f      	movs	r2, #31
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b41      	subs	r3, #65	; 0x41
 8001cde:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cea:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_ADC_ConfigChannel+0x250>)
 8001cec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a28      	ldr	r2, [pc, #160]	; (8001d94 <HAL_ADC_ConfigChannel+0x254>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d10f      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1d8>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b12      	cmp	r3, #18
 8001cfe:	d10b      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <HAL_ADC_ConfigChannel+0x254>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d12b      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x23a>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <HAL_ADC_ConfigChannel+0x258>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d003      	beq.n	8001d34 <HAL_ADC_ConfigChannel+0x1f4>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b11      	cmp	r3, #17
 8001d32:	d122      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <HAL_ADC_ConfigChannel+0x258>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d111      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_ADC_ConfigChannel+0x25c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_ADC_ConfigChannel+0x260>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	0c9a      	lsrs	r2, r3, #18
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d6c:	e002      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f9      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40012300 	.word	0x40012300
 8001d94:	40012000 	.word	0x40012000
 8001d98:	10000012 	.word	0x10000012
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	431bde83 	.word	0x431bde83

08001da4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dac:	4b79      	ldr	r3, [pc, #484]	; (8001f94 <ADC_Init+0x1f0>)
 8001dae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	021a      	lsls	r2, r3, #8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <ADC_Init+0x1f4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d022      	beq.n	8001e82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6899      	ldr	r1, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6899      	ldr	r1, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	e00f      	b.n	8001ea2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0202 	bic.w	r2, r2, #2
 8001eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6899      	ldr	r1, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7e1b      	ldrb	r3, [r3, #24]
 8001ebc:	005a      	lsls	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01b      	beq.n	8001f08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ede:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	3b01      	subs	r3, #1
 8001efc:	035a      	lsls	r2, r3, #13
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	e007      	b.n	8001f18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	051a      	lsls	r2, r3, #20
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6899      	ldr	r1, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f5a:	025a      	lsls	r2, r3, #9
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6899      	ldr	r1, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	029a      	lsls	r2, r3, #10
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	609a      	str	r2, [r3, #8]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40012300 	.word	0x40012300
 8001f98:	0f000001 	.word	0x0f000001

08001f9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d13c      	bne.n	8002030 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d12b      	bne.n	8002028 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d127      	bne.n	8002028 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d119      	bne.n	8002028 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0220 	bic.w	r2, r2, #32
 8002002:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f7fe fab3 	bl	8000594 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800202e:	e00e      	b.n	800204e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff fd75 	bl	8001b2c <HAL_ADC_ErrorCallback>
}
 8002042:	e004      	b.n	800204e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	4798      	blx	r3
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff fd4d 	bl	8001b04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2240      	movs	r2, #64	; 0x40
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f043 0204 	orr.w	r2, r3, #4
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff fd4a 	bl	8001b2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <__NVIC_GetPriorityGrouping+0x18>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0307 	and.w	r3, r3, #7
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0b      	blt.n	8002142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4907      	ldr	r1, [pc, #28]	; (8002150 <__NVIC_EnableIRQ+0x38>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000e100 	.word	0xe000e100

08002154 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db12      	blt.n	800218c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	490a      	ldr	r1, [pc, #40]	; (8002198 <__NVIC_DisableIRQ+0x44>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2001      	movs	r0, #1
 8002176:	fa00 f202 	lsl.w	r2, r0, r2
 800217a:	3320      	adds	r3, #32
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002180:	f3bf 8f4f 	dsb	sy
}
 8002184:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002186:	f3bf 8f6f 	isb	sy
}
 800218a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0a      	blt.n	80021c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <__NVIC_SetPriority+0x4c>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c4:	e00a      	b.n	80021dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4908      	ldr	r1, [pc, #32]	; (80021ec <__NVIC_SetPriority+0x50>)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3b04      	subs	r3, #4
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	440b      	add	r3, r1
 80021da:	761a      	strb	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f1c3 0307 	rsb	r3, r3, #7
 800220a:	2b04      	cmp	r3, #4
 800220c:	bf28      	it	cs
 800220e:	2304      	movcs	r3, #4
 8002210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3304      	adds	r3, #4
 8002216:	2b06      	cmp	r3, #6
 8002218:	d902      	bls.n	8002220 <NVIC_EncodePriority+0x30>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b03      	subs	r3, #3
 800221e:	e000      	b.n	8002222 <NVIC_EncodePriority+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43d9      	mvns	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	4313      	orrs	r3, r2
         );
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002268:	d301      	bcc.n	800226e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226a:	2301      	movs	r3, #1
 800226c:	e00f      	b.n	800228e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <SysTick_Config+0x40>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002276:	210f      	movs	r1, #15
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f7ff ff8e 	bl	800219c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <SysTick_Config+0x40>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <SysTick_Config+0x40>)
 8002288:	2207      	movs	r2, #7
 800228a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff05 	bl	80020b4 <__NVIC_SetPriorityGrouping>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c4:	f7ff ff1a 	bl	80020fc <__NVIC_GetPriorityGrouping>
 80022c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f7ff ff8e 	bl	80021f0 <NVIC_EncodePriority>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff5d 	bl	800219c <__NVIC_SetPriority>
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff0d 	bl	8002118 <__NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff1d 	bl	8002154 <__NVIC_DisableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff94 	bl	8002258 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff f968 	bl	800161c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e099      	b.n	800248c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002378:	e00f      	b.n	800239a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237a:	f7ff f94f 	bl	800161c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b05      	cmp	r3, #5
 8002386:	d908      	bls.n	800239a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e078      	b.n	800248c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e8      	bne.n	800237a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4b38      	ldr	r3, [pc, #224]	; (8002494 <HAL_DMA_Init+0x158>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d107      	bne.n	8002404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	4313      	orrs	r3, r2
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b04      	cmp	r3, #4
 800242c:	d117      	bne.n	800245e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fa6f 	bl	8002924 <DMA_CheckFifoParam>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2240      	movs	r2, #64	; 0x40
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800245a:	2301      	movs	r3, #1
 800245c:	e016      	b.n	800248c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa26 	bl	80028b8 <DMA_CalcBaseAndBitshift>
 800246c:	4603      	mov	r3, r0
 800246e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	223f      	movs	r2, #63	; 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	f010803f 	.word	0xf010803f

08002498 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Start_IT+0x26>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e040      	b.n	8002540 <HAL_DMA_Start_IT+0xa8>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d12f      	bne.n	8002532 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f9b8 	bl	800285c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	223f      	movs	r2, #63	; 0x3f
 80024f2:	409a      	lsls	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0216 	orr.w	r2, r2, #22
 8002506:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0208 	orr.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e005      	b.n	800253e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002554:	4b8e      	ldr	r3, [pc, #568]	; (8002790 <HAL_DMA_IRQHandler+0x248>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a8e      	ldr	r2, [pc, #568]	; (8002794 <HAL_DMA_IRQHandler+0x24c>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0a9b      	lsrs	r3, r3, #10
 8002560:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2208      	movs	r2, #8
 8002574:	409a      	lsls	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01a      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0204 	bic.w	r2, r2, #4
 800259a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	2208      	movs	r2, #8
 80025a2:	409a      	lsls	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2201      	movs	r2, #1
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d012      	beq.n	80025ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	2201      	movs	r2, #1
 80025d8:	409a      	lsls	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	f043 0202 	orr.w	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2204      	movs	r2, #4
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d012      	beq.n	8002620 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2204      	movs	r2, #4
 800260e:	409a      	lsls	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	f043 0204 	orr.w	r2, r3, #4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2210      	movs	r2, #16
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d043      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d03c      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2210      	movs	r2, #16
 8002644:	409a      	lsls	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d018      	beq.n	800268a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d024      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
 8002676:	e01f      	b.n	80026b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01b      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
 8002688:	e016      	b.n	80026b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0208 	bic.w	r2, r2, #8
 80026a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	2220      	movs	r2, #32
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 808f 	beq.w	80027e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8087 	beq.w	80027e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	2220      	movs	r2, #32
 80026e0:	409a      	lsls	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d136      	bne.n	8002760 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0216 	bic.w	r2, r2, #22
 8002700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_DMA_IRQHandler+0x1da>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0208 	bic.w	r2, r2, #8
 8002730:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	223f      	movs	r2, #63	; 0x3f
 8002738:	409a      	lsls	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002752:	2b00      	cmp	r3, #0
 8002754:	d07e      	beq.n	8002854 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
        }
        return;
 800275e:	e079      	b.n	8002854 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01d      	beq.n	80027aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10d      	bne.n	8002798 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	2b00      	cmp	r3, #0
 8002782:	d031      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
 800278c:	e02c      	b.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
 800278e:	bf00      	nop
 8002790:	20000000 	.word	0x20000000
 8002794:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d023      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
 80027a8:	e01e      	b.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0210 	bic.w	r2, r2, #16
 80027c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d032      	beq.n	8002856 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2205      	movs	r2, #5
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	429a      	cmp	r2, r3
 800281e:	d307      	bcc.n	8002830 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f2      	bne.n	8002814 <HAL_DMA_IRQHandler+0x2cc>
 800282e:	e000      	b.n	8002832 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002830:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
 8002852:	e000      	b.n	8002856 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002854:	bf00      	nop
    }
  }
}
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002878:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d108      	bne.n	800289c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800289a:	e007      	b.n	80028ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	60da      	str	r2, [r3, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	3b10      	subs	r3, #16
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <DMA_CalcBaseAndBitshift+0x64>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028d2:	4a13      	ldr	r2, [pc, #76]	; (8002920 <DMA_CalcBaseAndBitshift+0x68>)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d909      	bls.n	80028fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ee:	f023 0303 	bic.w	r3, r3, #3
 80028f2:	1d1a      	adds	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	659a      	str	r2, [r3, #88]	; 0x58
 80028f8:	e007      	b.n	800290a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002902:	f023 0303 	bic.w	r3, r3, #3
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	aaaaaaab 	.word	0xaaaaaaab
 8002920:	08005a68 	.word	0x08005a68

08002924 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d11f      	bne.n	800297e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d856      	bhi.n	80029f2 <DMA_CheckFifoParam+0xce>
 8002944:	a201      	add	r2, pc, #4	; (adr r2, 800294c <DMA_CheckFifoParam+0x28>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	0800295d 	.word	0x0800295d
 8002950:	0800296f 	.word	0x0800296f
 8002954:	0800295d 	.word	0x0800295d
 8002958:	080029f3 	.word	0x080029f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d046      	beq.n	80029f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296c:	e043      	b.n	80029f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002976:	d140      	bne.n	80029fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800297c:	e03d      	b.n	80029fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002986:	d121      	bne.n	80029cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d837      	bhi.n	80029fe <DMA_CheckFifoParam+0xda>
 800298e:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <DMA_CheckFifoParam+0x70>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029ab 	.word	0x080029ab
 800299c:	080029a5 	.word	0x080029a5
 80029a0:	080029bd 	.word	0x080029bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      break;
 80029a8:	e030      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d025      	beq.n	8002a02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ba:	e022      	b.n	8002a02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029c4:	d11f      	bne.n	8002a06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029ca:	e01c      	b.n	8002a06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d903      	bls.n	80029da <DMA_CheckFifoParam+0xb6>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d003      	beq.n	80029e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029d8:	e018      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      break;
 80029de:	e015      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00e      	beq.n	8002a0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      break;
 80029f0:	e00b      	b.n	8002a0a <DMA_CheckFifoParam+0xe6>
      break;
 80029f2:	bf00      	nop
 80029f4:	e00a      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;
 80029f6:	bf00      	nop
 80029f8:	e008      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;
 80029fa:	bf00      	nop
 80029fc:	e006      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;
 80029fe:	bf00      	nop
 8002a00:	e004      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;
 8002a02:	bf00      	nop
 8002a04:	e002      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <DMA_CheckFifoParam+0xe8>
      break;
 8002a0a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e159      	b.n	8002cec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	f040 8148 	bne.w	8002ce6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d005      	beq.n	8002a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d130      	bne.n	8002ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 0201 	and.w	r2, r3, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d017      	beq.n	8002b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d123      	bne.n	8002b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	08da      	lsrs	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3208      	adds	r2, #8
 8002b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	220f      	movs	r2, #15
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	08da      	lsrs	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	69b9      	ldr	r1, [r7, #24]
 8002b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0203 	and.w	r2, r3, #3
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a2 	beq.w	8002ce6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a56      	ldr	r2, [pc, #344]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bbe:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a49      	ldr	r2, [pc, #292]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x202>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a48      	ldr	r2, [pc, #288]	; (8002d10 <HAL_GPIO_Init+0x2f4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x1fe>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a47      	ldr	r2, [pc, #284]	; (8002d14 <HAL_GPIO_Init+0x2f8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x1fa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a46      	ldr	r2, [pc, #280]	; (8002d18 <HAL_GPIO_Init+0x2fc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x1f6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a45      	ldr	r2, [pc, #276]	; (8002d1c <HAL_GPIO_Init+0x300>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x1f2>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c0e:	2307      	movs	r3, #7
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	; (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a2f      	ldr	r2, [pc, #188]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c92:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb6:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	f67f aea2 	bls.w	8002a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	; 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
 8002d30:	4613      	mov	r3, r2
 8002d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d34:	787b      	ldrb	r3, [r7, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d40:	e003      	b.n	8002d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d42:	887b      	ldrh	r3, [r7, #2]
 8002d44:	041a      	lsls	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	619a      	str	r2, [r3, #24]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d68:	887a      	ldrh	r2, [r7, #2]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	041a      	lsls	r2, r3, #16
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	400b      	ands	r3, r1
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002da2:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fc38 	bl	8000620 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40013c00 	.word	0x40013c00

08002dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e12b      	b.n	8003026 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fa22 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2224      	movs	r2, #36	; 0x24
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e20:	f001 f888 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8002e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4a81      	ldr	r2, [pc, #516]	; (8003030 <HAL_I2C_Init+0x274>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d807      	bhi.n	8002e40 <HAL_I2C_Init+0x84>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a80      	ldr	r2, [pc, #512]	; (8003034 <HAL_I2C_Init+0x278>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	bf94      	ite	ls
 8002e38:	2301      	movls	r3, #1
 8002e3a:	2300      	movhi	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e006      	b.n	8002e4e <HAL_I2C_Init+0x92>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a7d      	ldr	r2, [pc, #500]	; (8003038 <HAL_I2C_Init+0x27c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	bf94      	ite	ls
 8002e48:	2301      	movls	r3, #1
 8002e4a:	2300      	movhi	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0e7      	b.n	8003026 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a78      	ldr	r2, [pc, #480]	; (800303c <HAL_I2C_Init+0x280>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0c9b      	lsrs	r3, r3, #18
 8002e60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4a6a      	ldr	r2, [pc, #424]	; (8003030 <HAL_I2C_Init+0x274>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d802      	bhi.n	8002e90 <HAL_I2C_Init+0xd4>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	e009      	b.n	8002ea4 <HAL_I2C_Init+0xe8>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	4a69      	ldr	r2, [pc, #420]	; (8003040 <HAL_I2C_Init+0x284>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	099b      	lsrs	r3, r3, #6
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	495c      	ldr	r1, [pc, #368]	; (8003030 <HAL_I2C_Init+0x274>)
 8002ec0:	428b      	cmp	r3, r1
 8002ec2:	d819      	bhi.n	8002ef8 <HAL_I2C_Init+0x13c>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1e59      	subs	r1, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ed2:	1c59      	adds	r1, r3, #1
 8002ed4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ed8:	400b      	ands	r3, r1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_I2C_Init+0x138>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1e59      	subs	r1, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eec:	3301      	adds	r3, #1
 8002eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef2:	e051      	b.n	8002f98 <HAL_I2C_Init+0x1dc>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	e04f      	b.n	8002f98 <HAL_I2C_Init+0x1dc>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d111      	bne.n	8002f24 <HAL_I2C_Init+0x168>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1e58      	subs	r0, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e012      	b.n	8002f4a <HAL_I2C_Init+0x18e>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e58      	subs	r0, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	0099      	lsls	r1, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Init+0x196>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e022      	b.n	8002f98 <HAL_I2C_Init+0x1dc>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10e      	bne.n	8002f78 <HAL_I2C_Init+0x1bc>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1e58      	subs	r0, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6859      	ldr	r1, [r3, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	440b      	add	r3, r1
 8002f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f76:	e00f      	b.n	8002f98 <HAL_I2C_Init+0x1dc>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	0099      	lsls	r1, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	6809      	ldr	r1, [r1, #0]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69da      	ldr	r2, [r3, #28]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6911      	ldr	r1, [r2, #16]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68d2      	ldr	r2, [r2, #12]
 8002fd2:	4311      	orrs	r1, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	000186a0 	.word	0x000186a0
 8003034:	001e847f 	.word	0x001e847f
 8003038:	003d08ff 	.word	0x003d08ff
 800303c:	431bde83 	.word	0x431bde83
 8003040:	10624dd3 	.word	0x10624dd3

08003044 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	461a      	mov	r2, r3
 8003050:	460b      	mov	r3, r1
 8003052:	817b      	strh	r3, [r7, #10]
 8003054:	4613      	mov	r3, r2
 8003056:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7fe fae0 	bl	800161c <HAL_GetTick>
 800305c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b20      	cmp	r3, #32
 8003068:	f040 80e0 	bne.w	800322c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2319      	movs	r3, #25
 8003072:	2201      	movs	r2, #1
 8003074:	4970      	ldr	r1, [pc, #448]	; (8003238 <HAL_I2C_Master_Transmit+0x1f4>)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f964 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	e0d3      	b.n	800322e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_I2C_Master_Transmit+0x50>
 8003090:	2302      	movs	r3, #2
 8003092:	e0cc      	b.n	800322e <HAL_I2C_Master_Transmit+0x1ea>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d007      	beq.n	80030ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2221      	movs	r2, #33	; 0x21
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2210      	movs	r2, #16
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	893a      	ldrh	r2, [r7, #8]
 80030ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a50      	ldr	r2, [pc, #320]	; (800323c <HAL_I2C_Master_Transmit+0x1f8>)
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030fc:	8979      	ldrh	r1, [r7, #10]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	6a3a      	ldr	r2, [r7, #32]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f89c 	bl	8003240 <I2C_MasterRequestWrite>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e08d      	b.n	800322e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003128:	e066      	b.n	80031f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f9de 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b04      	cmp	r3, #4
 8003140:	d107      	bne.n	8003152 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003150:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e06b      	b.n	800322e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b04      	cmp	r3, #4
 8003192:	d11b      	bne.n	80031cc <HAL_I2C_Master_Transmit+0x188>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	2b00      	cmp	r3, #0
 800319a:	d017      	beq.n	80031cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	6a39      	ldr	r1, [r7, #32]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f9ce 	bl	8003572 <I2C_WaitOnBTFFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00d      	beq.n	80031f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d107      	bne.n	80031f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e01a      	b.n	800322e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d194      	bne.n	800312a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	00100002 	.word	0x00100002
 800323c:	ffff0000 	.word	0xffff0000

08003240 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	460b      	mov	r3, r1
 800324e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d006      	beq.n	800326a <I2C_MasterRequestWrite+0x2a>
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d003      	beq.n	800326a <I2C_MasterRequestWrite+0x2a>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003268:	d108      	bne.n	800327c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e00b      	b.n	8003294 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	2b12      	cmp	r3, #18
 8003282:	d107      	bne.n	8003294 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003292:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f84f 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ba:	d103      	bne.n	80032c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e035      	b.n	8003334 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d0:	d108      	bne.n	80032e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032d2:	897b      	ldrh	r3, [r7, #10]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032e0:	611a      	str	r2, [r3, #16]
 80032e2:	e01b      	b.n	800331c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032e4:	897b      	ldrh	r3, [r7, #10]
 80032e6:	11db      	asrs	r3, r3, #7
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 0306 	and.w	r3, r3, #6
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f063 030f 	orn	r3, r3, #15
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	490e      	ldr	r1, [pc, #56]	; (800333c <I2C_MasterRequestWrite+0xfc>)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f875 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e010      	b.n	8003334 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4907      	ldr	r1, [pc, #28]	; (8003340 <I2C_MasterRequestWrite+0x100>)
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f865 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	00010008 	.word	0x00010008
 8003340:	00010002 	.word	0x00010002

08003344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003354:	e025      	b.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d021      	beq.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335e:	f7fe f95d 	bl	800161c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e023      	b.n	80033ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10d      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	e00c      	b.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4013      	ands	r3, r2
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d0b6      	beq.n	8003356 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003400:	e051      	b.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	d123      	bne.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0204 	orr.w	r2, r3, #4
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e046      	b.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d021      	beq.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe f8db 	bl	800161c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d116      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e020      	b.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	0c1b      	lsrs	r3, r3, #16
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10c      	bne.n	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4013      	ands	r3, r2
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	e00b      	b.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d18d      	bne.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034fc:	e02d      	b.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f878 	bl	80035f4 <I2C_IsAcknowledgeFailed>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e02d      	b.n	800356a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d021      	beq.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003516:	f7fe f881 	bl	800161c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	429a      	cmp	r2, r3
 8003524:	d302      	bcc.n	800352c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d116      	bne.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e007      	b.n	800356a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	2b80      	cmp	r3, #128	; 0x80
 8003566:	d1ca      	bne.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800357e:	e02d      	b.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f837 	bl	80035f4 <I2C_IsAcknowledgeFailed>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e02d      	b.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d021      	beq.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003598:	f7fe f840 	bl	800161c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d302      	bcc.n	80035ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e007      	b.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d1ca      	bne.n	8003580 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360a:	d11b      	bne.n	8003644 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003614:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f043 0204 	orr.w	r2, r3, #4
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e267      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d075      	beq.n	800375e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003672:	4b88      	ldr	r3, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b04      	cmp	r3, #4
 800367c:	d00c      	beq.n	8003698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367e:	4b85      	ldr	r3, [pc, #532]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d112      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368a:	4b82      	ldr	r3, [pc, #520]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003696:	d10b      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	4b7e      	ldr	r3, [pc, #504]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d05b      	beq.n	800375c <HAL_RCC_OscConfig+0x108>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d157      	bne.n	800375c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e242      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d106      	bne.n	80036c8 <HAL_RCC_OscConfig+0x74>
 80036ba:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a75      	ldr	r2, [pc, #468]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e01d      	b.n	8003704 <HAL_RCC_OscConfig+0xb0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x98>
 80036d2:	4b70      	ldr	r3, [pc, #448]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6f      	ldr	r2, [pc, #444]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b6d      	ldr	r3, [pc, #436]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6c      	ldr	r2, [pc, #432]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0xb0>
 80036ec:	4b69      	ldr	r3, [pc, #420]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a68      	ldr	r2, [pc, #416]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b66      	ldr	r3, [pc, #408]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a65      	ldr	r2, [pc, #404]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fd ff86 	bl	800161c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003714:	f7fd ff82 	bl	800161c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e207      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b5b      	ldr	r3, [pc, #364]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0xc0>
 8003732:	e014      	b.n	800375e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd ff72 	bl	800161c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd ff6e 	bl	800161c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1f3      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	4b51      	ldr	r3, [pc, #324]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0xe8>
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d063      	beq.n	8003832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376a:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800377e:	2b08      	cmp	r3, #8
 8003780:	d11c      	bne.n	80037bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003782:	4b44      	ldr	r3, [pc, #272]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d116      	bne.n	80037bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	4b41      	ldr	r3, [pc, #260]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_RCC_OscConfig+0x152>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e1c7      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4937      	ldr	r1, [pc, #220]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	e03a      	b.n	8003832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c4:	4b34      	ldr	r3, [pc, #208]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd ff27 	bl	800161c <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d2:	f7fd ff23 	bl	800161c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1a8      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b28      	ldr	r3, [pc, #160]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4925      	ldr	r1, [pc, #148]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]
 8003804:	e015      	b.n	8003832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd ff06 	bl	800161c <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003814:	f7fd ff02 	bl	800161c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e187      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d036      	beq.n	80038ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <HAL_RCC_OscConfig+0x248>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fd fee6 	bl	800161c <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003854:	f7fd fee2 	bl	800161c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e167      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x200>
 8003872:	e01b      	b.n	80038ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_RCC_OscConfig+0x248>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387a:	f7fd fecf 	bl	800161c <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003880:	e00e      	b.n	80038a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003882:	f7fd fecb 	bl	800161c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d907      	bls.n	80038a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e150      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
 8003894:	40023800 	.word	0x40023800
 8003898:	42470000 	.word	0x42470000
 800389c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a0:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ea      	bne.n	8003882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8097 	beq.w	80039e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038be:	4b81      	ldr	r3, [pc, #516]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a7c      	ldr	r2, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b7a      	ldr	r3, [pc, #488]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4b77      	ldr	r3, [pc, #476]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f6:	4b74      	ldr	r3, [pc, #464]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a73      	ldr	r2, [pc, #460]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003902:	f7fd fe8b 	bl	800161c <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390a:	f7fd fe87 	bl	800161c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e10c      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x2ea>
 8003930:	4b64      	ldr	r3, [pc, #400]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a63      	ldr	r2, [pc, #396]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
 800393c:	e01c      	b.n	8003978 <HAL_RCC_OscConfig+0x324>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b05      	cmp	r3, #5
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x30c>
 8003946:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	4a5e      	ldr	r2, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 800394c:	f043 0304 	orr.w	r3, r3, #4
 8003950:	6713      	str	r3, [r2, #112]	; 0x70
 8003952:	4b5c      	ldr	r3, [pc, #368]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a5b      	ldr	r2, [pc, #364]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
 800395e:	e00b      	b.n	8003978 <HAL_RCC_OscConfig+0x324>
 8003960:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a57      	ldr	r2, [pc, #348]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
 800396c:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a54      	ldr	r2, [pc, #336]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003972:	f023 0304 	bic.w	r3, r3, #4
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd fe4c 	bl	800161c <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fd fe48 	bl	800161c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e0cb      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399e:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0ee      	beq.n	8003988 <HAL_RCC_OscConfig+0x334>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ac:	f7fd fe36 	bl	800161c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fd fe32 	bl	800161c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0b5      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ca:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1ee      	bne.n	80039b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d105      	bne.n	80039e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039dc:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	4a38      	ldr	r2, [pc, #224]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a1 	beq.w	8003b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039f2:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d05c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d141      	bne.n	8003a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a06:	4b31      	ldr	r3, [pc, #196]	; (8003acc <HAL_RCC_OscConfig+0x478>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fe06 	bl	800161c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fd fe02 	bl	800161c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e087      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x478>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fd fddb 	bl	800161c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fd fdd7 	bl	800161c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e05c      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x416>
 8003a88:	e054      	b.n	8003b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCC_OscConfig+0x478>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd fdc4 	bl	800161c <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd fdc0 	bl	800161c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e045      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x444>
 8003ab6:	e03d      	b.n	8003b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e038      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x4ec>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d028      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d121      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d11a      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d111      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800

08003b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0cc      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b58:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d90c      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b63      	ldr	r3, [pc, #396]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0b8      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b98:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4a58      	ldr	r2, [pc, #352]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb0:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a52      	ldr	r2, [pc, #328]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	494d      	ldr	r1, [pc, #308]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d044      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d119      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e07f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e06f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c12:	4b3b      	ldr	r3, [pc, #236]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e067      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c22:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f023 0203 	bic.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4934      	ldr	r1, [pc, #208]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c34:	f7fd fcf2 	bl	800161c <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3c:	f7fd fcee 	bl	800161c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e04f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 020c 	and.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1eb      	bne.n	8003c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d20c      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e032      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4916      	ldr	r1, [pc, #88]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb6:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	490e      	ldr	r1, [pc, #56]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cca:	f000 f821 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	490a      	ldr	r1, [pc, #40]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	5ccb      	ldrb	r3, [r1, r3]
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd fc52 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023c00 	.word	0x40023c00
 8003d00:	40023800 	.word	0x40023800
 8003d04:	08005a50 	.word	0x08005a50
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	20000004 	.word	0x20000004

08003d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b094      	sub	sp, #80	; 0x50
 8003d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d20:	2300      	movs	r3, #0
 8003d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d28:	4b79      	ldr	r3, [pc, #484]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d00d      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x40>
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	f200 80e1 	bhi.w	8003efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d42:	e0db      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b73      	ldr	r3, [pc, #460]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d48:	e0db      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4a:	4b73      	ldr	r3, [pc, #460]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d4e:	e0d8      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d50:	4b6f      	ldr	r3, [pc, #444]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d5a:	4b6d      	ldr	r3, [pc, #436]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d063      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d66:	4b6a      	ldr	r3, [pc, #424]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	f04f 0000 	mov.w	r0, #0
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	0159      	lsls	r1, r3, #5
 8003d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d94:	0150      	lsls	r0, r2, #5
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	1a51      	subs	r1, r2, r1
 8003d9e:	6139      	str	r1, [r7, #16]
 8003da0:	4629      	mov	r1, r5
 8003da2:	eb63 0301 	sbc.w	r3, r3, r1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003db4:	4659      	mov	r1, fp
 8003db6:	018b      	lsls	r3, r1, #6
 8003db8:	4651      	mov	r1, sl
 8003dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	018a      	lsls	r2, r1, #6
 8003dc2:	4651      	mov	r1, sl
 8003dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8003dc8:	4659      	mov	r1, fp
 8003dca:	eb63 0901 	sbc.w	r9, r3, r1
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003de2:	4690      	mov	r8, r2
 8003de4:	4699      	mov	r9, r3
 8003de6:	4623      	mov	r3, r4
 8003de8:	eb18 0303 	adds.w	r3, r8, r3
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	462b      	mov	r3, r5
 8003df0:	eb49 0303 	adc.w	r3, r9, r3
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e02:	4629      	mov	r1, r5
 8003e04:	024b      	lsls	r3, r1, #9
 8003e06:	4621      	mov	r1, r4
 8003e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	024a      	lsls	r2, r1, #9
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e16:	2200      	movs	r2, #0
 8003e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e20:	f7fc fa36 	bl	8000290 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4613      	mov	r3, r2
 8003e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e2c:	e058      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2e:	4b38      	ldr	r3, [pc, #224]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	099b      	lsrs	r3, r3, #6
 8003e34:	2200      	movs	r2, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	4611      	mov	r1, r2
 8003e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e3e:	623b      	str	r3, [r7, #32]
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
 8003e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e48:	4642      	mov	r2, r8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	f04f 0000 	mov.w	r0, #0
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	0159      	lsls	r1, r3, #5
 8003e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e5a:	0150      	lsls	r0, r2, #5
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4641      	mov	r1, r8
 8003e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e66:	4649      	mov	r1, r9
 8003e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e80:	ebb2 040a 	subs.w	r4, r2, sl
 8003e84:	eb63 050b 	sbc.w	r5, r3, fp
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	00eb      	lsls	r3, r5, #3
 8003e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e96:	00e2      	lsls	r2, r4, #3
 8003e98:	4614      	mov	r4, r2
 8003e9a:	461d      	mov	r5, r3
 8003e9c:	4643      	mov	r3, r8
 8003e9e:	18e3      	adds	r3, r4, r3
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	eb45 0303 	adc.w	r3, r5, r3
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	028b      	lsls	r3, r1, #10
 8003eba:	4621      	mov	r1, r4
 8003ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	028a      	lsls	r2, r1, #10
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	61fa      	str	r2, [r7, #28]
 8003ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ed4:	f7fc f9dc 	bl	8000290 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4613      	mov	r3, r2
 8003ede:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	3301      	adds	r3, #1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003efe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3750      	adds	r7, #80	; 0x50
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	007a1200 	.word	0x007a1200

08003f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20000000 	.word	0x20000000

08003f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f38:	f7ff fff0 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0a9b      	lsrs	r3, r3, #10
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4903      	ldr	r1, [pc, #12]	; (8003f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	08005a60 	.word	0x08005a60

08003f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e041      	b.n	8003ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd f99a 	bl	80012bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 fc96 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e044      	b.n	800409e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <HAL_TIM_Base_Start_IT+0xb0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d018      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x6c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403e:	d013      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x6c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00e      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x6c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a19      	ldr	r2, [pc, #100]	; (80040b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d009      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x6c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x6c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a16      	ldr	r2, [pc, #88]	; (80040bc <HAL_TIM_Base_Start_IT+0xc0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d111      	bne.n	800408c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b06      	cmp	r3, #6
 8004078:	d010      	beq.n	800409c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408a:	e007      	b.n	800409c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	40014000 	.word	0x40014000

080040c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e041      	b.n	8004156 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f839 	bl	800415e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f000 fbe4 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	6839      	ldr	r1, [r7, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fe46 	bl	8004e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a29      	ldr	r2, [pc, #164]	; (8004238 <HAL_TIM_OC_Stop+0xc4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d117      	bne.n	80041c6 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	f241 1311 	movw	r3, #4369	; 0x1111
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <HAL_TIM_OC_Stop+0x52>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6a1a      	ldr	r2, [r3, #32]
 80041ac:	f240 4344 	movw	r3, #1092	; 0x444
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d107      	bne.n	80041c6 <HAL_TIM_OC_Stop+0x52>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6a1a      	ldr	r2, [r3, #32]
 80041cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10f      	bne.n	80041f6 <HAL_TIM_OC_Stop+0x82>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a1a      	ldr	r2, [r3, #32]
 80041dc:	f240 4344 	movw	r3, #1092	; 0x444
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d107      	bne.n	80041f6 <HAL_TIM_OC_Stop+0x82>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_OC_Stop+0x92>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004204:	e013      	b.n	800422e <HAL_TIM_OC_Stop+0xba>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b04      	cmp	r3, #4
 800420a:	d104      	bne.n	8004216 <HAL_TIM_OC_Stop+0xa2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004214:	e00b      	b.n	800422e <HAL_TIM_OC_Stop+0xba>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d104      	bne.n	8004226 <HAL_TIM_OC_Stop+0xb2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004224:	e003      	b.n	800422e <HAL_TIM_OC_Stop+0xba>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40010000 	.word	0x40010000

0800423c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d109      	bne.n	8004264 <HAL_TIM_OC_Start_IT+0x28>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e022      	b.n	80042aa <HAL_TIM_OC_Start_IT+0x6e>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b04      	cmp	r3, #4
 8004268:	d109      	bne.n	800427e <HAL_TIM_OC_Start_IT+0x42>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e015      	b.n	80042aa <HAL_TIM_OC_Start_IT+0x6e>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d109      	bne.n	8004298 <HAL_TIM_OC_Start_IT+0x5c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e008      	b.n	80042aa <HAL_TIM_OC_Start_IT+0x6e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0b3      	b.n	800441a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d104      	bne.n	80042c2 <HAL_TIM_OC_Start_IT+0x86>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c0:	e013      	b.n	80042ea <HAL_TIM_OC_Start_IT+0xae>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d104      	bne.n	80042d2 <HAL_TIM_OC_Start_IT+0x96>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d0:	e00b      	b.n	80042ea <HAL_TIM_OC_Start_IT+0xae>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_OC_Start_IT+0xa6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e0:	e003      	b.n	80042ea <HAL_TIM_OC_Start_IT+0xae>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d841      	bhi.n	8004374 <HAL_TIM_OC_Start_IT+0x138>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <HAL_TIM_OC_Start_IT+0xbc>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	08004375 	.word	0x08004375
 8004300:	08004375 	.word	0x08004375
 8004304:	08004375 	.word	0x08004375
 8004308:	0800433f 	.word	0x0800433f
 800430c:	08004375 	.word	0x08004375
 8004310:	08004375 	.word	0x08004375
 8004314:	08004375 	.word	0x08004375
 8004318:	08004351 	.word	0x08004351
 800431c:	08004375 	.word	0x08004375
 8004320:	08004375 	.word	0x08004375
 8004324:	08004375 	.word	0x08004375
 8004328:	08004363 	.word	0x08004363
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0202 	orr.w	r2, r2, #2
 800433a:	60da      	str	r2, [r3, #12]
      break;
 800433c:	e01d      	b.n	800437a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0204 	orr.w	r2, r2, #4
 800434c:	60da      	str	r2, [r3, #12]
      break;
 800434e:	e014      	b.n	800437a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0208 	orr.w	r2, r2, #8
 800435e:	60da      	str	r2, [r3, #12]
      break;
 8004360:	e00b      	b.n	800437a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0210 	orr.w	r2, r2, #16
 8004370:	60da      	str	r2, [r3, #12]
      break;
 8004372:	e002      	b.n	800437a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      break;
 8004378:	bf00      	nop
  }

  if (status == HAL_OK)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d14b      	bne.n	8004418 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	6839      	ldr	r1, [r7, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fd45 	bl	8004e18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a24      	ldr	r2, [pc, #144]	; (8004424 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d107      	bne.n	80043a8 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_TIM_OC_Start_IT+0x1e8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d013      	beq.n	80043e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a19      	ldr	r2, [pc, #100]	; (8004428 <HAL_TIM_OC_Start_IT+0x1ec>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_TIM_OC_Start_IT+0x1f0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a16      	ldr	r2, [pc, #88]	; (8004430 <HAL_TIM_OC_Start_IT+0x1f4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a15      	ldr	r2, [pc, #84]	; (8004434 <HAL_TIM_OC_Start_IT+0x1f8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d111      	bne.n	8004408 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b06      	cmp	r3, #6
 80043f4:	d010      	beq.n	8004418 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004406:	e007      	b.n	8004418 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40010000 	.word	0x40010000
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	40000c00 	.word	0x40000c00
 8004434:	40014000 	.word	0x40014000

08004438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b02      	cmp	r3, #2
 800444c:	d122      	bne.n	8004494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b02      	cmp	r3, #2
 800445a:	d11b      	bne.n	8004494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0202 	mvn.w	r2, #2
 8004464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fa07 	bl	800488e <HAL_TIM_IC_CaptureCallback>
 8004480:	e005      	b.n	800448e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc f8ee 	bl	8000664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fa0a 	bl	80048a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d122      	bne.n	80044e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d11b      	bne.n	80044e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0204 	mvn.w	r2, #4
 80044b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f9dd 	bl	800488e <HAL_TIM_IC_CaptureCallback>
 80044d4:	e005      	b.n	80044e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc f8c4 	bl	8000664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f9e0 	bl	80048a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b08      	cmp	r3, #8
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0208 	mvn.w	r2, #8
 800450c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2204      	movs	r2, #4
 8004512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f9b3 	bl	800488e <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc f89a 	bl	8000664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f9b6 	bl	80048a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b10      	cmp	r3, #16
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b10      	cmp	r3, #16
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0210 	mvn.w	r2, #16
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2208      	movs	r2, #8
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f989 	bl	800488e <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc f870 	bl	8000664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f98c 	bl	80048a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10e      	bne.n	80045bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0201 	mvn.w	r2, #1
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc f87a 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d10e      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b80      	cmp	r3, #128	; 0x80
 80045d6:	d107      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fd08 	bl	8004ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d10e      	bne.n	8004614 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d107      	bne.n	8004614 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f951 	bl	80048b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b20      	cmp	r3, #32
 8004620:	d10e      	bne.n	8004640 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b20      	cmp	r3, #32
 800462e:	d107      	bne.n	8004640 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0220 	mvn.w	r2, #32
 8004638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fcd2 	bl	8004fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004662:	2302      	movs	r3, #2
 8004664:	e048      	b.n	80046f8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d839      	bhi.n	80046e8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	080046b1 	.word	0x080046b1
 8004680:	080046e9 	.word	0x080046e9
 8004684:	080046e9 	.word	0x080046e9
 8004688:	080046e9 	.word	0x080046e9
 800468c:	080046bf 	.word	0x080046bf
 8004690:	080046e9 	.word	0x080046e9
 8004694:	080046e9 	.word	0x080046e9
 8004698:	080046e9 	.word	0x080046e9
 800469c:	080046cd 	.word	0x080046cd
 80046a0:	080046e9 	.word	0x080046e9
 80046a4:	080046e9 	.word	0x080046e9
 80046a8:	080046e9 	.word	0x080046e9
 80046ac:	080046db 	.word	0x080046db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 f988 	bl	80049cc <TIM_OC1_SetConfig>
      break;
 80046bc:	e017      	b.n	80046ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f9e7 	bl	8004a98 <TIM_OC2_SetConfig>
      break;
 80046ca:	e010      	b.n	80046ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fa4c 	bl	8004b70 <TIM_OC3_SetConfig>
      break;
 80046d8:	e009      	b.n	80046ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 faaf 	bl	8004c44 <TIM_OC4_SetConfig>
      break;
 80046e6:	e002      	b.n	80046ee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	75fb      	strb	r3, [r7, #23]
      break;
 80046ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIM_ConfigClockSource+0x1c>
 8004718:	2302      	movs	r3, #2
 800471a:	e0b4      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x186>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800473a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d03e      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475a:	f200 8087 	bhi.w	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	f000 8086 	beq.w	8004872 <HAL_TIM_ConfigClockSource+0x172>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	d87f      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b70      	cmp	r3, #112	; 0x70
 800476e:	d01a      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004770:	2b70      	cmp	r3, #112	; 0x70
 8004772:	d87b      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b60      	cmp	r3, #96	; 0x60
 8004776:	d050      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x11a>
 8004778:	2b60      	cmp	r3, #96	; 0x60
 800477a:	d877      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b50      	cmp	r3, #80	; 0x50
 800477e:	d03c      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0xfa>
 8004780:	2b50      	cmp	r3, #80	; 0x50
 8004782:	d873      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d058      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x13a>
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d86f      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b30      	cmp	r3, #48	; 0x30
 800478e:	d064      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 8004790:	2b30      	cmp	r3, #48	; 0x30
 8004792:	d86b      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d060      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	2b20      	cmp	r3, #32
 800479a:	d867      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05c      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d05a      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 80047a4:	e062      	b.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f000 fb0f 	bl	8004dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	609a      	str	r2, [r3, #8]
      break;
 80047d2:	e04f      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6899      	ldr	r1, [r3, #8]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f000 faf8 	bl	8004dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f6:	609a      	str	r2, [r3, #8]
      break;
 80047f8:	e03c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	461a      	mov	r2, r3
 8004808:	f000 fa6c 	bl	8004ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2150      	movs	r1, #80	; 0x50
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fac5 	bl	8004da2 <TIM_ITRx_SetConfig>
      break;
 8004818:	e02c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	461a      	mov	r2, r3
 8004828:	f000 fa8b 	bl	8004d42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2160      	movs	r1, #96	; 0x60
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fab5 	bl	8004da2 <TIM_ITRx_SetConfig>
      break;
 8004838:	e01c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	f000 fa4c 	bl	8004ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2140      	movs	r1, #64	; 0x40
 8004852:	4618      	mov	r0, r3
 8004854:	f000 faa5 	bl	8004da2 <TIM_ITRx_SetConfig>
      break;
 8004858:	e00c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f000 fa9c 	bl	8004da2 <TIM_ITRx_SetConfig>
      break;
 800486a:	e003      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
      break;
 8004870:	e000      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a34      	ldr	r2, [pc, #208]	; (80049b0 <TIM_Base_SetConfig+0xe4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00f      	beq.n	8004904 <TIM_Base_SetConfig+0x38>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d00b      	beq.n	8004904 <TIM_Base_SetConfig+0x38>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a31      	ldr	r2, [pc, #196]	; (80049b4 <TIM_Base_SetConfig+0xe8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_Base_SetConfig+0x38>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a30      	ldr	r2, [pc, #192]	; (80049b8 <TIM_Base_SetConfig+0xec>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_Base_SetConfig+0x38>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a2f      	ldr	r2, [pc, #188]	; (80049bc <TIM_Base_SetConfig+0xf0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d108      	bne.n	8004916 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <TIM_Base_SetConfig+0xe4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01b      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d017      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <TIM_Base_SetConfig+0xe8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <TIM_Base_SetConfig+0xec>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00f      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a20      	ldr	r2, [pc, #128]	; (80049bc <TIM_Base_SetConfig+0xf0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00b      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a1f      	ldr	r2, [pc, #124]	; (80049c0 <TIM_Base_SetConfig+0xf4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <TIM_Base_SetConfig+0xf8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d003      	beq.n	8004956 <TIM_Base_SetConfig+0x8a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <TIM_Base_SetConfig+0xfc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d108      	bne.n	8004968 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <TIM_Base_SetConfig+0xe4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d103      	bne.n	800499c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	615a      	str	r2, [r3, #20]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800

080049cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f023 0201 	bic.w	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f023 0302 	bic.w	r3, r3, #2
 8004a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <TIM_OC1_SetConfig+0xc8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d10c      	bne.n	8004a42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 0308 	bic.w	r3, r3, #8
 8004a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <TIM_OC1_SetConfig+0xc8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d111      	bne.n	8004a6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40010000 	.word	0x40010000

08004a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0210 	bic.w	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0320 	bic.w	r3, r3, #32
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a1e      	ldr	r2, [pc, #120]	; (8004b6c <TIM_OC2_SetConfig+0xd4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10d      	bne.n	8004b14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <TIM_OC2_SetConfig+0xd4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d113      	bne.n	8004b44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40010000 	.word	0x40010000

08004b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0303 	bic.w	r3, r3, #3
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <TIM_OC3_SetConfig+0xd0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d10d      	bne.n	8004bea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <TIM_OC3_SetConfig+0xd0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d113      	bne.n	8004c1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	621a      	str	r2, [r3, #32]
}
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	40010000 	.word	0x40010000

08004c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	031b      	lsls	r3, r3, #12
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <TIM_OC4_SetConfig+0x9c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d109      	bne.n	8004cb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	019b      	lsls	r3, r3, #6
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40010000 	.word	0x40010000

08004ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f023 0201 	bic.w	r2, r3, #1
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f023 030a 	bic.w	r3, r3, #10
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f023 0210 	bic.w	r2, r3, #16
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	031b      	lsls	r3, r3, #12
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f043 0307 	orr.w	r3, r3, #7
 8004dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	609a      	str	r2, [r3, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1a      	ldr	r2, [r3, #32]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	431a      	orrs	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e050      	b.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1c      	ldr	r2, [pc, #112]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d018      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec8:	d013      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a18      	ldr	r2, [pc, #96]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a16      	ldr	r2, [pc, #88]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d10c      	bne.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40014000 	.word	0x40014000

08004f40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e03d      	b.n	8004fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <__errno>:
 800500c:	4b01      	ldr	r3, [pc, #4]	; (8005014 <__errno+0x8>)
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	2000000c 	.word	0x2000000c

08005018 <__libc_init_array>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	4d0d      	ldr	r5, [pc, #52]	; (8005050 <__libc_init_array+0x38>)
 800501c:	4c0d      	ldr	r4, [pc, #52]	; (8005054 <__libc_init_array+0x3c>)
 800501e:	1b64      	subs	r4, r4, r5
 8005020:	10a4      	asrs	r4, r4, #2
 8005022:	2600      	movs	r6, #0
 8005024:	42a6      	cmp	r6, r4
 8005026:	d109      	bne.n	800503c <__libc_init_array+0x24>
 8005028:	4d0b      	ldr	r5, [pc, #44]	; (8005058 <__libc_init_array+0x40>)
 800502a:	4c0c      	ldr	r4, [pc, #48]	; (800505c <__libc_init_array+0x44>)
 800502c:	f000 fc9c 	bl	8005968 <_init>
 8005030:	1b64      	subs	r4, r4, r5
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	2600      	movs	r6, #0
 8005036:	42a6      	cmp	r6, r4
 8005038:	d105      	bne.n	8005046 <__libc_init_array+0x2e>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005040:	4798      	blx	r3
 8005042:	3601      	adds	r6, #1
 8005044:	e7ee      	b.n	8005024 <__libc_init_array+0xc>
 8005046:	f855 3b04 	ldr.w	r3, [r5], #4
 800504a:	4798      	blx	r3
 800504c:	3601      	adds	r6, #1
 800504e:	e7f2      	b.n	8005036 <__libc_init_array+0x1e>
 8005050:	08005aac 	.word	0x08005aac
 8005054:	08005aac 	.word	0x08005aac
 8005058:	08005aac 	.word	0x08005aac
 800505c:	08005ab0 	.word	0x08005ab0

08005060 <memset>:
 8005060:	4402      	add	r2, r0
 8005062:	4603      	mov	r3, r0
 8005064:	4293      	cmp	r3, r2
 8005066:	d100      	bne.n	800506a <memset+0xa>
 8005068:	4770      	bx	lr
 800506a:	f803 1b01 	strb.w	r1, [r3], #1
 800506e:	e7f9      	b.n	8005064 <memset+0x4>

08005070 <siprintf>:
 8005070:	b40e      	push	{r1, r2, r3}
 8005072:	b500      	push	{lr}
 8005074:	b09c      	sub	sp, #112	; 0x70
 8005076:	ab1d      	add	r3, sp, #116	; 0x74
 8005078:	9002      	str	r0, [sp, #8]
 800507a:	9006      	str	r0, [sp, #24]
 800507c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005080:	4809      	ldr	r0, [pc, #36]	; (80050a8 <siprintf+0x38>)
 8005082:	9107      	str	r1, [sp, #28]
 8005084:	9104      	str	r1, [sp, #16]
 8005086:	4909      	ldr	r1, [pc, #36]	; (80050ac <siprintf+0x3c>)
 8005088:	f853 2b04 	ldr.w	r2, [r3], #4
 800508c:	9105      	str	r1, [sp, #20]
 800508e:	6800      	ldr	r0, [r0, #0]
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	a902      	add	r1, sp, #8
 8005094:	f000 f876 	bl	8005184 <_svfiprintf_r>
 8005098:	9b02      	ldr	r3, [sp, #8]
 800509a:	2200      	movs	r2, #0
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	b01c      	add	sp, #112	; 0x70
 80050a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050a4:	b003      	add	sp, #12
 80050a6:	4770      	bx	lr
 80050a8:	2000000c 	.word	0x2000000c
 80050ac:	ffff0208 	.word	0xffff0208

080050b0 <strcat>:
 80050b0:	b510      	push	{r4, lr}
 80050b2:	4602      	mov	r2, r0
 80050b4:	7814      	ldrb	r4, [r2, #0]
 80050b6:	4613      	mov	r3, r2
 80050b8:	3201      	adds	r2, #1
 80050ba:	2c00      	cmp	r4, #0
 80050bc:	d1fa      	bne.n	80050b4 <strcat+0x4>
 80050be:	3b01      	subs	r3, #1
 80050c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050c8:	2a00      	cmp	r2, #0
 80050ca:	d1f9      	bne.n	80050c0 <strcat+0x10>
 80050cc:	bd10      	pop	{r4, pc}

080050ce <__ssputs_r>:
 80050ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d2:	688e      	ldr	r6, [r1, #8]
 80050d4:	429e      	cmp	r6, r3
 80050d6:	4682      	mov	sl, r0
 80050d8:	460c      	mov	r4, r1
 80050da:	4690      	mov	r8, r2
 80050dc:	461f      	mov	r7, r3
 80050de:	d838      	bhi.n	8005152 <__ssputs_r+0x84>
 80050e0:	898a      	ldrh	r2, [r1, #12]
 80050e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050e6:	d032      	beq.n	800514e <__ssputs_r+0x80>
 80050e8:	6825      	ldr	r5, [r4, #0]
 80050ea:	6909      	ldr	r1, [r1, #16]
 80050ec:	eba5 0901 	sub.w	r9, r5, r1
 80050f0:	6965      	ldr	r5, [r4, #20]
 80050f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050fa:	3301      	adds	r3, #1
 80050fc:	444b      	add	r3, r9
 80050fe:	106d      	asrs	r5, r5, #1
 8005100:	429d      	cmp	r5, r3
 8005102:	bf38      	it	cc
 8005104:	461d      	movcc	r5, r3
 8005106:	0553      	lsls	r3, r2, #21
 8005108:	d531      	bpl.n	800516e <__ssputs_r+0xa0>
 800510a:	4629      	mov	r1, r5
 800510c:	f000 fb62 	bl	80057d4 <_malloc_r>
 8005110:	4606      	mov	r6, r0
 8005112:	b950      	cbnz	r0, 800512a <__ssputs_r+0x5c>
 8005114:	230c      	movs	r3, #12
 8005116:	f8ca 3000 	str.w	r3, [sl]
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	f04f 30ff 	mov.w	r0, #4294967295
 8005126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512a:	6921      	ldr	r1, [r4, #16]
 800512c:	464a      	mov	r2, r9
 800512e:	f000 fabd 	bl	80056ac <memcpy>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513c:	81a3      	strh	r3, [r4, #12]
 800513e:	6126      	str	r6, [r4, #16]
 8005140:	6165      	str	r5, [r4, #20]
 8005142:	444e      	add	r6, r9
 8005144:	eba5 0509 	sub.w	r5, r5, r9
 8005148:	6026      	str	r6, [r4, #0]
 800514a:	60a5      	str	r5, [r4, #8]
 800514c:	463e      	mov	r6, r7
 800514e:	42be      	cmp	r6, r7
 8005150:	d900      	bls.n	8005154 <__ssputs_r+0x86>
 8005152:	463e      	mov	r6, r7
 8005154:	6820      	ldr	r0, [r4, #0]
 8005156:	4632      	mov	r2, r6
 8005158:	4641      	mov	r1, r8
 800515a:	f000 fab5 	bl	80056c8 <memmove>
 800515e:	68a3      	ldr	r3, [r4, #8]
 8005160:	1b9b      	subs	r3, r3, r6
 8005162:	60a3      	str	r3, [r4, #8]
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	4433      	add	r3, r6
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	2000      	movs	r0, #0
 800516c:	e7db      	b.n	8005126 <__ssputs_r+0x58>
 800516e:	462a      	mov	r2, r5
 8005170:	f000 fba4 	bl	80058bc <_realloc_r>
 8005174:	4606      	mov	r6, r0
 8005176:	2800      	cmp	r0, #0
 8005178:	d1e1      	bne.n	800513e <__ssputs_r+0x70>
 800517a:	6921      	ldr	r1, [r4, #16]
 800517c:	4650      	mov	r0, sl
 800517e:	f000 fabd 	bl	80056fc <_free_r>
 8005182:	e7c7      	b.n	8005114 <__ssputs_r+0x46>

08005184 <_svfiprintf_r>:
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	4698      	mov	r8, r3
 800518a:	898b      	ldrh	r3, [r1, #12]
 800518c:	061b      	lsls	r3, r3, #24
 800518e:	b09d      	sub	sp, #116	; 0x74
 8005190:	4607      	mov	r7, r0
 8005192:	460d      	mov	r5, r1
 8005194:	4614      	mov	r4, r2
 8005196:	d50e      	bpl.n	80051b6 <_svfiprintf_r+0x32>
 8005198:	690b      	ldr	r3, [r1, #16]
 800519a:	b963      	cbnz	r3, 80051b6 <_svfiprintf_r+0x32>
 800519c:	2140      	movs	r1, #64	; 0x40
 800519e:	f000 fb19 	bl	80057d4 <_malloc_r>
 80051a2:	6028      	str	r0, [r5, #0]
 80051a4:	6128      	str	r0, [r5, #16]
 80051a6:	b920      	cbnz	r0, 80051b2 <_svfiprintf_r+0x2e>
 80051a8:	230c      	movs	r3, #12
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	e0d1      	b.n	8005356 <_svfiprintf_r+0x1d2>
 80051b2:	2340      	movs	r3, #64	; 0x40
 80051b4:	616b      	str	r3, [r5, #20]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ba:	2320      	movs	r3, #32
 80051bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c4:	2330      	movs	r3, #48	; 0x30
 80051c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005370 <_svfiprintf_r+0x1ec>
 80051ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051ce:	f04f 0901 	mov.w	r9, #1
 80051d2:	4623      	mov	r3, r4
 80051d4:	469a      	mov	sl, r3
 80051d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051da:	b10a      	cbz	r2, 80051e0 <_svfiprintf_r+0x5c>
 80051dc:	2a25      	cmp	r2, #37	; 0x25
 80051de:	d1f9      	bne.n	80051d4 <_svfiprintf_r+0x50>
 80051e0:	ebba 0b04 	subs.w	fp, sl, r4
 80051e4:	d00b      	beq.n	80051fe <_svfiprintf_r+0x7a>
 80051e6:	465b      	mov	r3, fp
 80051e8:	4622      	mov	r2, r4
 80051ea:	4629      	mov	r1, r5
 80051ec:	4638      	mov	r0, r7
 80051ee:	f7ff ff6e 	bl	80050ce <__ssputs_r>
 80051f2:	3001      	adds	r0, #1
 80051f4:	f000 80aa 	beq.w	800534c <_svfiprintf_r+0x1c8>
 80051f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051fa:	445a      	add	r2, fp
 80051fc:	9209      	str	r2, [sp, #36]	; 0x24
 80051fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80a2 	beq.w	800534c <_svfiprintf_r+0x1c8>
 8005208:	2300      	movs	r3, #0
 800520a:	f04f 32ff 	mov.w	r2, #4294967295
 800520e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005212:	f10a 0a01 	add.w	sl, sl, #1
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	9307      	str	r3, [sp, #28]
 800521a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800521e:	931a      	str	r3, [sp, #104]	; 0x68
 8005220:	4654      	mov	r4, sl
 8005222:	2205      	movs	r2, #5
 8005224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005228:	4851      	ldr	r0, [pc, #324]	; (8005370 <_svfiprintf_r+0x1ec>)
 800522a:	f7fa ffe1 	bl	80001f0 <memchr>
 800522e:	9a04      	ldr	r2, [sp, #16]
 8005230:	b9d8      	cbnz	r0, 800526a <_svfiprintf_r+0xe6>
 8005232:	06d0      	lsls	r0, r2, #27
 8005234:	bf44      	itt	mi
 8005236:	2320      	movmi	r3, #32
 8005238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800523c:	0711      	lsls	r1, r2, #28
 800523e:	bf44      	itt	mi
 8005240:	232b      	movmi	r3, #43	; 0x2b
 8005242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005246:	f89a 3000 	ldrb.w	r3, [sl]
 800524a:	2b2a      	cmp	r3, #42	; 0x2a
 800524c:	d015      	beq.n	800527a <_svfiprintf_r+0xf6>
 800524e:	9a07      	ldr	r2, [sp, #28]
 8005250:	4654      	mov	r4, sl
 8005252:	2000      	movs	r0, #0
 8005254:	f04f 0c0a 	mov.w	ip, #10
 8005258:	4621      	mov	r1, r4
 800525a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800525e:	3b30      	subs	r3, #48	; 0x30
 8005260:	2b09      	cmp	r3, #9
 8005262:	d94e      	bls.n	8005302 <_svfiprintf_r+0x17e>
 8005264:	b1b0      	cbz	r0, 8005294 <_svfiprintf_r+0x110>
 8005266:	9207      	str	r2, [sp, #28]
 8005268:	e014      	b.n	8005294 <_svfiprintf_r+0x110>
 800526a:	eba0 0308 	sub.w	r3, r0, r8
 800526e:	fa09 f303 	lsl.w	r3, r9, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	9304      	str	r3, [sp, #16]
 8005276:	46a2      	mov	sl, r4
 8005278:	e7d2      	b.n	8005220 <_svfiprintf_r+0x9c>
 800527a:	9b03      	ldr	r3, [sp, #12]
 800527c:	1d19      	adds	r1, r3, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	9103      	str	r1, [sp, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	bfbb      	ittet	lt
 8005286:	425b      	neglt	r3, r3
 8005288:	f042 0202 	orrlt.w	r2, r2, #2
 800528c:	9307      	strge	r3, [sp, #28]
 800528e:	9307      	strlt	r3, [sp, #28]
 8005290:	bfb8      	it	lt
 8005292:	9204      	strlt	r2, [sp, #16]
 8005294:	7823      	ldrb	r3, [r4, #0]
 8005296:	2b2e      	cmp	r3, #46	; 0x2e
 8005298:	d10c      	bne.n	80052b4 <_svfiprintf_r+0x130>
 800529a:	7863      	ldrb	r3, [r4, #1]
 800529c:	2b2a      	cmp	r3, #42	; 0x2a
 800529e:	d135      	bne.n	800530c <_svfiprintf_r+0x188>
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	9203      	str	r2, [sp, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bfb8      	it	lt
 80052ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80052b0:	3402      	adds	r4, #2
 80052b2:	9305      	str	r3, [sp, #20]
 80052b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005380 <_svfiprintf_r+0x1fc>
 80052b8:	7821      	ldrb	r1, [r4, #0]
 80052ba:	2203      	movs	r2, #3
 80052bc:	4650      	mov	r0, sl
 80052be:	f7fa ff97 	bl	80001f0 <memchr>
 80052c2:	b140      	cbz	r0, 80052d6 <_svfiprintf_r+0x152>
 80052c4:	2340      	movs	r3, #64	; 0x40
 80052c6:	eba0 000a 	sub.w	r0, r0, sl
 80052ca:	fa03 f000 	lsl.w	r0, r3, r0
 80052ce:	9b04      	ldr	r3, [sp, #16]
 80052d0:	4303      	orrs	r3, r0
 80052d2:	3401      	adds	r4, #1
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052da:	4826      	ldr	r0, [pc, #152]	; (8005374 <_svfiprintf_r+0x1f0>)
 80052dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052e0:	2206      	movs	r2, #6
 80052e2:	f7fa ff85 	bl	80001f0 <memchr>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d038      	beq.n	800535c <_svfiprintf_r+0x1d8>
 80052ea:	4b23      	ldr	r3, [pc, #140]	; (8005378 <_svfiprintf_r+0x1f4>)
 80052ec:	bb1b      	cbnz	r3, 8005336 <_svfiprintf_r+0x1b2>
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	3307      	adds	r3, #7
 80052f2:	f023 0307 	bic.w	r3, r3, #7
 80052f6:	3308      	adds	r3, #8
 80052f8:	9303      	str	r3, [sp, #12]
 80052fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fc:	4433      	add	r3, r6
 80052fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005300:	e767      	b.n	80051d2 <_svfiprintf_r+0x4e>
 8005302:	fb0c 3202 	mla	r2, ip, r2, r3
 8005306:	460c      	mov	r4, r1
 8005308:	2001      	movs	r0, #1
 800530a:	e7a5      	b.n	8005258 <_svfiprintf_r+0xd4>
 800530c:	2300      	movs	r3, #0
 800530e:	3401      	adds	r4, #1
 8005310:	9305      	str	r3, [sp, #20]
 8005312:	4619      	mov	r1, r3
 8005314:	f04f 0c0a 	mov.w	ip, #10
 8005318:	4620      	mov	r0, r4
 800531a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800531e:	3a30      	subs	r2, #48	; 0x30
 8005320:	2a09      	cmp	r2, #9
 8005322:	d903      	bls.n	800532c <_svfiprintf_r+0x1a8>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0c5      	beq.n	80052b4 <_svfiprintf_r+0x130>
 8005328:	9105      	str	r1, [sp, #20]
 800532a:	e7c3      	b.n	80052b4 <_svfiprintf_r+0x130>
 800532c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005330:	4604      	mov	r4, r0
 8005332:	2301      	movs	r3, #1
 8005334:	e7f0      	b.n	8005318 <_svfiprintf_r+0x194>
 8005336:	ab03      	add	r3, sp, #12
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	462a      	mov	r2, r5
 800533c:	4b0f      	ldr	r3, [pc, #60]	; (800537c <_svfiprintf_r+0x1f8>)
 800533e:	a904      	add	r1, sp, #16
 8005340:	4638      	mov	r0, r7
 8005342:	f3af 8000 	nop.w
 8005346:	1c42      	adds	r2, r0, #1
 8005348:	4606      	mov	r6, r0
 800534a:	d1d6      	bne.n	80052fa <_svfiprintf_r+0x176>
 800534c:	89ab      	ldrh	r3, [r5, #12]
 800534e:	065b      	lsls	r3, r3, #25
 8005350:	f53f af2c 	bmi.w	80051ac <_svfiprintf_r+0x28>
 8005354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005356:	b01d      	add	sp, #116	; 0x74
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	ab03      	add	r3, sp, #12
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	462a      	mov	r2, r5
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <_svfiprintf_r+0x1f8>)
 8005364:	a904      	add	r1, sp, #16
 8005366:	4638      	mov	r0, r7
 8005368:	f000 f87a 	bl	8005460 <_printf_i>
 800536c:	e7eb      	b.n	8005346 <_svfiprintf_r+0x1c2>
 800536e:	bf00      	nop
 8005370:	08005a70 	.word	0x08005a70
 8005374:	08005a7a 	.word	0x08005a7a
 8005378:	00000000 	.word	0x00000000
 800537c:	080050cf 	.word	0x080050cf
 8005380:	08005a76 	.word	0x08005a76

08005384 <_printf_common>:
 8005384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005388:	4616      	mov	r6, r2
 800538a:	4699      	mov	r9, r3
 800538c:	688a      	ldr	r2, [r1, #8]
 800538e:	690b      	ldr	r3, [r1, #16]
 8005390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005394:	4293      	cmp	r3, r2
 8005396:	bfb8      	it	lt
 8005398:	4613      	movlt	r3, r2
 800539a:	6033      	str	r3, [r6, #0]
 800539c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053a0:	4607      	mov	r7, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	b10a      	cbz	r2, 80053aa <_printf_common+0x26>
 80053a6:	3301      	adds	r3, #1
 80053a8:	6033      	str	r3, [r6, #0]
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	0699      	lsls	r1, r3, #26
 80053ae:	bf42      	ittt	mi
 80053b0:	6833      	ldrmi	r3, [r6, #0]
 80053b2:	3302      	addmi	r3, #2
 80053b4:	6033      	strmi	r3, [r6, #0]
 80053b6:	6825      	ldr	r5, [r4, #0]
 80053b8:	f015 0506 	ands.w	r5, r5, #6
 80053bc:	d106      	bne.n	80053cc <_printf_common+0x48>
 80053be:	f104 0a19 	add.w	sl, r4, #25
 80053c2:	68e3      	ldr	r3, [r4, #12]
 80053c4:	6832      	ldr	r2, [r6, #0]
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	42ab      	cmp	r3, r5
 80053ca:	dc26      	bgt.n	800541a <_printf_common+0x96>
 80053cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053d0:	1e13      	subs	r3, r2, #0
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	bf18      	it	ne
 80053d6:	2301      	movne	r3, #1
 80053d8:	0692      	lsls	r2, r2, #26
 80053da:	d42b      	bmi.n	8005434 <_printf_common+0xb0>
 80053dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e0:	4649      	mov	r1, r9
 80053e2:	4638      	mov	r0, r7
 80053e4:	47c0      	blx	r8
 80053e6:	3001      	adds	r0, #1
 80053e8:	d01e      	beq.n	8005428 <_printf_common+0xa4>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	68e5      	ldr	r5, [r4, #12]
 80053ee:	6832      	ldr	r2, [r6, #0]
 80053f0:	f003 0306 	and.w	r3, r3, #6
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	bf08      	it	eq
 80053f8:	1aad      	subeq	r5, r5, r2
 80053fa:	68a3      	ldr	r3, [r4, #8]
 80053fc:	6922      	ldr	r2, [r4, #16]
 80053fe:	bf0c      	ite	eq
 8005400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005404:	2500      	movne	r5, #0
 8005406:	4293      	cmp	r3, r2
 8005408:	bfc4      	itt	gt
 800540a:	1a9b      	subgt	r3, r3, r2
 800540c:	18ed      	addgt	r5, r5, r3
 800540e:	2600      	movs	r6, #0
 8005410:	341a      	adds	r4, #26
 8005412:	42b5      	cmp	r5, r6
 8005414:	d11a      	bne.n	800544c <_printf_common+0xc8>
 8005416:	2000      	movs	r0, #0
 8005418:	e008      	b.n	800542c <_printf_common+0xa8>
 800541a:	2301      	movs	r3, #1
 800541c:	4652      	mov	r2, sl
 800541e:	4649      	mov	r1, r9
 8005420:	4638      	mov	r0, r7
 8005422:	47c0      	blx	r8
 8005424:	3001      	adds	r0, #1
 8005426:	d103      	bne.n	8005430 <_printf_common+0xac>
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005430:	3501      	adds	r5, #1
 8005432:	e7c6      	b.n	80053c2 <_printf_common+0x3e>
 8005434:	18e1      	adds	r1, r4, r3
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	2030      	movs	r0, #48	; 0x30
 800543a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800543e:	4422      	add	r2, r4
 8005440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005444:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005448:	3302      	adds	r3, #2
 800544a:	e7c7      	b.n	80053dc <_printf_common+0x58>
 800544c:	2301      	movs	r3, #1
 800544e:	4622      	mov	r2, r4
 8005450:	4649      	mov	r1, r9
 8005452:	4638      	mov	r0, r7
 8005454:	47c0      	blx	r8
 8005456:	3001      	adds	r0, #1
 8005458:	d0e6      	beq.n	8005428 <_printf_common+0xa4>
 800545a:	3601      	adds	r6, #1
 800545c:	e7d9      	b.n	8005412 <_printf_common+0x8e>
	...

08005460 <_printf_i>:
 8005460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005464:	7e0f      	ldrb	r7, [r1, #24]
 8005466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005468:	2f78      	cmp	r7, #120	; 0x78
 800546a:	4691      	mov	r9, r2
 800546c:	4680      	mov	r8, r0
 800546e:	460c      	mov	r4, r1
 8005470:	469a      	mov	sl, r3
 8005472:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005476:	d807      	bhi.n	8005488 <_printf_i+0x28>
 8005478:	2f62      	cmp	r7, #98	; 0x62
 800547a:	d80a      	bhi.n	8005492 <_printf_i+0x32>
 800547c:	2f00      	cmp	r7, #0
 800547e:	f000 80d8 	beq.w	8005632 <_printf_i+0x1d2>
 8005482:	2f58      	cmp	r7, #88	; 0x58
 8005484:	f000 80a3 	beq.w	80055ce <_printf_i+0x16e>
 8005488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800548c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005490:	e03a      	b.n	8005508 <_printf_i+0xa8>
 8005492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005496:	2b15      	cmp	r3, #21
 8005498:	d8f6      	bhi.n	8005488 <_printf_i+0x28>
 800549a:	a101      	add	r1, pc, #4	; (adr r1, 80054a0 <_printf_i+0x40>)
 800549c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054a0:	080054f9 	.word	0x080054f9
 80054a4:	0800550d 	.word	0x0800550d
 80054a8:	08005489 	.word	0x08005489
 80054ac:	08005489 	.word	0x08005489
 80054b0:	08005489 	.word	0x08005489
 80054b4:	08005489 	.word	0x08005489
 80054b8:	0800550d 	.word	0x0800550d
 80054bc:	08005489 	.word	0x08005489
 80054c0:	08005489 	.word	0x08005489
 80054c4:	08005489 	.word	0x08005489
 80054c8:	08005489 	.word	0x08005489
 80054cc:	08005619 	.word	0x08005619
 80054d0:	0800553d 	.word	0x0800553d
 80054d4:	080055fb 	.word	0x080055fb
 80054d8:	08005489 	.word	0x08005489
 80054dc:	08005489 	.word	0x08005489
 80054e0:	0800563b 	.word	0x0800563b
 80054e4:	08005489 	.word	0x08005489
 80054e8:	0800553d 	.word	0x0800553d
 80054ec:	08005489 	.word	0x08005489
 80054f0:	08005489 	.word	0x08005489
 80054f4:	08005603 	.word	0x08005603
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	1d1a      	adds	r2, r3, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	602a      	str	r2, [r5, #0]
 8005500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005508:	2301      	movs	r3, #1
 800550a:	e0a3      	b.n	8005654 <_printf_i+0x1f4>
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	6829      	ldr	r1, [r5, #0]
 8005510:	0606      	lsls	r6, r0, #24
 8005512:	f101 0304 	add.w	r3, r1, #4
 8005516:	d50a      	bpl.n	800552e <_printf_i+0xce>
 8005518:	680e      	ldr	r6, [r1, #0]
 800551a:	602b      	str	r3, [r5, #0]
 800551c:	2e00      	cmp	r6, #0
 800551e:	da03      	bge.n	8005528 <_printf_i+0xc8>
 8005520:	232d      	movs	r3, #45	; 0x2d
 8005522:	4276      	negs	r6, r6
 8005524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005528:	485e      	ldr	r0, [pc, #376]	; (80056a4 <_printf_i+0x244>)
 800552a:	230a      	movs	r3, #10
 800552c:	e019      	b.n	8005562 <_printf_i+0x102>
 800552e:	680e      	ldr	r6, [r1, #0]
 8005530:	602b      	str	r3, [r5, #0]
 8005532:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005536:	bf18      	it	ne
 8005538:	b236      	sxthne	r6, r6
 800553a:	e7ef      	b.n	800551c <_printf_i+0xbc>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	6820      	ldr	r0, [r4, #0]
 8005540:	1d19      	adds	r1, r3, #4
 8005542:	6029      	str	r1, [r5, #0]
 8005544:	0601      	lsls	r1, r0, #24
 8005546:	d501      	bpl.n	800554c <_printf_i+0xec>
 8005548:	681e      	ldr	r6, [r3, #0]
 800554a:	e002      	b.n	8005552 <_printf_i+0xf2>
 800554c:	0646      	lsls	r6, r0, #25
 800554e:	d5fb      	bpl.n	8005548 <_printf_i+0xe8>
 8005550:	881e      	ldrh	r6, [r3, #0]
 8005552:	4854      	ldr	r0, [pc, #336]	; (80056a4 <_printf_i+0x244>)
 8005554:	2f6f      	cmp	r7, #111	; 0x6f
 8005556:	bf0c      	ite	eq
 8005558:	2308      	moveq	r3, #8
 800555a:	230a      	movne	r3, #10
 800555c:	2100      	movs	r1, #0
 800555e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005562:	6865      	ldr	r5, [r4, #4]
 8005564:	60a5      	str	r5, [r4, #8]
 8005566:	2d00      	cmp	r5, #0
 8005568:	bfa2      	ittt	ge
 800556a:	6821      	ldrge	r1, [r4, #0]
 800556c:	f021 0104 	bicge.w	r1, r1, #4
 8005570:	6021      	strge	r1, [r4, #0]
 8005572:	b90e      	cbnz	r6, 8005578 <_printf_i+0x118>
 8005574:	2d00      	cmp	r5, #0
 8005576:	d04d      	beq.n	8005614 <_printf_i+0x1b4>
 8005578:	4615      	mov	r5, r2
 800557a:	fbb6 f1f3 	udiv	r1, r6, r3
 800557e:	fb03 6711 	mls	r7, r3, r1, r6
 8005582:	5dc7      	ldrb	r7, [r0, r7]
 8005584:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005588:	4637      	mov	r7, r6
 800558a:	42bb      	cmp	r3, r7
 800558c:	460e      	mov	r6, r1
 800558e:	d9f4      	bls.n	800557a <_printf_i+0x11a>
 8005590:	2b08      	cmp	r3, #8
 8005592:	d10b      	bne.n	80055ac <_printf_i+0x14c>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	07de      	lsls	r6, r3, #31
 8005598:	d508      	bpl.n	80055ac <_printf_i+0x14c>
 800559a:	6923      	ldr	r3, [r4, #16]
 800559c:	6861      	ldr	r1, [r4, #4]
 800559e:	4299      	cmp	r1, r3
 80055a0:	bfde      	ittt	le
 80055a2:	2330      	movle	r3, #48	; 0x30
 80055a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055ac:	1b52      	subs	r2, r2, r5
 80055ae:	6122      	str	r2, [r4, #16]
 80055b0:	f8cd a000 	str.w	sl, [sp]
 80055b4:	464b      	mov	r3, r9
 80055b6:	aa03      	add	r2, sp, #12
 80055b8:	4621      	mov	r1, r4
 80055ba:	4640      	mov	r0, r8
 80055bc:	f7ff fee2 	bl	8005384 <_printf_common>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d14c      	bne.n	800565e <_printf_i+0x1fe>
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	b004      	add	sp, #16
 80055ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ce:	4835      	ldr	r0, [pc, #212]	; (80056a4 <_printf_i+0x244>)
 80055d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055d4:	6829      	ldr	r1, [r5, #0]
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80055dc:	6029      	str	r1, [r5, #0]
 80055de:	061d      	lsls	r5, r3, #24
 80055e0:	d514      	bpl.n	800560c <_printf_i+0x1ac>
 80055e2:	07df      	lsls	r7, r3, #31
 80055e4:	bf44      	itt	mi
 80055e6:	f043 0320 	orrmi.w	r3, r3, #32
 80055ea:	6023      	strmi	r3, [r4, #0]
 80055ec:	b91e      	cbnz	r6, 80055f6 <_printf_i+0x196>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	f023 0320 	bic.w	r3, r3, #32
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	2310      	movs	r3, #16
 80055f8:	e7b0      	b.n	800555c <_printf_i+0xfc>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	f043 0320 	orr.w	r3, r3, #32
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	2378      	movs	r3, #120	; 0x78
 8005604:	4828      	ldr	r0, [pc, #160]	; (80056a8 <_printf_i+0x248>)
 8005606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800560a:	e7e3      	b.n	80055d4 <_printf_i+0x174>
 800560c:	0659      	lsls	r1, r3, #25
 800560e:	bf48      	it	mi
 8005610:	b2b6      	uxthmi	r6, r6
 8005612:	e7e6      	b.n	80055e2 <_printf_i+0x182>
 8005614:	4615      	mov	r5, r2
 8005616:	e7bb      	b.n	8005590 <_printf_i+0x130>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	6826      	ldr	r6, [r4, #0]
 800561c:	6961      	ldr	r1, [r4, #20]
 800561e:	1d18      	adds	r0, r3, #4
 8005620:	6028      	str	r0, [r5, #0]
 8005622:	0635      	lsls	r5, r6, #24
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	d501      	bpl.n	800562c <_printf_i+0x1cc>
 8005628:	6019      	str	r1, [r3, #0]
 800562a:	e002      	b.n	8005632 <_printf_i+0x1d2>
 800562c:	0670      	lsls	r0, r6, #25
 800562e:	d5fb      	bpl.n	8005628 <_printf_i+0x1c8>
 8005630:	8019      	strh	r1, [r3, #0]
 8005632:	2300      	movs	r3, #0
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	4615      	mov	r5, r2
 8005638:	e7ba      	b.n	80055b0 <_printf_i+0x150>
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	1d1a      	adds	r2, r3, #4
 800563e:	602a      	str	r2, [r5, #0]
 8005640:	681d      	ldr	r5, [r3, #0]
 8005642:	6862      	ldr	r2, [r4, #4]
 8005644:	2100      	movs	r1, #0
 8005646:	4628      	mov	r0, r5
 8005648:	f7fa fdd2 	bl	80001f0 <memchr>
 800564c:	b108      	cbz	r0, 8005652 <_printf_i+0x1f2>
 800564e:	1b40      	subs	r0, r0, r5
 8005650:	6060      	str	r0, [r4, #4]
 8005652:	6863      	ldr	r3, [r4, #4]
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	2300      	movs	r3, #0
 8005658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800565c:	e7a8      	b.n	80055b0 <_printf_i+0x150>
 800565e:	6923      	ldr	r3, [r4, #16]
 8005660:	462a      	mov	r2, r5
 8005662:	4649      	mov	r1, r9
 8005664:	4640      	mov	r0, r8
 8005666:	47d0      	blx	sl
 8005668:	3001      	adds	r0, #1
 800566a:	d0ab      	beq.n	80055c4 <_printf_i+0x164>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	079b      	lsls	r3, r3, #30
 8005670:	d413      	bmi.n	800569a <_printf_i+0x23a>
 8005672:	68e0      	ldr	r0, [r4, #12]
 8005674:	9b03      	ldr	r3, [sp, #12]
 8005676:	4298      	cmp	r0, r3
 8005678:	bfb8      	it	lt
 800567a:	4618      	movlt	r0, r3
 800567c:	e7a4      	b.n	80055c8 <_printf_i+0x168>
 800567e:	2301      	movs	r3, #1
 8005680:	4632      	mov	r2, r6
 8005682:	4649      	mov	r1, r9
 8005684:	4640      	mov	r0, r8
 8005686:	47d0      	blx	sl
 8005688:	3001      	adds	r0, #1
 800568a:	d09b      	beq.n	80055c4 <_printf_i+0x164>
 800568c:	3501      	adds	r5, #1
 800568e:	68e3      	ldr	r3, [r4, #12]
 8005690:	9903      	ldr	r1, [sp, #12]
 8005692:	1a5b      	subs	r3, r3, r1
 8005694:	42ab      	cmp	r3, r5
 8005696:	dcf2      	bgt.n	800567e <_printf_i+0x21e>
 8005698:	e7eb      	b.n	8005672 <_printf_i+0x212>
 800569a:	2500      	movs	r5, #0
 800569c:	f104 0619 	add.w	r6, r4, #25
 80056a0:	e7f5      	b.n	800568e <_printf_i+0x22e>
 80056a2:	bf00      	nop
 80056a4:	08005a81 	.word	0x08005a81
 80056a8:	08005a92 	.word	0x08005a92

080056ac <memcpy>:
 80056ac:	440a      	add	r2, r1
 80056ae:	4291      	cmp	r1, r2
 80056b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056b4:	d100      	bne.n	80056b8 <memcpy+0xc>
 80056b6:	4770      	bx	lr
 80056b8:	b510      	push	{r4, lr}
 80056ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c2:	4291      	cmp	r1, r2
 80056c4:	d1f9      	bne.n	80056ba <memcpy+0xe>
 80056c6:	bd10      	pop	{r4, pc}

080056c8 <memmove>:
 80056c8:	4288      	cmp	r0, r1
 80056ca:	b510      	push	{r4, lr}
 80056cc:	eb01 0402 	add.w	r4, r1, r2
 80056d0:	d902      	bls.n	80056d8 <memmove+0x10>
 80056d2:	4284      	cmp	r4, r0
 80056d4:	4623      	mov	r3, r4
 80056d6:	d807      	bhi.n	80056e8 <memmove+0x20>
 80056d8:	1e43      	subs	r3, r0, #1
 80056da:	42a1      	cmp	r1, r4
 80056dc:	d008      	beq.n	80056f0 <memmove+0x28>
 80056de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056e6:	e7f8      	b.n	80056da <memmove+0x12>
 80056e8:	4402      	add	r2, r0
 80056ea:	4601      	mov	r1, r0
 80056ec:	428a      	cmp	r2, r1
 80056ee:	d100      	bne.n	80056f2 <memmove+0x2a>
 80056f0:	bd10      	pop	{r4, pc}
 80056f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056fa:	e7f7      	b.n	80056ec <memmove+0x24>

080056fc <_free_r>:
 80056fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056fe:	2900      	cmp	r1, #0
 8005700:	d044      	beq.n	800578c <_free_r+0x90>
 8005702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005706:	9001      	str	r0, [sp, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f1a1 0404 	sub.w	r4, r1, #4
 800570e:	bfb8      	it	lt
 8005710:	18e4      	addlt	r4, r4, r3
 8005712:	f000 f913 	bl	800593c <__malloc_lock>
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <_free_r+0x94>)
 8005718:	9801      	ldr	r0, [sp, #4]
 800571a:	6813      	ldr	r3, [r2, #0]
 800571c:	b933      	cbnz	r3, 800572c <_free_r+0x30>
 800571e:	6063      	str	r3, [r4, #4]
 8005720:	6014      	str	r4, [r2, #0]
 8005722:	b003      	add	sp, #12
 8005724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005728:	f000 b90e 	b.w	8005948 <__malloc_unlock>
 800572c:	42a3      	cmp	r3, r4
 800572e:	d908      	bls.n	8005742 <_free_r+0x46>
 8005730:	6825      	ldr	r5, [r4, #0]
 8005732:	1961      	adds	r1, r4, r5
 8005734:	428b      	cmp	r3, r1
 8005736:	bf01      	itttt	eq
 8005738:	6819      	ldreq	r1, [r3, #0]
 800573a:	685b      	ldreq	r3, [r3, #4]
 800573c:	1949      	addeq	r1, r1, r5
 800573e:	6021      	streq	r1, [r4, #0]
 8005740:	e7ed      	b.n	800571e <_free_r+0x22>
 8005742:	461a      	mov	r2, r3
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	b10b      	cbz	r3, 800574c <_free_r+0x50>
 8005748:	42a3      	cmp	r3, r4
 800574a:	d9fa      	bls.n	8005742 <_free_r+0x46>
 800574c:	6811      	ldr	r1, [r2, #0]
 800574e:	1855      	adds	r5, r2, r1
 8005750:	42a5      	cmp	r5, r4
 8005752:	d10b      	bne.n	800576c <_free_r+0x70>
 8005754:	6824      	ldr	r4, [r4, #0]
 8005756:	4421      	add	r1, r4
 8005758:	1854      	adds	r4, r2, r1
 800575a:	42a3      	cmp	r3, r4
 800575c:	6011      	str	r1, [r2, #0]
 800575e:	d1e0      	bne.n	8005722 <_free_r+0x26>
 8005760:	681c      	ldr	r4, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	6053      	str	r3, [r2, #4]
 8005766:	4421      	add	r1, r4
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	e7da      	b.n	8005722 <_free_r+0x26>
 800576c:	d902      	bls.n	8005774 <_free_r+0x78>
 800576e:	230c      	movs	r3, #12
 8005770:	6003      	str	r3, [r0, #0]
 8005772:	e7d6      	b.n	8005722 <_free_r+0x26>
 8005774:	6825      	ldr	r5, [r4, #0]
 8005776:	1961      	adds	r1, r4, r5
 8005778:	428b      	cmp	r3, r1
 800577a:	bf04      	itt	eq
 800577c:	6819      	ldreq	r1, [r3, #0]
 800577e:	685b      	ldreq	r3, [r3, #4]
 8005780:	6063      	str	r3, [r4, #4]
 8005782:	bf04      	itt	eq
 8005784:	1949      	addeq	r1, r1, r5
 8005786:	6021      	streq	r1, [r4, #0]
 8005788:	6054      	str	r4, [r2, #4]
 800578a:	e7ca      	b.n	8005722 <_free_r+0x26>
 800578c:	b003      	add	sp, #12
 800578e:	bd30      	pop	{r4, r5, pc}
 8005790:	20000254 	.word	0x20000254

08005794 <sbrk_aligned>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	4e0e      	ldr	r6, [pc, #56]	; (80057d0 <sbrk_aligned+0x3c>)
 8005798:	460c      	mov	r4, r1
 800579a:	6831      	ldr	r1, [r6, #0]
 800579c:	4605      	mov	r5, r0
 800579e:	b911      	cbnz	r1, 80057a6 <sbrk_aligned+0x12>
 80057a0:	f000 f8bc 	bl	800591c <_sbrk_r>
 80057a4:	6030      	str	r0, [r6, #0]
 80057a6:	4621      	mov	r1, r4
 80057a8:	4628      	mov	r0, r5
 80057aa:	f000 f8b7 	bl	800591c <_sbrk_r>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	d00a      	beq.n	80057c8 <sbrk_aligned+0x34>
 80057b2:	1cc4      	adds	r4, r0, #3
 80057b4:	f024 0403 	bic.w	r4, r4, #3
 80057b8:	42a0      	cmp	r0, r4
 80057ba:	d007      	beq.n	80057cc <sbrk_aligned+0x38>
 80057bc:	1a21      	subs	r1, r4, r0
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 f8ac 	bl	800591c <_sbrk_r>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d101      	bne.n	80057cc <sbrk_aligned+0x38>
 80057c8:	f04f 34ff 	mov.w	r4, #4294967295
 80057cc:	4620      	mov	r0, r4
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	20000258 	.word	0x20000258

080057d4 <_malloc_r>:
 80057d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d8:	1ccd      	adds	r5, r1, #3
 80057da:	f025 0503 	bic.w	r5, r5, #3
 80057de:	3508      	adds	r5, #8
 80057e0:	2d0c      	cmp	r5, #12
 80057e2:	bf38      	it	cc
 80057e4:	250c      	movcc	r5, #12
 80057e6:	2d00      	cmp	r5, #0
 80057e8:	4607      	mov	r7, r0
 80057ea:	db01      	blt.n	80057f0 <_malloc_r+0x1c>
 80057ec:	42a9      	cmp	r1, r5
 80057ee:	d905      	bls.n	80057fc <_malloc_r+0x28>
 80057f0:	230c      	movs	r3, #12
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	2600      	movs	r6, #0
 80057f6:	4630      	mov	r0, r6
 80057f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057fc:	4e2e      	ldr	r6, [pc, #184]	; (80058b8 <_malloc_r+0xe4>)
 80057fe:	f000 f89d 	bl	800593c <__malloc_lock>
 8005802:	6833      	ldr	r3, [r6, #0]
 8005804:	461c      	mov	r4, r3
 8005806:	bb34      	cbnz	r4, 8005856 <_malloc_r+0x82>
 8005808:	4629      	mov	r1, r5
 800580a:	4638      	mov	r0, r7
 800580c:	f7ff ffc2 	bl	8005794 <sbrk_aligned>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	4604      	mov	r4, r0
 8005814:	d14d      	bne.n	80058b2 <_malloc_r+0xde>
 8005816:	6834      	ldr	r4, [r6, #0]
 8005818:	4626      	mov	r6, r4
 800581a:	2e00      	cmp	r6, #0
 800581c:	d140      	bne.n	80058a0 <_malloc_r+0xcc>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	4631      	mov	r1, r6
 8005822:	4638      	mov	r0, r7
 8005824:	eb04 0803 	add.w	r8, r4, r3
 8005828:	f000 f878 	bl	800591c <_sbrk_r>
 800582c:	4580      	cmp	r8, r0
 800582e:	d13a      	bne.n	80058a6 <_malloc_r+0xd2>
 8005830:	6821      	ldr	r1, [r4, #0]
 8005832:	3503      	adds	r5, #3
 8005834:	1a6d      	subs	r5, r5, r1
 8005836:	f025 0503 	bic.w	r5, r5, #3
 800583a:	3508      	adds	r5, #8
 800583c:	2d0c      	cmp	r5, #12
 800583e:	bf38      	it	cc
 8005840:	250c      	movcc	r5, #12
 8005842:	4629      	mov	r1, r5
 8005844:	4638      	mov	r0, r7
 8005846:	f7ff ffa5 	bl	8005794 <sbrk_aligned>
 800584a:	3001      	adds	r0, #1
 800584c:	d02b      	beq.n	80058a6 <_malloc_r+0xd2>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	442b      	add	r3, r5
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	e00e      	b.n	8005874 <_malloc_r+0xa0>
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	1b52      	subs	r2, r2, r5
 800585a:	d41e      	bmi.n	800589a <_malloc_r+0xc6>
 800585c:	2a0b      	cmp	r2, #11
 800585e:	d916      	bls.n	800588e <_malloc_r+0xba>
 8005860:	1961      	adds	r1, r4, r5
 8005862:	42a3      	cmp	r3, r4
 8005864:	6025      	str	r5, [r4, #0]
 8005866:	bf18      	it	ne
 8005868:	6059      	strne	r1, [r3, #4]
 800586a:	6863      	ldr	r3, [r4, #4]
 800586c:	bf08      	it	eq
 800586e:	6031      	streq	r1, [r6, #0]
 8005870:	5162      	str	r2, [r4, r5]
 8005872:	604b      	str	r3, [r1, #4]
 8005874:	4638      	mov	r0, r7
 8005876:	f104 060b 	add.w	r6, r4, #11
 800587a:	f000 f865 	bl	8005948 <__malloc_unlock>
 800587e:	f026 0607 	bic.w	r6, r6, #7
 8005882:	1d23      	adds	r3, r4, #4
 8005884:	1af2      	subs	r2, r6, r3
 8005886:	d0b6      	beq.n	80057f6 <_malloc_r+0x22>
 8005888:	1b9b      	subs	r3, r3, r6
 800588a:	50a3      	str	r3, [r4, r2]
 800588c:	e7b3      	b.n	80057f6 <_malloc_r+0x22>
 800588e:	6862      	ldr	r2, [r4, #4]
 8005890:	42a3      	cmp	r3, r4
 8005892:	bf0c      	ite	eq
 8005894:	6032      	streq	r2, [r6, #0]
 8005896:	605a      	strne	r2, [r3, #4]
 8005898:	e7ec      	b.n	8005874 <_malloc_r+0xa0>
 800589a:	4623      	mov	r3, r4
 800589c:	6864      	ldr	r4, [r4, #4]
 800589e:	e7b2      	b.n	8005806 <_malloc_r+0x32>
 80058a0:	4634      	mov	r4, r6
 80058a2:	6876      	ldr	r6, [r6, #4]
 80058a4:	e7b9      	b.n	800581a <_malloc_r+0x46>
 80058a6:	230c      	movs	r3, #12
 80058a8:	603b      	str	r3, [r7, #0]
 80058aa:	4638      	mov	r0, r7
 80058ac:	f000 f84c 	bl	8005948 <__malloc_unlock>
 80058b0:	e7a1      	b.n	80057f6 <_malloc_r+0x22>
 80058b2:	6025      	str	r5, [r4, #0]
 80058b4:	e7de      	b.n	8005874 <_malloc_r+0xa0>
 80058b6:	bf00      	nop
 80058b8:	20000254 	.word	0x20000254

080058bc <_realloc_r>:
 80058bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	4680      	mov	r8, r0
 80058c2:	4614      	mov	r4, r2
 80058c4:	460e      	mov	r6, r1
 80058c6:	b921      	cbnz	r1, 80058d2 <_realloc_r+0x16>
 80058c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058cc:	4611      	mov	r1, r2
 80058ce:	f7ff bf81 	b.w	80057d4 <_malloc_r>
 80058d2:	b92a      	cbnz	r2, 80058e0 <_realloc_r+0x24>
 80058d4:	f7ff ff12 	bl	80056fc <_free_r>
 80058d8:	4625      	mov	r5, r4
 80058da:	4628      	mov	r0, r5
 80058dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e0:	f000 f838 	bl	8005954 <_malloc_usable_size_r>
 80058e4:	4284      	cmp	r4, r0
 80058e6:	4607      	mov	r7, r0
 80058e8:	d802      	bhi.n	80058f0 <_realloc_r+0x34>
 80058ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058ee:	d812      	bhi.n	8005916 <_realloc_r+0x5a>
 80058f0:	4621      	mov	r1, r4
 80058f2:	4640      	mov	r0, r8
 80058f4:	f7ff ff6e 	bl	80057d4 <_malloc_r>
 80058f8:	4605      	mov	r5, r0
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d0ed      	beq.n	80058da <_realloc_r+0x1e>
 80058fe:	42bc      	cmp	r4, r7
 8005900:	4622      	mov	r2, r4
 8005902:	4631      	mov	r1, r6
 8005904:	bf28      	it	cs
 8005906:	463a      	movcs	r2, r7
 8005908:	f7ff fed0 	bl	80056ac <memcpy>
 800590c:	4631      	mov	r1, r6
 800590e:	4640      	mov	r0, r8
 8005910:	f7ff fef4 	bl	80056fc <_free_r>
 8005914:	e7e1      	b.n	80058da <_realloc_r+0x1e>
 8005916:	4635      	mov	r5, r6
 8005918:	e7df      	b.n	80058da <_realloc_r+0x1e>
	...

0800591c <_sbrk_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4d06      	ldr	r5, [pc, #24]	; (8005938 <_sbrk_r+0x1c>)
 8005920:	2300      	movs	r3, #0
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	f7fb fda0 	bl	800146c <_sbrk>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_sbrk_r+0x1a>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b103      	cbz	r3, 8005936 <_sbrk_r+0x1a>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	2000025c 	.word	0x2000025c

0800593c <__malloc_lock>:
 800593c:	4801      	ldr	r0, [pc, #4]	; (8005944 <__malloc_lock+0x8>)
 800593e:	f000 b811 	b.w	8005964 <__retarget_lock_acquire_recursive>
 8005942:	bf00      	nop
 8005944:	20000260 	.word	0x20000260

08005948 <__malloc_unlock>:
 8005948:	4801      	ldr	r0, [pc, #4]	; (8005950 <__malloc_unlock+0x8>)
 800594a:	f000 b80c 	b.w	8005966 <__retarget_lock_release_recursive>
 800594e:	bf00      	nop
 8005950:	20000260 	.word	0x20000260

08005954 <_malloc_usable_size_r>:
 8005954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005958:	1f18      	subs	r0, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfbc      	itt	lt
 800595e:	580b      	ldrlt	r3, [r1, r0]
 8005960:	18c0      	addlt	r0, r0, r3
 8005962:	4770      	bx	lr

08005964 <__retarget_lock_acquire_recursive>:
 8005964:	4770      	bx	lr

08005966 <__retarget_lock_release_recursive>:
 8005966:	4770      	bx	lr

08005968 <_init>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr

08005974 <_fini>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr
