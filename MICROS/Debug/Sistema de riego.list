
Sistema de riego.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005530  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f4  080057f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057fc  080057fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000070  08005874  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005874  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f403  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d3  00000000  00000000  0002f4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00031578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00032460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d9b  00000000  00000000  00033268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113db  00000000  00000000  0004b003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a555  00000000  00000000  0005c3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6933  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  000f6984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056b8 	.word	0x080056b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080056b8 	.word	0x080056b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_ADC_ConvCpltCallback>:
uint32_t media = 0;
char texto_pantalla [LINES*ROWS];
int contador_linea=0;
int porcentaje;

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

	if (hadc->Instance == ADC1){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <HAL_ADC_ConvCpltCallback+0x30>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d107      	bne.n	80005b6 <HAL_ADC_ConvCpltCallback+0x22>
		ADC_value[0]=ADC_buffer[0]; // Nivel
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x34>)
 80005a8:	881a      	ldrh	r2, [r3, #0]
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_ADC_ConvCpltCallback+0x38>)
 80005ac:	801a      	strh	r2, [r3, #0]
		ADC_value[1]=ADC_buffer[1]; // Tierra
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x34>)
 80005b0:	885a      	ldrh	r2, [r3, #2]
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_ADC_ConvCpltCallback+0x38>)
 80005b4:	805a      	strh	r2, [r3, #2]
	}

}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40012000 	.word	0x40012000
 80005c8:	2000021c 	.word	0x2000021c
 80005cc:	20000218 	.word	0x20000218

080005d0 <humedad>:
		return 0;

}

int humedad(int medida)
{	float porce=0;
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
float num=0;
 80005de:	f04f 0300 	mov.w	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
	if(medida<1000)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ea:	da01      	bge.n	80005f0 <humedad+0x20>
	{
		return 0;// 0% de humedad
 80005ec:	2300      	movs	r3, #0
 80005ee:	e01a      	b.n	8000626 <humedad+0x56>
	}
	else
	{	num=(medida-1000);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fe:	edc7 7a02 	vstr	s15, [r7, #8]
		porce=((num/(4095-1000))*100);
 8000602:	ed97 7a02 	vldr	s14, [r7, #8]
 8000606:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000634 <humedad+0x64>
 800060a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800060e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000638 <humedad+0x68>
 8000612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000616:	edc7 7a03 	vstr	s15, [r7, #12]
		return (int)porce;
 800061a:	edd7 7a03 	vldr	s15, [r7, #12]
 800061e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000622:	ee17 3a90 	vmov	r3, s15
	}
		//porcentaje de humedad
}
 8000626:	4618      	mov	r0, r3
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	45417000 	.word	0x45417000
 8000638:	42c80000 	.word	0x42c80000

0800063c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin==GPIO_PIN_0){
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d10e      	bne.n	800066a <HAL_GPIO_EXTI_Callback+0x2e>
    	if (flag_riego == 0){
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_GPIO_EXTI_Callback+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d103      	bne.n	800065c <HAL_GPIO_EXTI_Callback+0x20>
    		flag_boton = 1;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
    		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);

    	}

    }
}
 800065a:	e006      	b.n	800066a <HAL_GPIO_EXTI_Callback+0x2e>
    		flag_riego = 0;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_GPIO_EXTI_Callback+0x38>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
    		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8000662:	2104      	movs	r1, #4
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <HAL_GPIO_EXTI_Callback+0x40>)
 8000666:	f003 fd2b 	bl	80040c0 <HAL_TIM_OC_Stop>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000220 	.word	0x20000220
 8000678:	20000224 	.word	0x20000224
 800067c:	20000188 	.word	0x20000188

08000680 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback (TIM_HandleTypeDef* htim){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1){
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d110      	bne.n	80006b4 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		flag_riego = 0;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 800069c:	f003 fd10 	bl	80040c0 <HAL_TIM_OC_Stop>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 80006a8:	f002 fae2 	bl	8002c70 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
	}

}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40010000 	.word	0x40010000
 80006c0:	20000220 	.word	0x20000220
 80006c4:	20000188 	.word	0x20000188
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006dc:	d10a      	bne.n	80006f4 <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80006de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80006e4:	f002 fadd 	bl	8002ca2 <HAL_GPIO_TogglePin>
		lcd_update(texto_pantalla);
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006ea:	f000 fc5c 	bl	8000fa6 <lcd_update>
		HAL_TIM_Base_Start_IT(&htim2);
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80006f0:	f003 fc2a 	bl	8003f48 <HAL_TIM_Base_Start_IT>
	}
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	2000022c 	.word	0x2000022c
 8000704:	200001d0 	.word	0x200001d0

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b5b0      	push	{r4, r5, r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f000 fef7 	bl	8001500 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 f92f 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f000 fb31 	bl	8000d7c <MX_GPIO_Init>
  MX_DMA_Init();
 800071a:	f000 fb0f 	bl	8000d3c <MX_DMA_Init>
  MX_ADC1_Init();
 800071e:	f000 f991 	bl	8000a44 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000722:	f000 fa1d 	bl	8000b60 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000726:	f000 f9ed 	bl	8000b04 <MX_I2C1_Init>
  MX_TIM2_Init();
 800072a:	f000 fab9 	bl	8000ca0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800072e:	f000 fbfd 	bl	8000f2c <lcd_init>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000738:	4879      	ldr	r0, [pc, #484]	; (8000920 <main+0x218>)
 800073a:	f002 fa99 	bl	8002c70 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, 2);
 800073e:	2202      	movs	r2, #2
 8000740:	4978      	ldr	r1, [pc, #480]	; (8000924 <main+0x21c>)
 8000742:	4879      	ldr	r0, [pc, #484]	; (8000928 <main+0x220>)
 8000744:	f001 f8c6 	bl	80018d4 <HAL_ADC_Start_DMA>
  strcpy(texto_pantalla, "Bienvenido al   sistema de riego");
 8000748:	4a78      	ldr	r2, [pc, #480]	; (800092c <main+0x224>)
 800074a:	4b79      	ldr	r3, [pc, #484]	; (8000930 <main+0x228>)
 800074c:	4614      	mov	r4, r2
 800074e:	461d      	mov	r5, r3
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000758:	682b      	ldr	r3, [r5, #0]
 800075a:	7023      	strb	r3, [r4, #0]
  lcd_update(texto_pantalla);
 800075c:	4873      	ldr	r0, [pc, #460]	; (800092c <main+0x224>)
 800075e:	f000 fc22 	bl	8000fa6 <lcd_update>
  uint32_t tiempo= HAL_GetTick();
 8000762:	f000 ff33 	bl	80015cc <HAL_GetTick>
 8000766:	6078      	str	r0, [r7, #4]
//  while( HAL_GetTick()-tiempo<100)
  //{
	  //Para que el mensaje se mantenga en la patanlla 1 segundo
  //}
  lcd_clear();
 8000768:	f000 fc4d 	bl	8001006 <lcd_clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //info();
	  porcentaje=humedad(ADC_value[1]);
 800076c:	4b71      	ldr	r3, [pc, #452]	; (8000934 <main+0x22c>)
 800076e:	885b      	ldrh	r3, [r3, #2]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff2d 	bl	80005d0 <humedad>
 8000776:	4603      	mov	r3, r0
 8000778:	4a6f      	ldr	r2, [pc, #444]	; (8000938 <main+0x230>)
 800077a:	6013      	str	r3, [r2, #0]
	  strdel(texto_pantalla);
 800077c:	486b      	ldr	r0, [pc, #428]	; (800092c <main+0x224>)
 800077e:	f000 fc67 	bl	8001050 <strdel>
	  char buffer [2];
	  if (porcentaje > 10)
 8000782:	4b6d      	ldr	r3, [pc, #436]	; (8000938 <main+0x230>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b0a      	cmp	r3, #10
 8000788:	dd07      	ble.n	800079a <main+0x92>
	  	  sprintf(buffer, "%i", porcentaje);
 800078a:	4b6b      	ldr	r3, [pc, #428]	; (8000938 <main+0x230>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	463b      	mov	r3, r7
 8000790:	496a      	ldr	r1, [pc, #424]	; (800093c <main+0x234>)
 8000792:	4618      	mov	r0, r3
 8000794:	f004 fb14 	bl	8004dc0 <siprintf>
 8000798:	e006      	b.n	80007a8 <main+0xa0>
	  else
		  sprintf(buffer, "0%i", porcentaje);
 800079a:	4b67      	ldr	r3, [pc, #412]	; (8000938 <main+0x230>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	463b      	mov	r3, r7
 80007a0:	4967      	ldr	r1, [pc, #412]	; (8000940 <main+0x238>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 fb0c 	bl	8004dc0 <siprintf>

	  if (!flag_riego && !flag_agua){
 80007a8:	4b66      	ldr	r3, [pc, #408]	; (8000944 <main+0x23c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d12b      	bne.n	8000808 <main+0x100>
 80007b0:	4b65      	ldr	r3, [pc, #404]	; (8000948 <main+0x240>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d127      	bne.n	8000808 <main+0x100>
		  strcpy(texto_pantalla, "Midiendo...|SistHumedad:");
 80007b8:	4a5c      	ldr	r2, [pc, #368]	; (800092c <main+0x224>)
 80007ba:	4b64      	ldr	r3, [pc, #400]	; (800094c <main+0x244>)
 80007bc:	4614      	mov	r4, r2
 80007be:	461d      	mov	r5, r3
 80007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c8:	c403      	stmia	r4!, {r0, r1}
 80007ca:	7022      	strb	r2, [r4, #0]
	      strcat(texto_pantalla, buffer);
 80007cc:	463b      	mov	r3, r7
 80007ce:	4619      	mov	r1, r3
 80007d0:	4856      	ldr	r0, [pc, #344]	; (800092c <main+0x224>)
 80007d2:	f004 fb15 	bl	8004e00 <strcat>
	      strcat(texto_pantalla, "%");
 80007d6:	4855      	ldr	r0, [pc, #340]	; (800092c <main+0x224>)
 80007d8:	f7ff fd02 	bl	80001e0 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	4b52      	ldr	r3, [pc, #328]	; (800092c <main+0x224>)
 80007e2:	4413      	add	r3, r2
 80007e4:	495a      	ldr	r1, [pc, #360]	; (8000950 <main+0x248>)
 80007e6:	461a      	mov	r2, r3
 80007e8:	460b      	mov	r3, r1
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	8013      	strh	r3, [r2, #0]
	      strcat(texto_pantalla, "|STBY");
 80007ee:	484f      	ldr	r0, [pc, #316]	; (800092c <main+0x224>)
 80007f0:	f7ff fcf6 	bl	80001e0 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b4c      	ldr	r3, [pc, #304]	; (800092c <main+0x224>)
 80007fa:	4413      	add	r3, r2
 80007fc:	4a55      	ldr	r2, [pc, #340]	; (8000954 <main+0x24c>)
 80007fe:	6810      	ldr	r0, [r2, #0]
 8000800:	6018      	str	r0, [r3, #0]
 8000802:	8892      	ldrh	r2, [r2, #4]
 8000804:	809a      	strh	r2, [r3, #4]
 8000806:	e084      	b.n	8000912 <main+0x20a>
	     }
	  else if (flag_riego && !flag_agua){
 8000808:	4b4e      	ldr	r3, [pc, #312]	; (8000944 <main+0x23c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d02b      	beq.n	8000868 <main+0x160>
 8000810:	4b4d      	ldr	r3, [pc, #308]	; (8000948 <main+0x240>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d127      	bne.n	8000868 <main+0x160>
	      strcpy(texto_pantalla, "Regando....|SistHumedad:");
 8000818:	4a44      	ldr	r2, [pc, #272]	; (800092c <main+0x224>)
 800081a:	4b4f      	ldr	r3, [pc, #316]	; (8000958 <main+0x250>)
 800081c:	4614      	mov	r4, r2
 800081e:	461d      	mov	r5, r3
 8000820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000824:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000828:	c403      	stmia	r4!, {r0, r1}
 800082a:	7022      	strb	r2, [r4, #0]
	      strcat(texto_pantalla, buffer);
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	483e      	ldr	r0, [pc, #248]	; (800092c <main+0x224>)
 8000832:	f004 fae5 	bl	8004e00 <strcat>
	      strcat(texto_pantalla, "%");
 8000836:	483d      	ldr	r0, [pc, #244]	; (800092c <main+0x224>)
 8000838:	f7ff fcd2 	bl	80001e0 <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	4b3a      	ldr	r3, [pc, #232]	; (800092c <main+0x224>)
 8000842:	4413      	add	r3, r2
 8000844:	4942      	ldr	r1, [pc, #264]	; (8000950 <main+0x248>)
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	8013      	strh	r3, [r2, #0]
	      strcat(texto_pantalla, "|  ON");
 800084e:	4837      	ldr	r0, [pc, #220]	; (800092c <main+0x224>)
 8000850:	f7ff fcc6 	bl	80001e0 <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b34      	ldr	r3, [pc, #208]	; (800092c <main+0x224>)
 800085a:	4413      	add	r3, r2
 800085c:	4a3f      	ldr	r2, [pc, #252]	; (800095c <main+0x254>)
 800085e:	6810      	ldr	r0, [r2, #0]
 8000860:	6018      	str	r0, [r3, #0]
 8000862:	8892      	ldrh	r2, [r2, #4]
 8000864:	809a      	strh	r2, [r3, #4]
 8000866:	e054      	b.n	8000912 <main+0x20a>
	     }
	  else if (flag_riego && flag_agua){
 8000868:	4b36      	ldr	r3, [pc, #216]	; (8000944 <main+0x23c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d01f      	beq.n	80008b0 <main+0x1a8>
 8000870:	4b35      	ldr	r3, [pc, #212]	; (8000948 <main+0x240>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d01b      	beq.n	80008b0 <main+0x1a8>
	      strcpy(texto_pantalla, "ALERTA| Sin aguaHumedad:");
 8000878:	4a2c      	ldr	r2, [pc, #176]	; (800092c <main+0x224>)
 800087a:	4b39      	ldr	r3, [pc, #228]	; (8000960 <main+0x258>)
 800087c:	4614      	mov	r4, r2
 800087e:	461d      	mov	r5, r3
 8000880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000884:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000888:	c403      	stmia	r4!, {r0, r1}
 800088a:	7022      	strb	r2, [r4, #0]
	      strcat(texto_pantalla, buffer);
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	4826      	ldr	r0, [pc, #152]	; (800092c <main+0x224>)
 8000892:	f004 fab5 	bl	8004e00 <strcat>
	      strcat(texto_pantalla, "% !!!");
 8000896:	4825      	ldr	r0, [pc, #148]	; (800092c <main+0x224>)
 8000898:	f7ff fca2 	bl	80001e0 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <main+0x224>)
 80008a2:	4413      	add	r3, r2
 80008a4:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <main+0x25c>)
 80008a6:	6810      	ldr	r0, [r2, #0]
 80008a8:	6018      	str	r0, [r3, #0]
 80008aa:	8892      	ldrh	r2, [r2, #4]
 80008ac:	809a      	strh	r2, [r3, #4]
 80008ae:	e030      	b.n	8000912 <main+0x20a>
	      }
	  else if (!flag_riego && flag_agua){
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <main+0x23c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d125      	bne.n	8000904 <main+0x1fc>
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <main+0x240>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d021      	beq.n	8000904 <main+0x1fc>
	      strcpy(texto_pantalla, "Midiendo..|AVISOHum:");
 80008c0:	4a1a      	ldr	r2, [pc, #104]	; (800092c <main+0x224>)
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <main+0x260>)
 80008c4:	4614      	mov	r4, r2
 80008c6:	461d      	mov	r5, r3
 80008c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008d0:	6020      	str	r0, [r4, #0]
 80008d2:	3404      	adds	r4, #4
 80008d4:	7021      	strb	r1, [r4, #0]
	      strcat(texto_pantalla, buffer);
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4814      	ldr	r0, [pc, #80]	; (800092c <main+0x224>)
 80008dc:	f004 fa90 	bl	8004e00 <strcat>
	      strcat(texto_pantalla, "%|SIN AGUA");
 80008e0:	4812      	ldr	r0, [pc, #72]	; (800092c <main+0x224>)
 80008e2:	f7ff fc7d 	bl	80001e0 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <main+0x224>)
 80008ec:	4413      	add	r3, r2
 80008ee:	491f      	ldr	r1, [pc, #124]	; (800096c <main+0x264>)
 80008f0:	461a      	mov	r2, r3
 80008f2:	460b      	mov	r3, r1
 80008f4:	cb03      	ldmia	r3!, {r0, r1}
 80008f6:	6010      	str	r0, [r2, #0]
 80008f8:	6051      	str	r1, [r2, #4]
 80008fa:	8819      	ldrh	r1, [r3, #0]
 80008fc:	789b      	ldrb	r3, [r3, #2]
 80008fe:	8111      	strh	r1, [r2, #8]
 8000900:	7293      	strb	r3, [r2, #10]
 8000902:	e006      	b.n	8000912 <main+0x20a>
	  	  }
	  else
	      strcpy(texto_pantalla, "ERROR");
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <main+0x224>)
 8000906:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <main+0x268>)
 8000908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090c:	6018      	str	r0, [r3, #0]
 800090e:	3304      	adds	r3, #4
 8000910:	8019      	strh	r1, [r3, #0]

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000916:	4802      	ldr	r0, [pc, #8]	; (8000920 <main+0x218>)
 8000918:	f002 f9c3 	bl	8002ca2 <HAL_GPIO_TogglePin>
  {
 800091c:	e726      	b.n	800076c <main+0x64>
 800091e:	bf00      	nop
 8000920:	40020c00 	.word	0x40020c00
 8000924:	2000021c 	.word	0x2000021c
 8000928:	2000008c 	.word	0x2000008c
 800092c:	2000022c 	.word	0x2000022c
 8000930:	080056d0 	.word	0x080056d0
 8000934:	20000218 	.word	0x20000218
 8000938:	2000024c 	.word	0x2000024c
 800093c:	080056f4 	.word	0x080056f4
 8000940:	080056f8 	.word	0x080056f8
 8000944:	20000220 	.word	0x20000220
 8000948:	20000228 	.word	0x20000228
 800094c:	080056fc 	.word	0x080056fc
 8000950:	08005718 	.word	0x08005718
 8000954:	0800571c 	.word	0x0800571c
 8000958:	08005724 	.word	0x08005724
 800095c:	08005740 	.word	0x08005740
 8000960:	08005748 	.word	0x08005748
 8000964:	08005764 	.word	0x08005764
 8000968:	0800576c 	.word	0x0800576c
 800096c:	08005784 	.word	0x08005784
 8000970:	08005790 	.word	0x08005790

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f004 fa14 	bl	8004db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <SystemClock_Config+0xc8>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a26      	ldr	r2, [pc, #152]	; (8000a3c <SystemClock_Config+0xc8>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <SystemClock_Config+0xc8>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <SystemClock_Config+0xcc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a20      	ldr	r2, [pc, #128]	; (8000a40 <SystemClock_Config+0xcc>)
 80009be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <SystemClock_Config+0xcc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d0:	2302      	movs	r3, #2
 80009d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2310      	movs	r3, #16
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009e4:	2308      	movs	r3, #8
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009e8:	2332      	movs	r3, #50	; 0x32
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009f0:	2308      	movs	r3, #8
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fdd1 	bl	80035a0 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a04:	f000 fb3d 	bl	8001082 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2101      	movs	r1, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 f833 	bl	8003a90 <HAL_RCC_ClockConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a30:	f000 fb27 	bl	8001082 <Error_Handler>
  }
}
 8000a34:	bf00      	nop
 8000a36:	3750      	adds	r7, #80	; 0x50
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a58:	4a28      	ldr	r2, [pc, #160]	; (8000afc <MX_ADC1_Init+0xb8>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a6e:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a84:	4a1e      	ldr	r2, [pc, #120]	; (8000b00 <MX_ADC1_Init+0xbc>)
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a90:	2202      	movs	r2, #2
 8000a92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa2:	4815      	ldr	r0, [pc, #84]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000aa4:	f000 fdc2 	bl	800162c <HAL_ADC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f000 fae8 	bl	8001082 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000aba:	2307      	movs	r3, #7
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000ac4:	f001 f814 	bl	8001af0 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ace:	f000 fad8 	bl	8001082 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_ADC1_Init+0xb4>)
 8000ae0:	f001 f806 	bl	8001af0 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000aea:	f000 faca 	bl	8001082 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000008c 	.word	0x2000008c
 8000afc:	40012000 	.word	0x40012000
 8000b00:	0f000001 	.word	0x0f000001

08000b04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b0a:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <MX_I2C1_Init+0x54>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b10:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_I2C1_Init+0x58>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b42:	f002 f8e1 	bl	8002d08 <HAL_I2C_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b4c:	f000 fa99 	bl	8001082 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000134 	.word	0x20000134
 8000b58:	40005400 	.word	0x40005400
 8000b5c:	000186a0 	.word	0x000186a0

08000b60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b096      	sub	sp, #88	; 0x58
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2220      	movs	r2, #32
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 f909 	bl	8004db0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b9e:	4b3e      	ldr	r3, [pc, #248]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000ba0:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <MX_TIM1_Init+0x13c>)
 8000ba2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ba4:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bb0:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000bb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bbe:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bca:	4833      	ldr	r0, [pc, #204]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000bcc:	f003 f96c 	bl	8003ea8 <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bd6:	f000 fa54 	bl	8001082 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000be4:	4619      	mov	r1, r3
 8000be6:	482c      	ldr	r0, [pc, #176]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000be8:	f003 fc32 	bl	8004450 <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bf2:	f000 fa46 	bl	8001082 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000bf6:	4828      	ldr	r0, [pc, #160]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000bf8:	f003 fa08 	bl	800400c <HAL_TIM_OC_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c02:	f000 fa3e 	bl	8001082 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c12:	4619      	mov	r1, r3
 8000c14:	4820      	ldr	r0, [pc, #128]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000c16:	f003 ffcd 	bl	8004bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c20:	f000 fa2f 	bl	8001082 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000c24:	2320      	movs	r3, #32
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	2204      	movs	r2, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4813      	ldr	r0, [pc, #76]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000c4a:	f003 fba5 	bl	8004398 <HAL_TIM_OC_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c54:	f000 fa15 	bl	8001082 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000c7c:	f004 f808 	bl	8004c90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000c86:	f000 f9fc 	bl	8001082 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c8a:	4803      	ldr	r0, [pc, #12]	; (8000c98 <MX_TIM1_Init+0x138>)
 8000c8c:	f000 fb32 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8000c90:	bf00      	nop
 8000c92:	3758      	adds	r7, #88	; 0x58
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000188 	.word	0x20000188
 8000c9c:	40010000 	.word	0x40010000

08000ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <MX_TIM2_Init+0x98>)
 8000cbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24999;
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_TIM2_Init+0x98>)
 8000cc6:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000cca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_TIM2_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_TIM2_Init+0x98>)
 8000cd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_TIM2_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_TIM2_Init+0x98>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce6:	4814      	ldr	r0, [pc, #80]	; (8000d38 <MX_TIM2_Init+0x98>)
 8000ce8:	f003 f8de 	bl	8003ea8 <HAL_TIM_Base_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cf2:	f000 f9c6 	bl	8001082 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	4619      	mov	r1, r3
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_TIM2_Init+0x98>)
 8000d04:	f003 fba4 	bl	8004450 <HAL_TIM_ConfigClockSource>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d0e:	f000 f9b8 	bl	8001082 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_TIM2_Init+0x98>)
 8000d20:	f003 ff48 	bl	8004bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d2a:	f000 f9aa 	bl	8001082 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001d0 	.word	0x200001d0

08000d3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_DMA_Init+0x3c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <MX_DMA_Init+0x3c>)
 8000d4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_DMA_Init+0x3c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2038      	movs	r0, #56	; 0x38
 8000d64:	f001 fa59 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d68:	2038      	movs	r0, #56	; 0x38
 8000d6a:	f001 fa72 	bl	8002252 <HAL_NVIC_EnableIRQ>

}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a31      	ldr	r2, [pc, #196]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a2a      	ldr	r2, [pc, #168]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_GPIO_Init+0xe4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e08:	4816      	ldr	r0, [pc, #88]	; (8000e64 <MX_GPIO_Init+0xe8>)
 8000e0a:	f001 ff31 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_GPIO_Init+0xec>)
 8000e24:	f001 fda0 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4808      	ldr	r0, [pc, #32]	; (8000e64 <MX_GPIO_Init+0xe8>)
 8000e42:	f001 fd91 	bl	8002968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2006      	movs	r0, #6
 8000e4c:	f001 f9e5 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e50:	2006      	movs	r0, #6
 8000e52:	f001 f9fe 	bl	8002252 <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40020000 	.word	0x40020000

08000e6c <lcd_send_data>:

/* USER CODE BEGIN 4 */
void lcd_send_data (char data)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af02      	add	r7, sp, #8
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f023 030f 	bic.w	r3, r3, #15
 8000e7c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	f043 030d 	orr.w	r3, r3, #13
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	f043 0309 	orr.w	r3, r3, #9
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	f043 030d 	orr.w	r3, r3, #13
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	f043 0309 	orr.w	r3, r3, #9
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, HAL_MAX_DELAY);
 8000eac:	f107 0208 	add.w	r2, r7, #8
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	214e      	movs	r1, #78	; 0x4e
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <lcd_send_data+0x5c>)
 8000ebc:	f002 f868 	bl	8002f90 <HAL_I2C_Master_Transmit>
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000134 	.word	0x20000134

08000ecc <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f023 030f 	bic.w	r3, r3, #15
 8000edc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f043 030c 	orr.w	r3, r3, #12
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	f043 030c 	orr.w	r3, r3, #12
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, HAL_MAX_DELAY);
 8000f0c:	f107 0208 	add.w	r2, r7, #8
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2304      	movs	r3, #4
 8000f18:	214e      	movs	r1, #78	; 0x4e
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <lcd_send_cmd+0x5c>)
 8000f1c:	f002 f838 	bl	8002f90 <HAL_I2C_Master_Transmit>
}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000134 	.word	0x20000134

08000f2c <lcd_init>:

void lcd_init (void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_Delay(45); //Datasheet especifica espera de 40ms
 8000f30:	202d      	movs	r0, #45	; 0x2d
 8000f32:	f000 fb57 	bl	80015e4 <HAL_Delay>
	lcd_send_cmd (0x30); //Encendido del display y del cursor
 8000f36:	2030      	movs	r0, #48	; 0x30
 8000f38:	f7ff ffc8 	bl	8000ecc <lcd_send_cmd>
	HAL_Delay(5); //Datasheet especifica espera de 4.1ms
 8000f3c:	2005      	movs	r0, #5
 8000f3e:	f000 fb51 	bl	80015e4 <HAL_Delay>
	lcd_send_cmd (0x30); //El datasheet especifica que se debe repetir el envio de esta instruccion
 8000f42:	2030      	movs	r0, #48	; 0x30
 8000f44:	f7ff ffc2 	bl	8000ecc <lcd_send_cmd>
	HAL_Delay(1); //Datasheet especifica espera de 100us
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f000 fb4b 	bl	80015e4 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000f4e:	2030      	movs	r0, #48	; 0x30
 8000f50:	f7ff ffbc 	bl	8000ecc <lcd_send_cmd>
	HAL_Delay(1);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f000 fb45 	bl	80015e4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f5a:	2020      	movs	r0, #32
 8000f5c:	f7ff ffb6 	bl	8000ecc <lcd_send_cmd>
	HAL_Delay(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 fb3f 	bl	80015e4 <HAL_Delay>
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f66:	2028      	movs	r0, #40	; 0x28
 8000f68:	f7ff ffb0 	bl	8000ecc <lcd_send_cmd>
	HAL_Delay(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f000 fb39 	bl	80015e4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f72:	2008      	movs	r0, #8
 8000f74:	f7ff ffaa 	bl	8000ecc <lcd_send_cmd>
	HAL_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 fb33 	bl	80015e4 <HAL_Delay>
	lcd_send_cmd (0x01);  //Clear
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff ffa4 	bl	8000ecc <lcd_send_cmd>
	HAL_Delay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f000 fb2d 	bl	80015e4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f8a:	2006      	movs	r0, #6
 8000f8c:	f7ff ff9e 	bl	8000ecc <lcd_send_cmd>
	HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 fb27 	bl	80015e4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f96:	200c      	movs	r0, #12
 8000f98:	f7ff ff98 	bl	8000ecc <lcd_send_cmd>
	HAL_Delay(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f000 fb21 	bl	80015e4 <HAL_Delay>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <lcd_update>:
		if (contador_linea > ROWS*LINES)
			return; //No hace nada más porque no hay espacio
	}
}

void lcd_update (char *str){
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]

	lcd_clear(); //Borra la pantalla y pone el cursor en la esquina superior izquierda
 8000fae:	f000 f82a 	bl	8001006 <lcd_clear>
	//En esta funcion se hacen los saltos de linea necesarios.
	int contador_lineas = 0; //Static para que no se borre entre ejecuciones de la función
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
	contador_lineas = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
	while (*str){
 8000fba:	e01b      	b.n	8000ff4 <lcd_update+0x4e>
		lcd_send_data (*str++);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff51 	bl	8000e6c <lcd_send_data>
		contador_lineas = (contador_lineas) % (ROWS*LINES); //Contar hasta el número de caracteres máximo
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	425a      	negs	r2, r3
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	f002 021f 	and.w	r2, r2, #31
 8000fd6:	bf58      	it	pl
 8000fd8:	4253      	negpl	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]
		contador_lineas++;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
		if (contador_lineas == ROWS)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b10      	cmp	r3, #16
 8000fe6:	d102      	bne.n	8000fee <lcd_update+0x48>
			lcd_send_cmd(0xc0); //Pasa a la segunda línea
 8000fe8:	20c0      	movs	r0, #192	; 0xc0
 8000fea:	f7ff ff6f 	bl	8000ecc <lcd_send_cmd>
		if (contador_lineas > ROWS*LINES)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b20      	cmp	r3, #32
 8000ff2:	dc04      	bgt.n	8000ffe <lcd_update+0x58>
	while (*str){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1df      	bne.n	8000fbc <lcd_update+0x16>
 8000ffc:	e000      	b.n	8001000 <lcd_update+0x5a>
			return; //No hace nada más porque no hay espacio
 8000ffe:	bf00      	nop
	}

}
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <lcd_clear>:

void lcd_clear(void){ //Tambien posiciona el cursor en la esquina superior izquierda. SOLO VALE PARA DISPLAY 16x2
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80); //Posiciona en el comienzo
 800100c:	2080      	movs	r0, #128	; 0x80
 800100e:	f7ff ff5d 	bl	8000ecc <lcd_send_cmd>
	for (int i=0; i < LINES; i++){ //Recorrer todas las filas
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	e011      	b.n	800103c <lcd_clear+0x36>
		for (int j=0; j < ROWS; j++) //Recorrer todas las columnas
 8001018:	2300      	movs	r3, #0
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	e005      	b.n	800102a <lcd_clear+0x24>
			lcd_send_data(' '); //Poner espacios (borrar todo)
 800101e:	2020      	movs	r0, #32
 8001020:	f7ff ff24 	bl	8000e6c <lcd_send_data>
		for (int j=0; j < ROWS; j++) //Recorrer todas las columnas
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	ddf6      	ble.n	800101e <lcd_clear+0x18>
		lcd_send_cmd(0x0c); //Posicionar en la segunda linea
 8001030:	200c      	movs	r0, #12
 8001032:	f7ff ff4b 	bl	8000ecc <lcd_send_cmd>
	for (int i=0; i < LINES; i++){ //Recorrer todas las filas
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3301      	adds	r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	ddea      	ble.n	8001018 <lcd_clear+0x12>
	}
	lcd_send_cmd(0x80); //Posicionar el cursor en el comienzo de nuevo
 8001042:	2080      	movs	r0, #128	; 0x80
 8001044:	f7ff ff42 	bl	8000ecc <lcd_send_cmd>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <strdel>:

void strdel(char* cadena){
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	for (int i=0; i < LINES*ROWS; i++)
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e007      	b.n	800106e <strdel+0x1e>
		*cadena++ = ' ';
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	2220      	movs	r2, #32
 8001066:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < LINES*ROWS; i++)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3301      	adds	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b1f      	cmp	r3, #31
 8001072:	ddf4      	ble.n	800105e <strdel+0xe>
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001086:	b672      	cpsid	i
}
 8001088:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108a:	e7fe      	b.n	800108a <Error_Handler+0x8>

0800108c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <HAL_MspInit+0x4c>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_MspInit+0x4c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_MspInit+0x4c>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_MspInit+0x4c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ca:	2007      	movs	r0, #7
 80010cc:	f001 f89a 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800

080010dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a33      	ldr	r2, [pc, #204]	; (80011c8 <HAL_ADC_MspInit+0xec>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d15f      	bne.n	80011be <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <HAL_ADC_MspInit+0xf0>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a31      	ldr	r2, [pc, #196]	; (80011cc <HAL_ADC_MspInit+0xf0>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_ADC_MspInit+0xf0>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_ADC_MspInit+0xf0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a2a      	ldr	r2, [pc, #168]	; (80011cc <HAL_ADC_MspInit+0xf0>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <HAL_ADC_MspInit+0xf0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001136:	2330      	movs	r3, #48	; 0x30
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4821      	ldr	r0, [pc, #132]	; (80011d0 <HAL_ADC_MspInit+0xf4>)
 800114a:	f001 fc0d 	bl	8002968 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_ADC_MspInit+0xfc>)
 8001152:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 8001168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 8001170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001174:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 8001178:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800117c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 8001180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001184:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 8001194:	f001 f878 	bl	8002288 <HAL_DMA_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800119e:	f7ff ff70 	bl	8001082 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_ADC_MspInit+0xf8>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2012      	movs	r0, #18
 80011b4:	f001 f831 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011b8:	2012      	movs	r0, #18
 80011ba:	f001 f84a 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	200000d4 	.word	0x200000d4
 80011d8:	40026410 	.word	0x40026410

080011dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_I2C_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12b      	bne.n	8001256 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800121a:	23c0      	movs	r3, #192	; 0xc0
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121e:	2312      	movs	r3, #18
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122a:	2304      	movs	r3, #4
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <HAL_I2C_MspInit+0x8c>)
 8001236:	f001 fb97 	bl	8002968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_I2C_MspInit+0x88>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40005400 	.word	0x40005400
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400

0800126c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <HAL_TIM_Base_MspInit+0x80>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d116      	bne.n	80012ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a1a      	ldr	r2, [pc, #104]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	201b      	movs	r0, #27
 80012a0:	f000 ffbb 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012a4:	201b      	movs	r0, #27
 80012a6:	f000 ffd4 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012aa:	e01a      	b.n	80012e2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b4:	d115      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_TIM_Base_MspInit+0x84>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	201c      	movs	r0, #28
 80012d8:	f000 ff9f 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012dc:	201c      	movs	r0, #28
 80012de:	f000 ffb8 	bl	8002252 <HAL_NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a12      	ldr	r2, [pc, #72]	; (800135c <HAL_TIM_MspPostInit+0x68>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d11e      	bne.n	8001354 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_TIM_MspPostInit+0x6c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_TIM_MspPostInit+0x6c>)
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_TIM_MspPostInit+0x6c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001336:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001344:	2301      	movs	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_TIM_MspPostInit+0x70>)
 8001350:	f001 fb0a 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010000 	.word	0x40010000
 8001360:	40023800 	.word	0x40023800
 8001364:	40021000 	.word	0x40021000

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800136c:	e7fe      	b.n	800136c <NMI_Handler+0x4>

0800136e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <MemManage_Handler+0x4>

0800137a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <UsageFault_Handler+0x4>

08001386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b4:	f000 f8f6 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f001 fc89 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <ADC_IRQHandler+0x10>)
 80013d2:	f000 f96e 	bl	80016b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000008c 	.word	0x2000008c

080013e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM1_CC_IRQHandler+0x10>)
 80013e6:	f002 fecf 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000188 	.word	0x20000188

080013f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <TIM2_IRQHandler+0x10>)
 80013fa:	f002 fec5 	bl	8004188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200001d0 	.word	0x200001d0

08001408 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <DMA2_Stream0_IRQHandler+0x10>)
 800140e:	f001 f841 	bl	8002494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000d4 	.word	0x200000d4

0800141c <_sbrk>:
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
 800144c:	f003 fc86 	bl	8004d5c <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20020000 	.word	0x20020000
 800147c:	00000400 	.word	0x00000400
 8001480:	20000250 	.word	0x20000250
 8001484:	20000268 	.word	0x20000268

08001488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <Reset_Handler>:
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e4 <LoopFillZerobss+0x12>
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <LoopFillZerobss+0x16>)
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <LoopFillZerobss+0x1a>)
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <LoopFillZerobss+0x1e>)
 80014b6:	2300      	movs	r3, #0
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:
 80014ba:	58d4      	ldr	r4, [r2, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:
 80014c0:	18c4      	adds	r4, r0, r3
 80014c2:	428c      	cmp	r4, r1
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <LoopFillZerobss+0x22>)
 80014c8:	4c0b      	ldr	r4, [pc, #44]	; (80014f8 <LoopFillZerobss+0x26>)
 80014ca:	2300      	movs	r3, #0
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:
 80014d2:	42a2      	cmp	r2, r4
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>
 80014d6:	f7ff ffd7 	bl	8001488 <SystemInit>
 80014da:	f003 fc45 	bl	8004d68 <__libc_init_array>
 80014de:	f7ff f913 	bl	8000708 <main>
 80014e2:	4770      	bx	lr
 80014e4:	20020000 	.word	0x20020000
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000070 	.word	0x20000070
 80014f0:	08005804 	.word	0x08005804
 80014f4:	20000070 	.word	0x20000070
 80014f8:	20000268 	.word	0x20000268

080014fc <DMA1_Stream0_IRQHandler>:
 80014fc:	e7fe      	b.n	80014fc <DMA1_Stream0_IRQHandler>
	...

08001500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <HAL_Init+0x40>)
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_Init+0x40>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_Init+0x40>)
 8001522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 fe6b 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	2000      	movs	r0, #0
 8001530:	f000 f808 	bl	8001544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001534:	f7ff fdaa 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023c00 	.word	0x40023c00

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_InitTick+0x54>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x58>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155a:	fbb3 f3f1 	udiv	r3, r3, r1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fe83 	bl	800226e <HAL_SYSTICK_Config>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e00e      	b.n	8001590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d80a      	bhi.n	800158e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f000 fe4b 	bl	800221a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_InitTick+0x5c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000000 	.word	0x20000000
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_IncTick+0x20>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x24>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <HAL_IncTick+0x24>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000254 	.word	0x20000254

080015cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_GetTick+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000254 	.word	0x20000254

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff ffee 	bl	80015cc <HAL_GetTick>
 80015f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d005      	beq.n	800160a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_Delay+0x44>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160a:	bf00      	nop
 800160c:	f7ff ffde 	bl	80015cc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8f7      	bhi.n	800160c <HAL_Delay+0x28>
  {
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000008 	.word	0x20000008

0800162c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e033      	b.n	80016aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fd46 	bl	80010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d118      	bne.n	800169c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001672:	f023 0302 	bic.w	r3, r3, #2
 8001676:	f043 0202 	orr.w	r2, r3, #2
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fb68 	bl	8001d54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
 800169a:	e001      	b.n	80016a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d049      	beq.n	800177c <HAL_ADC_IRQHandler+0xca>
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d046      	beq.n	800177c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d12b      	bne.n	800176c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001718:	2b00      	cmp	r3, #0
 800171a:	d127      	bne.n	800176c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001734:	2b00      	cmp	r3, #0
 8001736:	d119      	bne.n	800176c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0220 	bic.w	r2, r2, #32
 8001746:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7fe ff11 	bl	8000594 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f06f 0212 	mvn.w	r2, #18
 800177a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d057      	beq.n	8001842 <HAL_ADC_IRQHandler+0x190>
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d054      	beq.n	8001842 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d105      	bne.n	80017b0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d139      	bne.n	8001832 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d12b      	bne.n	8001832 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d124      	bne.n	8001832 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d11d      	bne.n	8001832 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d119      	bne.n	8001832 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800180c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f043 0201 	orr.w	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fc0c 	bl	8002050 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 020c 	mvn.w	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001850:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d017      	beq.n	8001888 <HAL_ADC_IRQHandler+0x1d6>
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d014      	beq.n	8001888 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10d      	bne.n	8001888 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f925 	bl	8001ac8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f06f 0201 	mvn.w	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001896:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <HAL_ADC_IRQHandler+0x218>
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d012      	beq.n	80018ca <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f043 0202 	orr.w	r2, r3, #2
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0220 	mvn.w	r2, #32
 80018b8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f90e 	bl	8001adc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0220 	mvn.w	r2, #32
 80018c8:	601a      	str	r2, [r3, #0]
  }
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Start_DMA+0x1e>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e0ce      	b.n	8001a90 <HAL_ADC_Start_DMA+0x1bc>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d018      	beq.n	800193a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001918:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_ADC_Start_DMA+0x1c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a5f      	ldr	r2, [pc, #380]	; (8001a9c <HAL_ADC_Start_DMA+0x1c8>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0c9a      	lsrs	r2, r3, #18
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800192c:	e002      	b.n	8001934 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	3b01      	subs	r3, #1
 8001932:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f9      	bne.n	800192e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001948:	d107      	bne.n	800195a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001958:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	f040 8086 	bne.w	8001a76 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001994:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a8:	d106      	bne.n	80019b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f023 0206 	bic.w	r2, r3, #6
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44
 80019b6:	e002      	b.n	80019be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c6:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_ADC_Start_DMA+0x1cc>)
 80019c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ce:	4a35      	ldr	r2, [pc, #212]	; (8001aa4 <HAL_ADC_Start_DMA+0x1d0>)
 80019d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d6:	4a34      	ldr	r2, [pc, #208]	; (8001aa8 <HAL_ADC_Start_DMA+0x1d4>)
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019de:	4a33      	ldr	r2, [pc, #204]	; (8001aac <HAL_ADC_Start_DMA+0x1d8>)
 80019e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80019fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	334c      	adds	r3, #76	; 0x4c
 8001a16:	4619      	mov	r1, r3
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f000 fce2 	bl	80023e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10f      	bne.n	8001a4c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d129      	bne.n	8001a8e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	e020      	b.n	8001a8e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <HAL_ADC_Start_DMA+0x1dc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d11b      	bne.n	8001a8e <HAL_ADC_Start_DMA+0x1ba>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d114      	bne.n	8001a8e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e00b      	b.n	8001a8e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f043 0210 	orr.w	r2, r3, #16
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	431bde83 	.word	0x431bde83
 8001aa0:	40012300 	.word	0x40012300
 8001aa4:	08001f4d 	.word	0x08001f4d
 8001aa8:	08002007 	.word	0x08002007
 8001aac:	08002023 	.word	0x08002023
 8001ab0:	40012000 	.word	0x40012000

08001ab4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1c>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e113      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x244>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b09      	cmp	r3, #9
 8001b1a:	d925      	bls.n	8001b68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68d9      	ldr	r1, [r3, #12]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b1e      	subs	r3, #30
 8001b32:	2207      	movs	r2, #7
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43da      	mvns	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	400a      	ands	r2, r1
 8001b40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68d9      	ldr	r1, [r3, #12]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	4603      	mov	r3, r0
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4403      	add	r3, r0
 8001b5a:	3b1e      	subs	r3, #30
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	e022      	b.n	8001bae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6919      	ldr	r1, [r3, #16]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	400a      	ands	r2, r1
 8001b8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6919      	ldr	r1, [r3, #16]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4403      	add	r3, r0
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d824      	bhi.n	8001c00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3b05      	subs	r3, #5
 8001bc8:	221f      	movs	r2, #31
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b05      	subs	r3, #5
 8001bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bfe:	e04c      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b0c      	cmp	r3, #12
 8001c06:	d824      	bhi.n	8001c52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	3b23      	subs	r3, #35	; 0x23
 8001c1a:	221f      	movs	r2, #31
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43da      	mvns	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	400a      	ands	r2, r1
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	3b23      	subs	r3, #35	; 0x23
 8001c44:	fa00 f203 	lsl.w	r2, r0, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c50:	e023      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	3b41      	subs	r3, #65	; 0x41
 8001c64:	221f      	movs	r2, #31
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	400a      	ands	r2, r1
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b41      	subs	r3, #65	; 0x41
 8001c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c9a:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <HAL_ADC_ConfigChannel+0x250>)
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a28      	ldr	r2, [pc, #160]	; (8001d44 <HAL_ADC_ConfigChannel+0x254>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1d8>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b12      	cmp	r3, #18
 8001cae:	d10b      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <HAL_ADC_ConfigChannel+0x254>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d12b      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x23a>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <HAL_ADC_ConfigChannel+0x258>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d003      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0x1f4>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b11      	cmp	r3, #17
 8001ce2:	d122      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <HAL_ADC_ConfigChannel+0x258>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d111      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_ADC_ConfigChannel+0x25c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a11      	ldr	r2, [pc, #68]	; (8001d50 <HAL_ADC_ConfigChannel+0x260>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	0c9a      	lsrs	r2, r3, #18
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f9      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40012300 	.word	0x40012300
 8001d44:	40012000 	.word	0x40012000
 8001d48:	10000012 	.word	0x10000012
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	431bde83 	.word	0x431bde83

08001d54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d5c:	4b79      	ldr	r3, [pc, #484]	; (8001f44 <ADC_Init+0x1f0>)
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	021a      	lsls	r2, r3, #8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6899      	ldr	r1, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	4a58      	ldr	r2, [pc, #352]	; (8001f48 <ADC_Init+0x1f4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d022      	beq.n	8001e32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6899      	ldr	r1, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6899      	ldr	r1, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	e00f      	b.n	8001e52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0202 	bic.w	r2, r2, #2
 8001e60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6899      	ldr	r1, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7e1b      	ldrb	r3, [r3, #24]
 8001e6c:	005a      	lsls	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6859      	ldr	r1, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	035a      	lsls	r2, r3, #13
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	e007      	b.n	8001ec8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	051a      	lsls	r2, r3, #20
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001efc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6899      	ldr	r1, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f0a:	025a      	lsls	r2, r3, #9
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6899      	ldr	r1, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	029a      	lsls	r2, r3, #10
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40012300 	.word	0x40012300
 8001f48:	0f000001 	.word	0x0f000001

08001f4c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f58:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d13c      	bne.n	8001fe0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d12b      	bne.n	8001fd8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d127      	bne.n	8001fd8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d119      	bne.n	8001fd8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0220 	bic.w	r2, r2, #32
 8001fb2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f7fe fadb 	bl	8000594 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fde:	e00e      	b.n	8001ffe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7ff fd75 	bl	8001adc <HAL_ADC_ErrorCallback>
}
 8001ff2:	e004      	b.n	8001ffe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7ff fd4d 	bl	8001ab4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2240      	movs	r2, #64	; 0x40
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f043 0204 	orr.w	r2, r3, #4
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f7ff fd4a 	bl	8001adc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	; (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	; (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	; (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff29 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff3e 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff8e 	bl	8002158 <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5d 	bl	8002104 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff31 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffa2 	bl	80021c0 <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff f99a 	bl	80015cc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e099      	b.n	80023d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c4:	e00f      	b.n	80022e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c6:	f7ff f981 	bl	80015cc <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d908      	bls.n	80022e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e078      	b.n	80023d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e8      	bne.n	80022c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_DMA_Init+0x158>)
 8002300:	4013      	ands	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002312:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2b04      	cmp	r3, #4
 800233e:	d107      	bne.n	8002350 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4313      	orrs	r3, r2
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f023 0307 	bic.w	r3, r3, #7
 8002366:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	2b04      	cmp	r3, #4
 8002378:	d117      	bne.n	80023aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fa6f 	bl	8002870 <DMA_CheckFifoParam>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2240      	movs	r2, #64	; 0x40
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023a6:	2301      	movs	r3, #1
 80023a8:	e016      	b.n	80023d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa26 	bl	8002804 <DMA_CalcBaseAndBitshift>
 80023b8:	4603      	mov	r3, r0
 80023ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	223f      	movs	r2, #63	; 0x3f
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	f010803f 	.word	0xf010803f

080023e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_DMA_Start_IT+0x26>
 8002406:	2302      	movs	r3, #2
 8002408:	e040      	b.n	800248c <HAL_DMA_Start_IT+0xa8>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d12f      	bne.n	800247e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f9b8 	bl	80027a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	223f      	movs	r2, #63	; 0x3f
 800243e:	409a      	lsls	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0216 	orr.w	r2, r2, #22
 8002452:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0208 	orr.w	r2, r2, #8
 800246a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e005      	b.n	800248a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800248a:	7dfb      	ldrb	r3, [r7, #23]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024a0:	4b8e      	ldr	r3, [pc, #568]	; (80026dc <HAL_DMA_IRQHandler+0x248>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a8e      	ldr	r2, [pc, #568]	; (80026e0 <HAL_DMA_IRQHandler+0x24c>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0a9b      	lsrs	r3, r3, #10
 80024ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	2208      	movs	r2, #8
 80024c0:	409a      	lsls	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d01a      	beq.n	8002500 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0204 	bic.w	r2, r2, #4
 80024e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	2208      	movs	r2, #8
 80024ee:	409a      	lsls	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	2201      	movs	r2, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d012      	beq.n	8002536 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	2201      	movs	r2, #1
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f043 0202 	orr.w	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	2204      	movs	r2, #4
 800253c:	409a      	lsls	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d012      	beq.n	800256c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	2204      	movs	r2, #4
 800255a:	409a      	lsls	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	f043 0204 	orr.w	r2, r3, #4
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	2210      	movs	r2, #16
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d043      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d03c      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	2210      	movs	r2, #16
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d018      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d108      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d024      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4798      	blx	r3
 80025c2:	e01f      	b.n	8002604 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e016      	b.n	8002604 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0208 	bic.w	r2, r2, #8
 80025f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002608:	2220      	movs	r2, #32
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 808f 	beq.w	8002734 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8087 	beq.w	8002734 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	2220      	movs	r2, #32
 800262c:	409a      	lsls	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b05      	cmp	r3, #5
 800263c:	d136      	bne.n	80026ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0216 	bic.w	r2, r2, #22
 800264c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800265c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <HAL_DMA_IRQHandler+0x1da>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0208 	bic.w	r2, r2, #8
 800267c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	223f      	movs	r2, #63	; 0x3f
 8002684:	409a      	lsls	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d07e      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
        }
        return;
 80026aa:	e079      	b.n	80027a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01d      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d031      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e02c      	b.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000
 80026e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d023      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
 80026f4:	e01e      	b.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10f      	bne.n	8002724 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0210 	bic.w	r2, r2, #16
 8002712:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	2b00      	cmp	r3, #0
 800273a:	d032      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d022      	beq.n	800278e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2205      	movs	r2, #5
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	3301      	adds	r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	d307      	bcc.n	800277c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f2      	bne.n	8002760 <HAL_DMA_IRQHandler+0x2cc>
 800277a:	e000      	b.n	800277e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800277c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
 800279e:	e000      	b.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027a0:	bf00      	nop
    }
  }
}
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d108      	bne.n	80027e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027e6:	e007      	b.n	80027f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	3b10      	subs	r3, #16
 8002814:	4a14      	ldr	r2, [pc, #80]	; (8002868 <DMA_CalcBaseAndBitshift+0x64>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <DMA_CalcBaseAndBitshift+0x68>)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d909      	bls.n	8002846 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800283a:	f023 0303 	bic.w	r3, r3, #3
 800283e:	1d1a      	adds	r2, r3, #4
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	659a      	str	r2, [r3, #88]	; 0x58
 8002844:	e007      	b.n	8002856 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	aaaaaaab 	.word	0xaaaaaaab
 800286c:	080057b8 	.word	0x080057b8

08002870 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11f      	bne.n	80028ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d856      	bhi.n	800293e <DMA_CheckFifoParam+0xce>
 8002890:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <DMA_CheckFifoParam+0x28>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028a9 	.word	0x080028a9
 800289c:	080028bb 	.word	0x080028bb
 80028a0:	080028a9 	.word	0x080028a9
 80028a4:	0800293f 	.word	0x0800293f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d046      	beq.n	8002942 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e043      	b.n	8002942 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028c2:	d140      	bne.n	8002946 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c8:	e03d      	b.n	8002946 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d2:	d121      	bne.n	8002918 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d837      	bhi.n	800294a <DMA_CheckFifoParam+0xda>
 80028da:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <DMA_CheckFifoParam+0x70>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	080028f1 	.word	0x080028f1
 80028e4:	080028f7 	.word	0x080028f7
 80028e8:	080028f1 	.word	0x080028f1
 80028ec:	08002909 	.word	0x08002909
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e030      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d025      	beq.n	800294e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002906:	e022      	b.n	800294e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002910:	d11f      	bne.n	8002952 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002916:	e01c      	b.n	8002952 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d903      	bls.n	8002926 <DMA_CheckFifoParam+0xb6>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d003      	beq.n	800292c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002924:	e018      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      break;
 800292a:	e015      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e00b      	b.n	8002956 <DMA_CheckFifoParam+0xe6>
      break;
 800293e:	bf00      	nop
 8002940:	e00a      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 8002942:	bf00      	nop
 8002944:	e008      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 8002946:	bf00      	nop
 8002948:	e006      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
 800294c:	e004      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 800294e:	bf00      	nop
 8002950:	e002      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;   
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
    }
  } 
  
  return status; 
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e159      	b.n	8002c38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	f040 8148 	bne.w	8002c32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d005      	beq.n	80029ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d130      	bne.n	8002a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 0201 	and.w	r2, r3, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d017      	beq.n	8002a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d123      	bne.n	8002aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a2 	beq.w	8002c32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b57      	ldr	r3, [pc, #348]	; (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	4a56      	ldr	r2, [pc, #344]	; (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002afc:	6453      	str	r3, [r2, #68]	; 0x44
 8002afe:	4b54      	ldr	r3, [pc, #336]	; (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b0a:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a49      	ldr	r2, [pc, #292]	; (8002c58 <HAL_GPIO_Init+0x2f0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_GPIO_Init+0x202>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a48      	ldr	r2, [pc, #288]	; (8002c5c <HAL_GPIO_Init+0x2f4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_GPIO_Init+0x1fe>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a47      	ldr	r2, [pc, #284]	; (8002c60 <HAL_GPIO_Init+0x2f8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00d      	beq.n	8002b62 <HAL_GPIO_Init+0x1fa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a46      	ldr	r2, [pc, #280]	; (8002c64 <HAL_GPIO_Init+0x2fc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x1f6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a45      	ldr	r2, [pc, #276]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_GPIO_Init+0x1f2>
 8002b56:	2304      	movs	r3, #4
 8002b58:	e008      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e004      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	f002 0203 	and.w	r2, r2, #3
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	4093      	lsls	r3, r2
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b7c:	4935      	ldr	r1, [pc, #212]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8a:	4b38      	ldr	r3, [pc, #224]	; (8002c6c <HAL_GPIO_Init+0x304>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bae:	4a2f      	ldr	r2, [pc, #188]	; (8002c6c <HAL_GPIO_Init+0x304>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb4:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <HAL_GPIO_Init+0x304>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <HAL_GPIO_Init+0x304>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bde:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <HAL_GPIO_Init+0x304>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c02:	4a1a      	ldr	r2, [pc, #104]	; (8002c6c <HAL_GPIO_Init+0x304>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_GPIO_Init+0x304>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c2c:	4a0f      	ldr	r2, [pc, #60]	; (8002c6c <HAL_GPIO_Init+0x304>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	f67f aea2 	bls.w	8002984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3724      	adds	r7, #36	; 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40020800 	.word	0x40020800
 8002c64:	40020c00 	.word	0x40020c00
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40013c00 	.word	0x40013c00

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c8c:	e003      	b.n	8002c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb4:	887a      	ldrh	r2, [r7, #2]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	041a      	lsls	r2, r3, #16
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	619a      	str	r2, [r3, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fca0 	bl	800063c <HAL_GPIO_EXTI_Callback>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e12b      	b.n	8002f72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe fa54 	bl	80011dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2224      	movs	r2, #36	; 0x24
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d6c:	f001 f888 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8002d70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4a81      	ldr	r2, [pc, #516]	; (8002f7c <HAL_I2C_Init+0x274>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d807      	bhi.n	8002d8c <HAL_I2C_Init+0x84>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a80      	ldr	r2, [pc, #512]	; (8002f80 <HAL_I2C_Init+0x278>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	bf94      	ite	ls
 8002d84:	2301      	movls	r3, #1
 8002d86:	2300      	movhi	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e006      	b.n	8002d9a <HAL_I2C_Init+0x92>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a7d      	ldr	r2, [pc, #500]	; (8002f84 <HAL_I2C_Init+0x27c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	bf94      	ite	ls
 8002d94:	2301      	movls	r3, #1
 8002d96:	2300      	movhi	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0e7      	b.n	8002f72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a78      	ldr	r2, [pc, #480]	; (8002f88 <HAL_I2C_Init+0x280>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0c9b      	lsrs	r3, r3, #18
 8002dac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a6a      	ldr	r2, [pc, #424]	; (8002f7c <HAL_I2C_Init+0x274>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d802      	bhi.n	8002ddc <HAL_I2C_Init+0xd4>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	e009      	b.n	8002df0 <HAL_I2C_Init+0xe8>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	4a69      	ldr	r2, [pc, #420]	; (8002f8c <HAL_I2C_Init+0x284>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	3301      	adds	r3, #1
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	495c      	ldr	r1, [pc, #368]	; (8002f7c <HAL_I2C_Init+0x274>)
 8002e0c:	428b      	cmp	r3, r1
 8002e0e:	d819      	bhi.n	8002e44 <HAL_I2C_Init+0x13c>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e59      	subs	r1, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e1e:	1c59      	adds	r1, r3, #1
 8002e20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e24:	400b      	ands	r3, r1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_I2C_Init+0x138>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1e59      	subs	r1, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3e:	e051      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002e40:	2304      	movs	r3, #4
 8002e42:	e04f      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d111      	bne.n	8002e70 <HAL_I2C_Init+0x168>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1e58      	subs	r0, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	440b      	add	r3, r1
 8002e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e012      	b.n	8002e96 <HAL_I2C_Init+0x18e>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e58      	subs	r0, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	0099      	lsls	r1, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Init+0x196>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e022      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_I2C_Init+0x1bc>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e58      	subs	r0, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	440b      	add	r3, r1
 8002eb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec2:	e00f      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1e58      	subs	r0, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	0099      	lsls	r1, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	6809      	ldr	r1, [r1, #0]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6911      	ldr	r1, [r2, #16]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68d2      	ldr	r2, [r2, #12]
 8002f1e:	4311      	orrs	r1, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	430b      	orrs	r3, r1
 8002f26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	000186a0 	.word	0x000186a0
 8002f80:	001e847f 	.word	0x001e847f
 8002f84:	003d08ff 	.word	0x003d08ff
 8002f88:	431bde83 	.word	0x431bde83
 8002f8c:	10624dd3 	.word	0x10624dd3

08002f90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	817b      	strh	r3, [r7, #10]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fa4:	f7fe fb12 	bl	80015cc <HAL_GetTick>
 8002fa8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	f040 80e0 	bne.w	8003178 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2319      	movs	r3, #25
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4970      	ldr	r1, [pc, #448]	; (8003184 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f964 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e0d3      	b.n	800317a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_I2C_Master_Transmit+0x50>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e0cc      	b.n	800317a <HAL_I2C_Master_Transmit+0x1ea>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d007      	beq.n	8003006 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003014:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2221      	movs	r2, #33	; 0x21
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2210      	movs	r2, #16
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	893a      	ldrh	r2, [r7, #8]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a50      	ldr	r2, [pc, #320]	; (8003188 <HAL_I2C_Master_Transmit+0x1f8>)
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003048:	8979      	ldrh	r1, [r7, #10]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	6a3a      	ldr	r2, [r7, #32]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f89c 	bl	800318c <I2C_MasterRequestWrite>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e08d      	b.n	800317a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003074:	e066      	b.n	8003144 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	6a39      	ldr	r1, [r7, #32]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f9de 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b04      	cmp	r3, #4
 800308c:	d107      	bne.n	800309e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e06b      	b.n	800317a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d11b      	bne.n	8003118 <HAL_I2C_Master_Transmit+0x188>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d017      	beq.n	8003118 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	6a39      	ldr	r1, [r7, #32]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f9ce 	bl	80034be <I2C_WaitOnBTFFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	2b04      	cmp	r3, #4
 800312e:	d107      	bne.n	8003140 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e01a      	b.n	800317a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	2b00      	cmp	r3, #0
 800314a:	d194      	bne.n	8003076 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	00100002 	.word	0x00100002
 8003188:	ffff0000 	.word	0xffff0000

0800318c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	460b      	mov	r3, r1
 800319a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d006      	beq.n	80031b6 <I2C_MasterRequestWrite+0x2a>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d003      	beq.n	80031b6 <I2C_MasterRequestWrite+0x2a>
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031b4:	d108      	bne.n	80031c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e00b      	b.n	80031e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	2b12      	cmp	r3, #18
 80031ce:	d107      	bne.n	80031e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f84f 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00d      	beq.n	8003214 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003206:	d103      	bne.n	8003210 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800320e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e035      	b.n	8003280 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800321c:	d108      	bne.n	8003230 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800321e:	897b      	ldrh	r3, [r7, #10]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800322c:	611a      	str	r2, [r3, #16]
 800322e:	e01b      	b.n	8003268 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003230:	897b      	ldrh	r3, [r7, #10]
 8003232:	11db      	asrs	r3, r3, #7
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 0306 	and.w	r3, r3, #6
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f063 030f 	orn	r3, r3, #15
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	490e      	ldr	r1, [pc, #56]	; (8003288 <I2C_MasterRequestWrite+0xfc>)
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f875 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e010      	b.n	8003280 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4907      	ldr	r1, [pc, #28]	; (800328c <I2C_MasterRequestWrite+0x100>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f865 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	00010008 	.word	0x00010008
 800328c:	00010002 	.word	0x00010002

08003290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a0:	e025      	b.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d021      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032aa:	f7fe f98f 	bl	80015cc <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d116      	bne.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e023      	b.n	8003336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10d      	bne.n	8003314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	e00c      	b.n	800332e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4013      	ands	r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	429a      	cmp	r2, r3
 8003332:	d0b6      	beq.n	80032a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334c:	e051      	b.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335c:	d123      	bne.n	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f043 0204 	orr.w	r2, r3, #4
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e046      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d021      	beq.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fe f90d 	bl	80015cc <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d116      	bne.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e020      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d10c      	bne.n	8003416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	e00b      	b.n	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	43da      	mvns	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d18d      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003448:	e02d      	b.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f878 	bl	8003540 <I2C_IsAcknowledgeFailed>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e02d      	b.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d021      	beq.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe f8b3 	bl	80015cc <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d116      	bne.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e007      	b.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b0:	2b80      	cmp	r3, #128	; 0x80
 80034b2:	d1ca      	bne.n	800344a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ca:	e02d      	b.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f837 	bl	8003540 <I2C_IsAcknowledgeFailed>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e02d      	b.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e2:	d021      	beq.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e4:	f7fe f872 	bl	80015cc <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d302      	bcc.n	80034fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d116      	bne.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e007      	b.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b04      	cmp	r3, #4
 8003534:	d1ca      	bne.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003556:	d11b      	bne.n	8003590 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003560:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f043 0204 	orr.w	r2, r3, #4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e267      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d075      	beq.n	80036aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035be:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d00c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ca:	4b85      	ldr	r3, [pc, #532]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d112      	bne.n	80035fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d6:	4b82      	ldr	r3, [pc, #520]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e2:	d10b      	bne.n	80035fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	4b7e      	ldr	r3, [pc, #504]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d05b      	beq.n	80036a8 <HAL_RCC_OscConfig+0x108>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d157      	bne.n	80036a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e242      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d106      	bne.n	8003614 <HAL_RCC_OscConfig+0x74>
 8003606:	4b76      	ldr	r3, [pc, #472]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a75      	ldr	r2, [pc, #468]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e01d      	b.n	8003650 <HAL_RCC_OscConfig+0xb0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x98>
 800361e:	4b70      	ldr	r3, [pc, #448]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6f      	ldr	r2, [pc, #444]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b6d      	ldr	r3, [pc, #436]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6c      	ldr	r2, [pc, #432]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0xb0>
 8003638:	4b69      	ldr	r3, [pc, #420]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a68      	ldr	r2, [pc, #416]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b66      	ldr	r3, [pc, #408]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a65      	ldr	r2, [pc, #404]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fd ffb8 	bl	80015cc <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003660:	f7fd ffb4 	bl	80015cc <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e207      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0xc0>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fd ffa4 	bl	80015cc <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003688:	f7fd ffa0 	bl	80015cc <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e1f3      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	4b51      	ldr	r3, [pc, #324]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0xe8>
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d063      	beq.n	800377e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b6:	4b4a      	ldr	r3, [pc, #296]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c2:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d11c      	bne.n	8003708 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ce:	4b44      	ldr	r3, [pc, #272]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	4b41      	ldr	r3, [pc, #260]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_RCC_OscConfig+0x152>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e1c7      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4937      	ldr	r1, [pc, #220]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	e03a      	b.n	800377e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003710:	4b34      	ldr	r3, [pc, #208]	; (80037e4 <HAL_RCC_OscConfig+0x244>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fd ff59 	bl	80015cc <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371e:	f7fd ff55 	bl	80015cc <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1a8      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4925      	ldr	r1, [pc, #148]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]
 8003750:	e015      	b.n	800377e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCC_OscConfig+0x244>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fd ff38 	bl	80015cc <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003760:	f7fd ff34 	bl	80015cc <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e187      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d036      	beq.n	80037f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d016      	beq.n	80037c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_RCC_OscConfig+0x248>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd ff18 	bl	80015cc <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a0:	f7fd ff14 	bl	80015cc <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e167      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80037b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x200>
 80037be:	e01b      	b.n	80037f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_OscConfig+0x248>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c6:	f7fd ff01 	bl	80015cc <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	e00e      	b.n	80037ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ce:	f7fd fefd 	bl	80015cc <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d907      	bls.n	80037ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e150      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	42470000 	.word	0x42470000
 80037e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ec:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ea      	bne.n	80037ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8097 	beq.w	8003934 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380a:	4b81      	ldr	r3, [pc, #516]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	4b7d      	ldr	r3, [pc, #500]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	4a7c      	ldr	r2, [pc, #496]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003824:	6413      	str	r3, [r2, #64]	; 0x40
 8003826:	4b7a      	ldr	r3, [pc, #488]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	4b77      	ldr	r3, [pc, #476]	; (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d118      	bne.n	8003874 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003842:	4b74      	ldr	r3, [pc, #464]	; (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a73      	ldr	r2, [pc, #460]	; (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384e:	f7fd febd 	bl	80015cc <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003856:	f7fd feb9 	bl	80015cc <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e10c      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_OscConfig+0x474>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x2ea>
 800387c:	4b64      	ldr	r3, [pc, #400]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	4a63      	ldr	r2, [pc, #396]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	; 0x70
 8003888:	e01c      	b.n	80038c4 <HAL_RCC_OscConfig+0x324>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x30c>
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a5e      	ldr	r2, [pc, #376]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
 800389e:	4b5c      	ldr	r3, [pc, #368]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a5b      	ldr	r2, [pc, #364]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0x324>
 80038ac:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	4b55      	ldr	r3, [pc, #340]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4a54      	ldr	r2, [pc, #336]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fd fe7e 	bl	80015cc <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d4:	f7fd fe7a 	bl	80015cc <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0cb      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ee      	beq.n	80038d4 <HAL_RCC_OscConfig+0x334>
 80038f6:	e014      	b.n	8003922 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f8:	f7fd fe68 	bl	80015cc <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fd fe64 	bl	80015cc <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0b5      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003916:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ee      	bne.n	8003900 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	4a38      	ldr	r2, [pc, #224]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003932:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80a1 	beq.w	8003a80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393e:	4b34      	ldr	r3, [pc, #208]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b08      	cmp	r3, #8
 8003948:	d05c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d141      	bne.n	80039d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <HAL_RCC_OscConfig+0x478>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fd fe38 	bl	80015cc <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fe34 	bl	80015cc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e087      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	019b      	lsls	r3, r3, #6
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	3b01      	subs	r3, #1
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	491b      	ldr	r1, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x478>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fd fe0d 	bl	80015cc <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fd fe09 	bl	80015cc <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e05c      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x416>
 80039d4:	e054      	b.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCC_OscConfig+0x478>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fd fdf6 	bl	80015cc <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fd fdf2 	bl	80015cc <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e045      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x444>
 8003a02:	e03d      	b.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e038      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <HAL_RCC_OscConfig+0x4ec>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d028      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d121      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d11a      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d111      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	3b01      	subs	r3, #1
 8003a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800

08003a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0cc      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b68      	ldr	r3, [pc, #416]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d90c      	bls.n	8003acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b65      	ldr	r3, [pc, #404]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b63      	ldr	r3, [pc, #396]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0b8      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae4:	4b59      	ldr	r3, [pc, #356]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a58      	ldr	r2, [pc, #352]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003afc:	4b53      	ldr	r3, [pc, #332]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a52      	ldr	r2, [pc, #328]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b50      	ldr	r3, [pc, #320]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	494d      	ldr	r1, [pc, #308]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d044      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d119      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	4b3f      	ldr	r3, [pc, #252]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5e:	4b3b      	ldr	r3, [pc, #236]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e067      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 0203 	bic.w	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4934      	ldr	r1, [pc, #208]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b80:	f7fd fd24 	bl	80015cc <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b88:	f7fd fd20 	bl	80015cc <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e04f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 020c 	and.w	r2, r3, #12
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d1eb      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d20c      	bcs.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e032      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4916      	ldr	r1, [pc, #88]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	490e      	ldr	r1, [pc, #56]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c16:	f000 f821 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	490a      	ldr	r1, [pc, #40]	; (8003c50 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	5ccb      	ldrb	r3, [r1, r3]
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd fc84 	bl	8001544 <HAL_InitTick>

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023c00 	.word	0x40023c00
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	080057a0 	.word	0x080057a0
 8003c54:	20000000 	.word	0x20000000
 8003c58:	20000004 	.word	0x20000004

08003c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c60:	b094      	sub	sp, #80	; 0x50
 8003c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	647b      	str	r3, [r7, #68]	; 0x44
 8003c68:	2300      	movs	r3, #0
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c74:	4b79      	ldr	r3, [pc, #484]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d00d      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x40>
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	f200 80e1 	bhi.w	8003e48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x34>
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c8e:	e0db      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b73      	ldr	r3, [pc, #460]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c94:	e0db      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c96:	4b73      	ldr	r3, [pc, #460]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c9a:	e0d8      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c9c:	4b6f      	ldr	r3, [pc, #444]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ca6:	4b6d      	ldr	r3, [pc, #436]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d063      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb2:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	099b      	lsrs	r3, r3, #6
 8003cb8:	2200      	movs	r2, #0
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cce:	4622      	mov	r2, r4
 8003cd0:	462b      	mov	r3, r5
 8003cd2:	f04f 0000 	mov.w	r0, #0
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	0159      	lsls	r1, r3, #5
 8003cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce0:	0150      	lsls	r0, r2, #5
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	1a51      	subs	r1, r2, r1
 8003cea:	6139      	str	r1, [r7, #16]
 8003cec:	4629      	mov	r1, r5
 8003cee:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d00:	4659      	mov	r1, fp
 8003d02:	018b      	lsls	r3, r1, #6
 8003d04:	4651      	mov	r1, sl
 8003d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	018a      	lsls	r2, r1, #6
 8003d0e:	4651      	mov	r1, sl
 8003d10:	ebb2 0801 	subs.w	r8, r2, r1
 8003d14:	4659      	mov	r1, fp
 8003d16:	eb63 0901 	sbc.w	r9, r3, r1
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d2e:	4690      	mov	r8, r2
 8003d30:	4699      	mov	r9, r3
 8003d32:	4623      	mov	r3, r4
 8003d34:	eb18 0303 	adds.w	r3, r8, r3
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	462b      	mov	r3, r5
 8003d3c:	eb49 0303 	adc.w	r3, r9, r3
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d4e:	4629      	mov	r1, r5
 8003d50:	024b      	lsls	r3, r1, #9
 8003d52:	4621      	mov	r1, r4
 8003d54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d58:	4621      	mov	r1, r4
 8003d5a:	024a      	lsls	r2, r1, #9
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d62:	2200      	movs	r2, #0
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d6c:	f7fc fa90 	bl	8000290 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d78:	e058      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7a:	4b38      	ldr	r3, [pc, #224]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	099b      	lsrs	r3, r3, #6
 8003d80:	2200      	movs	r2, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	4611      	mov	r1, r2
 8003d86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d94:	4642      	mov	r2, r8
 8003d96:	464b      	mov	r3, r9
 8003d98:	f04f 0000 	mov.w	r0, #0
 8003d9c:	f04f 0100 	mov.w	r1, #0
 8003da0:	0159      	lsls	r1, r3, #5
 8003da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da6:	0150      	lsls	r0, r2, #5
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4641      	mov	r1, r8
 8003dae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003db2:	4649      	mov	r1, r9
 8003db4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dcc:	ebb2 040a 	subs.w	r4, r2, sl
 8003dd0:	eb63 050b 	sbc.w	r5, r3, fp
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	00eb      	lsls	r3, r5, #3
 8003dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de2:	00e2      	lsls	r2, r4, #3
 8003de4:	4614      	mov	r4, r2
 8003de6:	461d      	mov	r5, r3
 8003de8:	4643      	mov	r3, r8
 8003dea:	18e3      	adds	r3, r4, r3
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	464b      	mov	r3, r9
 8003df0:	eb45 0303 	adc.w	r3, r5, r3
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e02:	4629      	mov	r1, r5
 8003e04:	028b      	lsls	r3, r1, #10
 8003e06:	4621      	mov	r1, r4
 8003e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	028a      	lsls	r2, r1, #10
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e16:	2200      	movs	r2, #0
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	61fa      	str	r2, [r7, #28]
 8003e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e20:	f7fc fa36 	bl	8000290 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4613      	mov	r3, r2
 8003e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	3301      	adds	r3, #1
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e46:	e002      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3750      	adds	r7, #80	; 0x50
 8003e54:	46bd      	mov	sp, r7
 8003e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	00f42400 	.word	0x00f42400
 8003e64:	007a1200 	.word	0x007a1200

08003e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000000 	.word	0x20000000

08003e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e84:	f7ff fff0 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	0a9b      	lsrs	r3, r3, #10
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4903      	ldr	r1, [pc, #12]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	080057b0 	.word	0x080057b0

08003ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e041      	b.n	8003f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd f9cc 	bl	800126c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f000 fb98 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d001      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e044      	b.n	8003fea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d018      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8a:	d013      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <HAL_TIM_Base_Start_IT+0xb4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00e      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a19      	ldr	r2, [pc, #100]	; (8004000 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_TIM_Base_Start_IT+0xbc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a16      	ldr	r2, [pc, #88]	; (8004008 <HAL_TIM_Base_Start_IT+0xc0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d111      	bne.n	8003fd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b06      	cmp	r3, #6
 8003fc4:	d010      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0201 	orr.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd6:	e007      	b.n	8003fe8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800
 8004004:	40000c00 	.word	0x40000c00
 8004008:	40014000 	.word	0x40014000

0800400c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e041      	b.n	80040a2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f839 	bl	80040aa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f000 fae6 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	6839      	ldr	r1, [r7, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fd48 	bl	8004b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a29      	ldr	r2, [pc, #164]	; (8004184 <HAL_TIM_OC_Stop+0xc4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d117      	bne.n	8004112 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a1a      	ldr	r2, [r3, #32]
 80040e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10f      	bne.n	8004112 <HAL_TIM_OC_Stop+0x52>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	f240 4344 	movw	r3, #1092	; 0x444
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d107      	bne.n	8004112 <HAL_TIM_OC_Stop+0x52>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004110:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6a1a      	ldr	r2, [r3, #32]
 8004118:	f241 1311 	movw	r3, #4369	; 0x1111
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <HAL_TIM_OC_Stop+0x82>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a1a      	ldr	r2, [r3, #32]
 8004128:	f240 4344 	movw	r3, #1092	; 0x444
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d107      	bne.n	8004142 <HAL_TIM_OC_Stop+0x82>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d104      	bne.n	8004152 <HAL_TIM_OC_Stop+0x92>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004150:	e013      	b.n	800417a <HAL_TIM_OC_Stop+0xba>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b04      	cmp	r3, #4
 8004156:	d104      	bne.n	8004162 <HAL_TIM_OC_Stop+0xa2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004160:	e00b      	b.n	800417a <HAL_TIM_OC_Stop+0xba>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d104      	bne.n	8004172 <HAL_TIM_OC_Stop+0xb2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004170:	e003      	b.n	800417a <HAL_TIM_OC_Stop+0xba>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40010000 	.word	0x40010000

08004188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d122      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d11b      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0202 	mvn.w	r2, #2
 80041b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fa07 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 80041d0:	e005      	b.n	80041de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fc fa54 	bl	8000680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fa0a 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d122      	bne.n	8004238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d11b      	bne.n	8004238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0204 	mvn.w	r2, #4
 8004208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2202      	movs	r2, #2
 800420e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f9dd 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fc fa2a 	bl	8000680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f9e0 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b08      	cmp	r3, #8
 8004244:	d122      	bne.n	800428c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b08      	cmp	r3, #8
 8004252:	d11b      	bne.n	800428c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0208 	mvn.w	r2, #8
 800425c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2204      	movs	r2, #4
 8004262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9b3 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 8004278:	e005      	b.n	8004286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fc fa00 	bl	8000680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f9b6 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b10      	cmp	r3, #16
 8004298:	d122      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d11b      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0210 	mvn.w	r2, #16
 80042b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2208      	movs	r2, #8
 80042b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f989 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fc f9d6 	bl	8000680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f98c 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10e      	bne.n	800430c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d107      	bne.n	800430c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0201 	mvn.w	r2, #1
 8004304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc f9e0 	bl	80006cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	2b80      	cmp	r3, #128	; 0x80
 8004318:	d10e      	bne.n	8004338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004324:	2b80      	cmp	r3, #128	; 0x80
 8004326:	d107      	bne.n	8004338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fd08 	bl	8004d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d10e      	bne.n	8004364 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d107      	bne.n	8004364 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f951 	bl	8004606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b20      	cmp	r3, #32
 8004370:	d10e      	bne.n	8004390 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b20      	cmp	r3, #32
 800437e:	d107      	bne.n	8004390 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0220 	mvn.w	r2, #32
 8004388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fcd2 	bl	8004d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e048      	b.n	8004448 <HAL_TIM_OC_ConfigChannel+0xb0>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d839      	bhi.n	8004438 <HAL_TIM_OC_ConfigChannel+0xa0>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004439 	.word	0x08004439
 80043d4:	08004439 	.word	0x08004439
 80043d8:	08004439 	.word	0x08004439
 80043dc:	0800440f 	.word	0x0800440f
 80043e0:	08004439 	.word	0x08004439
 80043e4:	08004439 	.word	0x08004439
 80043e8:	08004439 	.word	0x08004439
 80043ec:	0800441d 	.word	0x0800441d
 80043f0:	08004439 	.word	0x08004439
 80043f4:	08004439 	.word	0x08004439
 80043f8:	08004439 	.word	0x08004439
 80043fc:	0800442b 	.word	0x0800442b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f988 	bl	800471c <TIM_OC1_SetConfig>
      break;
 800440c:	e017      	b.n	800443e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f9e7 	bl	80047e8 <TIM_OC2_SetConfig>
      break;
 800441a:	e010      	b.n	800443e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fa4c 	bl	80048c0 <TIM_OC3_SetConfig>
      break;
 8004428:	e009      	b.n	800443e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	4618      	mov	r0, r3
 8004432:	f000 faaf 	bl	8004994 <TIM_OC4_SetConfig>
      break;
 8004436:	e002      	b.n	800443e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	75fb      	strb	r3, [r7, #23]
      break;
 800443c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004446:	7dfb      	ldrb	r3, [r7, #23]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_TIM_ConfigClockSource+0x1c>
 8004468:	2302      	movs	r3, #2
 800446a:	e0b4      	b.n	80045d6 <HAL_TIM_ConfigClockSource+0x186>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800448a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a4:	d03e      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0xd4>
 80044a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044aa:	f200 8087 	bhi.w	80045bc <HAL_TIM_ConfigClockSource+0x16c>
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b2:	f000 8086 	beq.w	80045c2 <HAL_TIM_ConfigClockSource+0x172>
 80044b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ba:	d87f      	bhi.n	80045bc <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b70      	cmp	r3, #112	; 0x70
 80044be:	d01a      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0xa6>
 80044c0:	2b70      	cmp	r3, #112	; 0x70
 80044c2:	d87b      	bhi.n	80045bc <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b60      	cmp	r3, #96	; 0x60
 80044c6:	d050      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x11a>
 80044c8:	2b60      	cmp	r3, #96	; 0x60
 80044ca:	d877      	bhi.n	80045bc <HAL_TIM_ConfigClockSource+0x16c>
 80044cc:	2b50      	cmp	r3, #80	; 0x50
 80044ce:	d03c      	beq.n	800454a <HAL_TIM_ConfigClockSource+0xfa>
 80044d0:	2b50      	cmp	r3, #80	; 0x50
 80044d2:	d873      	bhi.n	80045bc <HAL_TIM_ConfigClockSource+0x16c>
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	d058      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x13a>
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d86f      	bhi.n	80045bc <HAL_TIM_ConfigClockSource+0x16c>
 80044dc:	2b30      	cmp	r3, #48	; 0x30
 80044de:	d064      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x15a>
 80044e0:	2b30      	cmp	r3, #48	; 0x30
 80044e2:	d86b      	bhi.n	80045bc <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d060      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x15a>
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d867      	bhi.n	80045bc <HAL_TIM_ConfigClockSource+0x16c>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d05c      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x15a>
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d05a      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x15a>
 80044f4:	e062      	b.n	80045bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6899      	ldr	r1, [r3, #8]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f000 fb0f 	bl	8004b28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	609a      	str	r2, [r3, #8]
      break;
 8004522:	e04f      	b.n	80045c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	6899      	ldr	r1, [r3, #8]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f000 faf8 	bl	8004b28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004546:	609a      	str	r2, [r3, #8]
      break;
 8004548:	e03c      	b.n	80045c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	461a      	mov	r2, r3
 8004558:	f000 fa6c 	bl	8004a34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2150      	movs	r1, #80	; 0x50
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fac5 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 8004568:	e02c      	b.n	80045c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	461a      	mov	r2, r3
 8004578:	f000 fa8b 	bl	8004a92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2160      	movs	r1, #96	; 0x60
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fab5 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 8004588:	e01c      	b.n	80045c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6859      	ldr	r1, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	461a      	mov	r2, r3
 8004598:	f000 fa4c 	bl	8004a34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2140      	movs	r1, #64	; 0x40
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 faa5 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 80045a8:	e00c      	b.n	80045c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f000 fa9c 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 80045ba:	e003      	b.n	80045c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      break;
 80045c0:	e000      	b.n	80045c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a34      	ldr	r2, [pc, #208]	; (8004700 <TIM_Base_SetConfig+0xe4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00f      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d00b      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a31      	ldr	r2, [pc, #196]	; (8004704 <TIM_Base_SetConfig+0xe8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d007      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a30      	ldr	r2, [pc, #192]	; (8004708 <TIM_Base_SetConfig+0xec>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a2f      	ldr	r2, [pc, #188]	; (800470c <TIM_Base_SetConfig+0xf0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d108      	bne.n	8004666 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a25      	ldr	r2, [pc, #148]	; (8004700 <TIM_Base_SetConfig+0xe4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01b      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004674:	d017      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a22      	ldr	r2, [pc, #136]	; (8004704 <TIM_Base_SetConfig+0xe8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a21      	ldr	r2, [pc, #132]	; (8004708 <TIM_Base_SetConfig+0xec>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a20      	ldr	r2, [pc, #128]	; (800470c <TIM_Base_SetConfig+0xf0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <TIM_Base_SetConfig+0xf4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <TIM_Base_SetConfig+0xf8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <TIM_Base_SetConfig+0xfc>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a08      	ldr	r2, [pc, #32]	; (8004700 <TIM_Base_SetConfig+0xe4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	615a      	str	r2, [r3, #20]
}
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40014000 	.word	0x40014000
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800

0800471c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0201 	bic.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 0302 	bic.w	r3, r3, #2
 8004764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a1c      	ldr	r2, [pc, #112]	; (80047e4 <TIM_OC1_SetConfig+0xc8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d10c      	bne.n	8004792 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0308 	bic.w	r3, r3, #8
 800477e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <TIM_OC1_SetConfig+0xc8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d111      	bne.n	80047be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	621a      	str	r2, [r3, #32]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40010000 	.word	0x40010000

080047e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0210 	bic.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0320 	bic.w	r3, r3, #32
 8004832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <TIM_OC2_SetConfig+0xd4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10d      	bne.n	8004864 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004862:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a15      	ldr	r2, [pc, #84]	; (80048bc <TIM_OC2_SetConfig+0xd4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d113      	bne.n	8004894 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800487a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000

080048c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <TIM_OC3_SetConfig+0xd0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10d      	bne.n	800493a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a14      	ldr	r2, [pc, #80]	; (8004990 <TIM_OC3_SetConfig+0xd0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d113      	bne.n	800496a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40010000 	.word	0x40010000

08004994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	031b      	lsls	r3, r3, #12
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a10      	ldr	r2, [pc, #64]	; (8004a30 <TIM_OC4_SetConfig+0x9c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d109      	bne.n	8004a08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	019b      	lsls	r3, r3, #6
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000

08004a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 030a 	bic.w	r3, r3, #10
 8004a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b087      	sub	sp, #28
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f023 0210 	bic.w	r2, r3, #16
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	031b      	lsls	r3, r3, #12
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f043 0307 	orr.w	r3, r3, #7
 8004b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	609a      	str	r2, [r3, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	021a      	lsls	r2, r3, #8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1a      	ldr	r2, [r3, #32]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1a      	ldr	r2, [r3, #32]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e050      	b.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d018      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c18:	d013      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a16      	ldr	r2, [pc, #88]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a15      	ldr	r2, [pc, #84]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10c      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40014000 	.word	0x40014000

08004c90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e03d      	b.n	8004d28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <__errno>:
 8004d5c:	4b01      	ldr	r3, [pc, #4]	; (8004d64 <__errno+0x8>)
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	2000000c 	.word	0x2000000c

08004d68 <__libc_init_array>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	4d0d      	ldr	r5, [pc, #52]	; (8004da0 <__libc_init_array+0x38>)
 8004d6c:	4c0d      	ldr	r4, [pc, #52]	; (8004da4 <__libc_init_array+0x3c>)
 8004d6e:	1b64      	subs	r4, r4, r5
 8004d70:	10a4      	asrs	r4, r4, #2
 8004d72:	2600      	movs	r6, #0
 8004d74:	42a6      	cmp	r6, r4
 8004d76:	d109      	bne.n	8004d8c <__libc_init_array+0x24>
 8004d78:	4d0b      	ldr	r5, [pc, #44]	; (8004da8 <__libc_init_array+0x40>)
 8004d7a:	4c0c      	ldr	r4, [pc, #48]	; (8004dac <__libc_init_array+0x44>)
 8004d7c:	f000 fc9c 	bl	80056b8 <_init>
 8004d80:	1b64      	subs	r4, r4, r5
 8004d82:	10a4      	asrs	r4, r4, #2
 8004d84:	2600      	movs	r6, #0
 8004d86:	42a6      	cmp	r6, r4
 8004d88:	d105      	bne.n	8004d96 <__libc_init_array+0x2e>
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d90:	4798      	blx	r3
 8004d92:	3601      	adds	r6, #1
 8004d94:	e7ee      	b.n	8004d74 <__libc_init_array+0xc>
 8004d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d9a:	4798      	blx	r3
 8004d9c:	3601      	adds	r6, #1
 8004d9e:	e7f2      	b.n	8004d86 <__libc_init_array+0x1e>
 8004da0:	080057fc 	.word	0x080057fc
 8004da4:	080057fc 	.word	0x080057fc
 8004da8:	080057fc 	.word	0x080057fc
 8004dac:	08005800 	.word	0x08005800

08004db0 <memset>:
 8004db0:	4402      	add	r2, r0
 8004db2:	4603      	mov	r3, r0
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d100      	bne.n	8004dba <memset+0xa>
 8004db8:	4770      	bx	lr
 8004dba:	f803 1b01 	strb.w	r1, [r3], #1
 8004dbe:	e7f9      	b.n	8004db4 <memset+0x4>

08004dc0 <siprintf>:
 8004dc0:	b40e      	push	{r1, r2, r3}
 8004dc2:	b500      	push	{lr}
 8004dc4:	b09c      	sub	sp, #112	; 0x70
 8004dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc8:	9002      	str	r0, [sp, #8]
 8004dca:	9006      	str	r0, [sp, #24]
 8004dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dd0:	4809      	ldr	r0, [pc, #36]	; (8004df8 <siprintf+0x38>)
 8004dd2:	9107      	str	r1, [sp, #28]
 8004dd4:	9104      	str	r1, [sp, #16]
 8004dd6:	4909      	ldr	r1, [pc, #36]	; (8004dfc <siprintf+0x3c>)
 8004dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ddc:	9105      	str	r1, [sp, #20]
 8004dde:	6800      	ldr	r0, [r0, #0]
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	a902      	add	r1, sp, #8
 8004de4:	f000 f876 	bl	8004ed4 <_svfiprintf_r>
 8004de8:	9b02      	ldr	r3, [sp, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	b01c      	add	sp, #112	; 0x70
 8004df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df4:	b003      	add	sp, #12
 8004df6:	4770      	bx	lr
 8004df8:	2000000c 	.word	0x2000000c
 8004dfc:	ffff0208 	.word	0xffff0208

08004e00 <strcat>:
 8004e00:	b510      	push	{r4, lr}
 8004e02:	4602      	mov	r2, r0
 8004e04:	7814      	ldrb	r4, [r2, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	3201      	adds	r2, #1
 8004e0a:	2c00      	cmp	r4, #0
 8004e0c:	d1fa      	bne.n	8004e04 <strcat+0x4>
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e18:	2a00      	cmp	r2, #0
 8004e1a:	d1f9      	bne.n	8004e10 <strcat+0x10>
 8004e1c:	bd10      	pop	{r4, pc}

08004e1e <__ssputs_r>:
 8004e1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e22:	688e      	ldr	r6, [r1, #8]
 8004e24:	429e      	cmp	r6, r3
 8004e26:	4682      	mov	sl, r0
 8004e28:	460c      	mov	r4, r1
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	461f      	mov	r7, r3
 8004e2e:	d838      	bhi.n	8004ea2 <__ssputs_r+0x84>
 8004e30:	898a      	ldrh	r2, [r1, #12]
 8004e32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e36:	d032      	beq.n	8004e9e <__ssputs_r+0x80>
 8004e38:	6825      	ldr	r5, [r4, #0]
 8004e3a:	6909      	ldr	r1, [r1, #16]
 8004e3c:	eba5 0901 	sub.w	r9, r5, r1
 8004e40:	6965      	ldr	r5, [r4, #20]
 8004e42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	444b      	add	r3, r9
 8004e4e:	106d      	asrs	r5, r5, #1
 8004e50:	429d      	cmp	r5, r3
 8004e52:	bf38      	it	cc
 8004e54:	461d      	movcc	r5, r3
 8004e56:	0553      	lsls	r3, r2, #21
 8004e58:	d531      	bpl.n	8004ebe <__ssputs_r+0xa0>
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f000 fb62 	bl	8005524 <_malloc_r>
 8004e60:	4606      	mov	r6, r0
 8004e62:	b950      	cbnz	r0, 8004e7a <__ssputs_r+0x5c>
 8004e64:	230c      	movs	r3, #12
 8004e66:	f8ca 3000 	str.w	r3, [sl]
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7a:	6921      	ldr	r1, [r4, #16]
 8004e7c:	464a      	mov	r2, r9
 8004e7e:	f000 fabd 	bl	80053fc <memcpy>
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8c:	81a3      	strh	r3, [r4, #12]
 8004e8e:	6126      	str	r6, [r4, #16]
 8004e90:	6165      	str	r5, [r4, #20]
 8004e92:	444e      	add	r6, r9
 8004e94:	eba5 0509 	sub.w	r5, r5, r9
 8004e98:	6026      	str	r6, [r4, #0]
 8004e9a:	60a5      	str	r5, [r4, #8]
 8004e9c:	463e      	mov	r6, r7
 8004e9e:	42be      	cmp	r6, r7
 8004ea0:	d900      	bls.n	8004ea4 <__ssputs_r+0x86>
 8004ea2:	463e      	mov	r6, r7
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	f000 fab5 	bl	8005418 <memmove>
 8004eae:	68a3      	ldr	r3, [r4, #8]
 8004eb0:	1b9b      	subs	r3, r3, r6
 8004eb2:	60a3      	str	r3, [r4, #8]
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	4433      	add	r3, r6
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	2000      	movs	r0, #0
 8004ebc:	e7db      	b.n	8004e76 <__ssputs_r+0x58>
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	f000 fba4 	bl	800560c <_realloc_r>
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	d1e1      	bne.n	8004e8e <__ssputs_r+0x70>
 8004eca:	6921      	ldr	r1, [r4, #16]
 8004ecc:	4650      	mov	r0, sl
 8004ece:	f000 fabd 	bl	800544c <_free_r>
 8004ed2:	e7c7      	b.n	8004e64 <__ssputs_r+0x46>

08004ed4 <_svfiprintf_r>:
 8004ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed8:	4698      	mov	r8, r3
 8004eda:	898b      	ldrh	r3, [r1, #12]
 8004edc:	061b      	lsls	r3, r3, #24
 8004ede:	b09d      	sub	sp, #116	; 0x74
 8004ee0:	4607      	mov	r7, r0
 8004ee2:	460d      	mov	r5, r1
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	d50e      	bpl.n	8004f06 <_svfiprintf_r+0x32>
 8004ee8:	690b      	ldr	r3, [r1, #16]
 8004eea:	b963      	cbnz	r3, 8004f06 <_svfiprintf_r+0x32>
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	f000 fb19 	bl	8005524 <_malloc_r>
 8004ef2:	6028      	str	r0, [r5, #0]
 8004ef4:	6128      	str	r0, [r5, #16]
 8004ef6:	b920      	cbnz	r0, 8004f02 <_svfiprintf_r+0x2e>
 8004ef8:	230c      	movs	r3, #12
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	e0d1      	b.n	80050a6 <_svfiprintf_r+0x1d2>
 8004f02:	2340      	movs	r3, #64	; 0x40
 8004f04:	616b      	str	r3, [r5, #20]
 8004f06:	2300      	movs	r3, #0
 8004f08:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0a:	2320      	movs	r3, #32
 8004f0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f14:	2330      	movs	r3, #48	; 0x30
 8004f16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80050c0 <_svfiprintf_r+0x1ec>
 8004f1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f1e:	f04f 0901 	mov.w	r9, #1
 8004f22:	4623      	mov	r3, r4
 8004f24:	469a      	mov	sl, r3
 8004f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f2a:	b10a      	cbz	r2, 8004f30 <_svfiprintf_r+0x5c>
 8004f2c:	2a25      	cmp	r2, #37	; 0x25
 8004f2e:	d1f9      	bne.n	8004f24 <_svfiprintf_r+0x50>
 8004f30:	ebba 0b04 	subs.w	fp, sl, r4
 8004f34:	d00b      	beq.n	8004f4e <_svfiprintf_r+0x7a>
 8004f36:	465b      	mov	r3, fp
 8004f38:	4622      	mov	r2, r4
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	f7ff ff6e 	bl	8004e1e <__ssputs_r>
 8004f42:	3001      	adds	r0, #1
 8004f44:	f000 80aa 	beq.w	800509c <_svfiprintf_r+0x1c8>
 8004f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f4a:	445a      	add	r2, fp
 8004f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80a2 	beq.w	800509c <_svfiprintf_r+0x1c8>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f62:	f10a 0a01 	add.w	sl, sl, #1
 8004f66:	9304      	str	r3, [sp, #16]
 8004f68:	9307      	str	r3, [sp, #28]
 8004f6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f6e:	931a      	str	r3, [sp, #104]	; 0x68
 8004f70:	4654      	mov	r4, sl
 8004f72:	2205      	movs	r2, #5
 8004f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f78:	4851      	ldr	r0, [pc, #324]	; (80050c0 <_svfiprintf_r+0x1ec>)
 8004f7a:	f7fb f939 	bl	80001f0 <memchr>
 8004f7e:	9a04      	ldr	r2, [sp, #16]
 8004f80:	b9d8      	cbnz	r0, 8004fba <_svfiprintf_r+0xe6>
 8004f82:	06d0      	lsls	r0, r2, #27
 8004f84:	bf44      	itt	mi
 8004f86:	2320      	movmi	r3, #32
 8004f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f8c:	0711      	lsls	r1, r2, #28
 8004f8e:	bf44      	itt	mi
 8004f90:	232b      	movmi	r3, #43	; 0x2b
 8004f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f96:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f9c:	d015      	beq.n	8004fca <_svfiprintf_r+0xf6>
 8004f9e:	9a07      	ldr	r2, [sp, #28]
 8004fa0:	4654      	mov	r4, sl
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f04f 0c0a 	mov.w	ip, #10
 8004fa8:	4621      	mov	r1, r4
 8004faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fae:	3b30      	subs	r3, #48	; 0x30
 8004fb0:	2b09      	cmp	r3, #9
 8004fb2:	d94e      	bls.n	8005052 <_svfiprintf_r+0x17e>
 8004fb4:	b1b0      	cbz	r0, 8004fe4 <_svfiprintf_r+0x110>
 8004fb6:	9207      	str	r2, [sp, #28]
 8004fb8:	e014      	b.n	8004fe4 <_svfiprintf_r+0x110>
 8004fba:	eba0 0308 	sub.w	r3, r0, r8
 8004fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	9304      	str	r3, [sp, #16]
 8004fc6:	46a2      	mov	sl, r4
 8004fc8:	e7d2      	b.n	8004f70 <_svfiprintf_r+0x9c>
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	1d19      	adds	r1, r3, #4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	9103      	str	r1, [sp, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bfbb      	ittet	lt
 8004fd6:	425b      	neglt	r3, r3
 8004fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8004fdc:	9307      	strge	r3, [sp, #28]
 8004fde:	9307      	strlt	r3, [sp, #28]
 8004fe0:	bfb8      	it	lt
 8004fe2:	9204      	strlt	r2, [sp, #16]
 8004fe4:	7823      	ldrb	r3, [r4, #0]
 8004fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8004fe8:	d10c      	bne.n	8005004 <_svfiprintf_r+0x130>
 8004fea:	7863      	ldrb	r3, [r4, #1]
 8004fec:	2b2a      	cmp	r3, #42	; 0x2a
 8004fee:	d135      	bne.n	800505c <_svfiprintf_r+0x188>
 8004ff0:	9b03      	ldr	r3, [sp, #12]
 8004ff2:	1d1a      	adds	r2, r3, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	9203      	str	r2, [sp, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	bfb8      	it	lt
 8004ffc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005000:	3402      	adds	r4, #2
 8005002:	9305      	str	r3, [sp, #20]
 8005004:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050d0 <_svfiprintf_r+0x1fc>
 8005008:	7821      	ldrb	r1, [r4, #0]
 800500a:	2203      	movs	r2, #3
 800500c:	4650      	mov	r0, sl
 800500e:	f7fb f8ef 	bl	80001f0 <memchr>
 8005012:	b140      	cbz	r0, 8005026 <_svfiprintf_r+0x152>
 8005014:	2340      	movs	r3, #64	; 0x40
 8005016:	eba0 000a 	sub.w	r0, r0, sl
 800501a:	fa03 f000 	lsl.w	r0, r3, r0
 800501e:	9b04      	ldr	r3, [sp, #16]
 8005020:	4303      	orrs	r3, r0
 8005022:	3401      	adds	r4, #1
 8005024:	9304      	str	r3, [sp, #16]
 8005026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800502a:	4826      	ldr	r0, [pc, #152]	; (80050c4 <_svfiprintf_r+0x1f0>)
 800502c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005030:	2206      	movs	r2, #6
 8005032:	f7fb f8dd 	bl	80001f0 <memchr>
 8005036:	2800      	cmp	r0, #0
 8005038:	d038      	beq.n	80050ac <_svfiprintf_r+0x1d8>
 800503a:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <_svfiprintf_r+0x1f4>)
 800503c:	bb1b      	cbnz	r3, 8005086 <_svfiprintf_r+0x1b2>
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	3307      	adds	r3, #7
 8005042:	f023 0307 	bic.w	r3, r3, #7
 8005046:	3308      	adds	r3, #8
 8005048:	9303      	str	r3, [sp, #12]
 800504a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504c:	4433      	add	r3, r6
 800504e:	9309      	str	r3, [sp, #36]	; 0x24
 8005050:	e767      	b.n	8004f22 <_svfiprintf_r+0x4e>
 8005052:	fb0c 3202 	mla	r2, ip, r2, r3
 8005056:	460c      	mov	r4, r1
 8005058:	2001      	movs	r0, #1
 800505a:	e7a5      	b.n	8004fa8 <_svfiprintf_r+0xd4>
 800505c:	2300      	movs	r3, #0
 800505e:	3401      	adds	r4, #1
 8005060:	9305      	str	r3, [sp, #20]
 8005062:	4619      	mov	r1, r3
 8005064:	f04f 0c0a 	mov.w	ip, #10
 8005068:	4620      	mov	r0, r4
 800506a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800506e:	3a30      	subs	r2, #48	; 0x30
 8005070:	2a09      	cmp	r2, #9
 8005072:	d903      	bls.n	800507c <_svfiprintf_r+0x1a8>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0c5      	beq.n	8005004 <_svfiprintf_r+0x130>
 8005078:	9105      	str	r1, [sp, #20]
 800507a:	e7c3      	b.n	8005004 <_svfiprintf_r+0x130>
 800507c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005080:	4604      	mov	r4, r0
 8005082:	2301      	movs	r3, #1
 8005084:	e7f0      	b.n	8005068 <_svfiprintf_r+0x194>
 8005086:	ab03      	add	r3, sp, #12
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	462a      	mov	r2, r5
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <_svfiprintf_r+0x1f8>)
 800508e:	a904      	add	r1, sp, #16
 8005090:	4638      	mov	r0, r7
 8005092:	f3af 8000 	nop.w
 8005096:	1c42      	adds	r2, r0, #1
 8005098:	4606      	mov	r6, r0
 800509a:	d1d6      	bne.n	800504a <_svfiprintf_r+0x176>
 800509c:	89ab      	ldrh	r3, [r5, #12]
 800509e:	065b      	lsls	r3, r3, #25
 80050a0:	f53f af2c 	bmi.w	8004efc <_svfiprintf_r+0x28>
 80050a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050a6:	b01d      	add	sp, #116	; 0x74
 80050a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ac:	ab03      	add	r3, sp, #12
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	462a      	mov	r2, r5
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <_svfiprintf_r+0x1f8>)
 80050b4:	a904      	add	r1, sp, #16
 80050b6:	4638      	mov	r0, r7
 80050b8:	f000 f87a 	bl	80051b0 <_printf_i>
 80050bc:	e7eb      	b.n	8005096 <_svfiprintf_r+0x1c2>
 80050be:	bf00      	nop
 80050c0:	080057c0 	.word	0x080057c0
 80050c4:	080057ca 	.word	0x080057ca
 80050c8:	00000000 	.word	0x00000000
 80050cc:	08004e1f 	.word	0x08004e1f
 80050d0:	080057c6 	.word	0x080057c6

080050d4 <_printf_common>:
 80050d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	4616      	mov	r6, r2
 80050da:	4699      	mov	r9, r3
 80050dc:	688a      	ldr	r2, [r1, #8]
 80050de:	690b      	ldr	r3, [r1, #16]
 80050e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050e4:	4293      	cmp	r3, r2
 80050e6:	bfb8      	it	lt
 80050e8:	4613      	movlt	r3, r2
 80050ea:	6033      	str	r3, [r6, #0]
 80050ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f0:	4607      	mov	r7, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	b10a      	cbz	r2, 80050fa <_printf_common+0x26>
 80050f6:	3301      	adds	r3, #1
 80050f8:	6033      	str	r3, [r6, #0]
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	0699      	lsls	r1, r3, #26
 80050fe:	bf42      	ittt	mi
 8005100:	6833      	ldrmi	r3, [r6, #0]
 8005102:	3302      	addmi	r3, #2
 8005104:	6033      	strmi	r3, [r6, #0]
 8005106:	6825      	ldr	r5, [r4, #0]
 8005108:	f015 0506 	ands.w	r5, r5, #6
 800510c:	d106      	bne.n	800511c <_printf_common+0x48>
 800510e:	f104 0a19 	add.w	sl, r4, #25
 8005112:	68e3      	ldr	r3, [r4, #12]
 8005114:	6832      	ldr	r2, [r6, #0]
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	42ab      	cmp	r3, r5
 800511a:	dc26      	bgt.n	800516a <_printf_common+0x96>
 800511c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005120:	1e13      	subs	r3, r2, #0
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	bf18      	it	ne
 8005126:	2301      	movne	r3, #1
 8005128:	0692      	lsls	r2, r2, #26
 800512a:	d42b      	bmi.n	8005184 <_printf_common+0xb0>
 800512c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005130:	4649      	mov	r1, r9
 8005132:	4638      	mov	r0, r7
 8005134:	47c0      	blx	r8
 8005136:	3001      	adds	r0, #1
 8005138:	d01e      	beq.n	8005178 <_printf_common+0xa4>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	68e5      	ldr	r5, [r4, #12]
 800513e:	6832      	ldr	r2, [r6, #0]
 8005140:	f003 0306 	and.w	r3, r3, #6
 8005144:	2b04      	cmp	r3, #4
 8005146:	bf08      	it	eq
 8005148:	1aad      	subeq	r5, r5, r2
 800514a:	68a3      	ldr	r3, [r4, #8]
 800514c:	6922      	ldr	r2, [r4, #16]
 800514e:	bf0c      	ite	eq
 8005150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005154:	2500      	movne	r5, #0
 8005156:	4293      	cmp	r3, r2
 8005158:	bfc4      	itt	gt
 800515a:	1a9b      	subgt	r3, r3, r2
 800515c:	18ed      	addgt	r5, r5, r3
 800515e:	2600      	movs	r6, #0
 8005160:	341a      	adds	r4, #26
 8005162:	42b5      	cmp	r5, r6
 8005164:	d11a      	bne.n	800519c <_printf_common+0xc8>
 8005166:	2000      	movs	r0, #0
 8005168:	e008      	b.n	800517c <_printf_common+0xa8>
 800516a:	2301      	movs	r3, #1
 800516c:	4652      	mov	r2, sl
 800516e:	4649      	mov	r1, r9
 8005170:	4638      	mov	r0, r7
 8005172:	47c0      	blx	r8
 8005174:	3001      	adds	r0, #1
 8005176:	d103      	bne.n	8005180 <_printf_common+0xac>
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005180:	3501      	adds	r5, #1
 8005182:	e7c6      	b.n	8005112 <_printf_common+0x3e>
 8005184:	18e1      	adds	r1, r4, r3
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	2030      	movs	r0, #48	; 0x30
 800518a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800518e:	4422      	add	r2, r4
 8005190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005198:	3302      	adds	r3, #2
 800519a:	e7c7      	b.n	800512c <_printf_common+0x58>
 800519c:	2301      	movs	r3, #1
 800519e:	4622      	mov	r2, r4
 80051a0:	4649      	mov	r1, r9
 80051a2:	4638      	mov	r0, r7
 80051a4:	47c0      	blx	r8
 80051a6:	3001      	adds	r0, #1
 80051a8:	d0e6      	beq.n	8005178 <_printf_common+0xa4>
 80051aa:	3601      	adds	r6, #1
 80051ac:	e7d9      	b.n	8005162 <_printf_common+0x8e>
	...

080051b0 <_printf_i>:
 80051b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051b4:	7e0f      	ldrb	r7, [r1, #24]
 80051b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051b8:	2f78      	cmp	r7, #120	; 0x78
 80051ba:	4691      	mov	r9, r2
 80051bc:	4680      	mov	r8, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	469a      	mov	sl, r3
 80051c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051c6:	d807      	bhi.n	80051d8 <_printf_i+0x28>
 80051c8:	2f62      	cmp	r7, #98	; 0x62
 80051ca:	d80a      	bhi.n	80051e2 <_printf_i+0x32>
 80051cc:	2f00      	cmp	r7, #0
 80051ce:	f000 80d8 	beq.w	8005382 <_printf_i+0x1d2>
 80051d2:	2f58      	cmp	r7, #88	; 0x58
 80051d4:	f000 80a3 	beq.w	800531e <_printf_i+0x16e>
 80051d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051e0:	e03a      	b.n	8005258 <_printf_i+0xa8>
 80051e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051e6:	2b15      	cmp	r3, #21
 80051e8:	d8f6      	bhi.n	80051d8 <_printf_i+0x28>
 80051ea:	a101      	add	r1, pc, #4	; (adr r1, 80051f0 <_printf_i+0x40>)
 80051ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051f0:	08005249 	.word	0x08005249
 80051f4:	0800525d 	.word	0x0800525d
 80051f8:	080051d9 	.word	0x080051d9
 80051fc:	080051d9 	.word	0x080051d9
 8005200:	080051d9 	.word	0x080051d9
 8005204:	080051d9 	.word	0x080051d9
 8005208:	0800525d 	.word	0x0800525d
 800520c:	080051d9 	.word	0x080051d9
 8005210:	080051d9 	.word	0x080051d9
 8005214:	080051d9 	.word	0x080051d9
 8005218:	080051d9 	.word	0x080051d9
 800521c:	08005369 	.word	0x08005369
 8005220:	0800528d 	.word	0x0800528d
 8005224:	0800534b 	.word	0x0800534b
 8005228:	080051d9 	.word	0x080051d9
 800522c:	080051d9 	.word	0x080051d9
 8005230:	0800538b 	.word	0x0800538b
 8005234:	080051d9 	.word	0x080051d9
 8005238:	0800528d 	.word	0x0800528d
 800523c:	080051d9 	.word	0x080051d9
 8005240:	080051d9 	.word	0x080051d9
 8005244:	08005353 	.word	0x08005353
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	1d1a      	adds	r2, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	602a      	str	r2, [r5, #0]
 8005250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005258:	2301      	movs	r3, #1
 800525a:	e0a3      	b.n	80053a4 <_printf_i+0x1f4>
 800525c:	6820      	ldr	r0, [r4, #0]
 800525e:	6829      	ldr	r1, [r5, #0]
 8005260:	0606      	lsls	r6, r0, #24
 8005262:	f101 0304 	add.w	r3, r1, #4
 8005266:	d50a      	bpl.n	800527e <_printf_i+0xce>
 8005268:	680e      	ldr	r6, [r1, #0]
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	2e00      	cmp	r6, #0
 800526e:	da03      	bge.n	8005278 <_printf_i+0xc8>
 8005270:	232d      	movs	r3, #45	; 0x2d
 8005272:	4276      	negs	r6, r6
 8005274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005278:	485e      	ldr	r0, [pc, #376]	; (80053f4 <_printf_i+0x244>)
 800527a:	230a      	movs	r3, #10
 800527c:	e019      	b.n	80052b2 <_printf_i+0x102>
 800527e:	680e      	ldr	r6, [r1, #0]
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005286:	bf18      	it	ne
 8005288:	b236      	sxthne	r6, r6
 800528a:	e7ef      	b.n	800526c <_printf_i+0xbc>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	6820      	ldr	r0, [r4, #0]
 8005290:	1d19      	adds	r1, r3, #4
 8005292:	6029      	str	r1, [r5, #0]
 8005294:	0601      	lsls	r1, r0, #24
 8005296:	d501      	bpl.n	800529c <_printf_i+0xec>
 8005298:	681e      	ldr	r6, [r3, #0]
 800529a:	e002      	b.n	80052a2 <_printf_i+0xf2>
 800529c:	0646      	lsls	r6, r0, #25
 800529e:	d5fb      	bpl.n	8005298 <_printf_i+0xe8>
 80052a0:	881e      	ldrh	r6, [r3, #0]
 80052a2:	4854      	ldr	r0, [pc, #336]	; (80053f4 <_printf_i+0x244>)
 80052a4:	2f6f      	cmp	r7, #111	; 0x6f
 80052a6:	bf0c      	ite	eq
 80052a8:	2308      	moveq	r3, #8
 80052aa:	230a      	movne	r3, #10
 80052ac:	2100      	movs	r1, #0
 80052ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052b2:	6865      	ldr	r5, [r4, #4]
 80052b4:	60a5      	str	r5, [r4, #8]
 80052b6:	2d00      	cmp	r5, #0
 80052b8:	bfa2      	ittt	ge
 80052ba:	6821      	ldrge	r1, [r4, #0]
 80052bc:	f021 0104 	bicge.w	r1, r1, #4
 80052c0:	6021      	strge	r1, [r4, #0]
 80052c2:	b90e      	cbnz	r6, 80052c8 <_printf_i+0x118>
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	d04d      	beq.n	8005364 <_printf_i+0x1b4>
 80052c8:	4615      	mov	r5, r2
 80052ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80052ce:	fb03 6711 	mls	r7, r3, r1, r6
 80052d2:	5dc7      	ldrb	r7, [r0, r7]
 80052d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052d8:	4637      	mov	r7, r6
 80052da:	42bb      	cmp	r3, r7
 80052dc:	460e      	mov	r6, r1
 80052de:	d9f4      	bls.n	80052ca <_printf_i+0x11a>
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d10b      	bne.n	80052fc <_printf_i+0x14c>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	07de      	lsls	r6, r3, #31
 80052e8:	d508      	bpl.n	80052fc <_printf_i+0x14c>
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	6861      	ldr	r1, [r4, #4]
 80052ee:	4299      	cmp	r1, r3
 80052f0:	bfde      	ittt	le
 80052f2:	2330      	movle	r3, #48	; 0x30
 80052f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052fc:	1b52      	subs	r2, r2, r5
 80052fe:	6122      	str	r2, [r4, #16]
 8005300:	f8cd a000 	str.w	sl, [sp]
 8005304:	464b      	mov	r3, r9
 8005306:	aa03      	add	r2, sp, #12
 8005308:	4621      	mov	r1, r4
 800530a:	4640      	mov	r0, r8
 800530c:	f7ff fee2 	bl	80050d4 <_printf_common>
 8005310:	3001      	adds	r0, #1
 8005312:	d14c      	bne.n	80053ae <_printf_i+0x1fe>
 8005314:	f04f 30ff 	mov.w	r0, #4294967295
 8005318:	b004      	add	sp, #16
 800531a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531e:	4835      	ldr	r0, [pc, #212]	; (80053f4 <_printf_i+0x244>)
 8005320:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005324:	6829      	ldr	r1, [r5, #0]
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	f851 6b04 	ldr.w	r6, [r1], #4
 800532c:	6029      	str	r1, [r5, #0]
 800532e:	061d      	lsls	r5, r3, #24
 8005330:	d514      	bpl.n	800535c <_printf_i+0x1ac>
 8005332:	07df      	lsls	r7, r3, #31
 8005334:	bf44      	itt	mi
 8005336:	f043 0320 	orrmi.w	r3, r3, #32
 800533a:	6023      	strmi	r3, [r4, #0]
 800533c:	b91e      	cbnz	r6, 8005346 <_printf_i+0x196>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	f023 0320 	bic.w	r3, r3, #32
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	2310      	movs	r3, #16
 8005348:	e7b0      	b.n	80052ac <_printf_i+0xfc>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	f043 0320 	orr.w	r3, r3, #32
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	2378      	movs	r3, #120	; 0x78
 8005354:	4828      	ldr	r0, [pc, #160]	; (80053f8 <_printf_i+0x248>)
 8005356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800535a:	e7e3      	b.n	8005324 <_printf_i+0x174>
 800535c:	0659      	lsls	r1, r3, #25
 800535e:	bf48      	it	mi
 8005360:	b2b6      	uxthmi	r6, r6
 8005362:	e7e6      	b.n	8005332 <_printf_i+0x182>
 8005364:	4615      	mov	r5, r2
 8005366:	e7bb      	b.n	80052e0 <_printf_i+0x130>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	6826      	ldr	r6, [r4, #0]
 800536c:	6961      	ldr	r1, [r4, #20]
 800536e:	1d18      	adds	r0, r3, #4
 8005370:	6028      	str	r0, [r5, #0]
 8005372:	0635      	lsls	r5, r6, #24
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	d501      	bpl.n	800537c <_printf_i+0x1cc>
 8005378:	6019      	str	r1, [r3, #0]
 800537a:	e002      	b.n	8005382 <_printf_i+0x1d2>
 800537c:	0670      	lsls	r0, r6, #25
 800537e:	d5fb      	bpl.n	8005378 <_printf_i+0x1c8>
 8005380:	8019      	strh	r1, [r3, #0]
 8005382:	2300      	movs	r3, #0
 8005384:	6123      	str	r3, [r4, #16]
 8005386:	4615      	mov	r5, r2
 8005388:	e7ba      	b.n	8005300 <_printf_i+0x150>
 800538a:	682b      	ldr	r3, [r5, #0]
 800538c:	1d1a      	adds	r2, r3, #4
 800538e:	602a      	str	r2, [r5, #0]
 8005390:	681d      	ldr	r5, [r3, #0]
 8005392:	6862      	ldr	r2, [r4, #4]
 8005394:	2100      	movs	r1, #0
 8005396:	4628      	mov	r0, r5
 8005398:	f7fa ff2a 	bl	80001f0 <memchr>
 800539c:	b108      	cbz	r0, 80053a2 <_printf_i+0x1f2>
 800539e:	1b40      	subs	r0, r0, r5
 80053a0:	6060      	str	r0, [r4, #4]
 80053a2:	6863      	ldr	r3, [r4, #4]
 80053a4:	6123      	str	r3, [r4, #16]
 80053a6:	2300      	movs	r3, #0
 80053a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ac:	e7a8      	b.n	8005300 <_printf_i+0x150>
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	462a      	mov	r2, r5
 80053b2:	4649      	mov	r1, r9
 80053b4:	4640      	mov	r0, r8
 80053b6:	47d0      	blx	sl
 80053b8:	3001      	adds	r0, #1
 80053ba:	d0ab      	beq.n	8005314 <_printf_i+0x164>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	079b      	lsls	r3, r3, #30
 80053c0:	d413      	bmi.n	80053ea <_printf_i+0x23a>
 80053c2:	68e0      	ldr	r0, [r4, #12]
 80053c4:	9b03      	ldr	r3, [sp, #12]
 80053c6:	4298      	cmp	r0, r3
 80053c8:	bfb8      	it	lt
 80053ca:	4618      	movlt	r0, r3
 80053cc:	e7a4      	b.n	8005318 <_printf_i+0x168>
 80053ce:	2301      	movs	r3, #1
 80053d0:	4632      	mov	r2, r6
 80053d2:	4649      	mov	r1, r9
 80053d4:	4640      	mov	r0, r8
 80053d6:	47d0      	blx	sl
 80053d8:	3001      	adds	r0, #1
 80053da:	d09b      	beq.n	8005314 <_printf_i+0x164>
 80053dc:	3501      	adds	r5, #1
 80053de:	68e3      	ldr	r3, [r4, #12]
 80053e0:	9903      	ldr	r1, [sp, #12]
 80053e2:	1a5b      	subs	r3, r3, r1
 80053e4:	42ab      	cmp	r3, r5
 80053e6:	dcf2      	bgt.n	80053ce <_printf_i+0x21e>
 80053e8:	e7eb      	b.n	80053c2 <_printf_i+0x212>
 80053ea:	2500      	movs	r5, #0
 80053ec:	f104 0619 	add.w	r6, r4, #25
 80053f0:	e7f5      	b.n	80053de <_printf_i+0x22e>
 80053f2:	bf00      	nop
 80053f4:	080057d1 	.word	0x080057d1
 80053f8:	080057e2 	.word	0x080057e2

080053fc <memcpy>:
 80053fc:	440a      	add	r2, r1
 80053fe:	4291      	cmp	r1, r2
 8005400:	f100 33ff 	add.w	r3, r0, #4294967295
 8005404:	d100      	bne.n	8005408 <memcpy+0xc>
 8005406:	4770      	bx	lr
 8005408:	b510      	push	{r4, lr}
 800540a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800540e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005412:	4291      	cmp	r1, r2
 8005414:	d1f9      	bne.n	800540a <memcpy+0xe>
 8005416:	bd10      	pop	{r4, pc}

08005418 <memmove>:
 8005418:	4288      	cmp	r0, r1
 800541a:	b510      	push	{r4, lr}
 800541c:	eb01 0402 	add.w	r4, r1, r2
 8005420:	d902      	bls.n	8005428 <memmove+0x10>
 8005422:	4284      	cmp	r4, r0
 8005424:	4623      	mov	r3, r4
 8005426:	d807      	bhi.n	8005438 <memmove+0x20>
 8005428:	1e43      	subs	r3, r0, #1
 800542a:	42a1      	cmp	r1, r4
 800542c:	d008      	beq.n	8005440 <memmove+0x28>
 800542e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005432:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005436:	e7f8      	b.n	800542a <memmove+0x12>
 8005438:	4402      	add	r2, r0
 800543a:	4601      	mov	r1, r0
 800543c:	428a      	cmp	r2, r1
 800543e:	d100      	bne.n	8005442 <memmove+0x2a>
 8005440:	bd10      	pop	{r4, pc}
 8005442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800544a:	e7f7      	b.n	800543c <memmove+0x24>

0800544c <_free_r>:
 800544c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800544e:	2900      	cmp	r1, #0
 8005450:	d044      	beq.n	80054dc <_free_r+0x90>
 8005452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005456:	9001      	str	r0, [sp, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f1a1 0404 	sub.w	r4, r1, #4
 800545e:	bfb8      	it	lt
 8005460:	18e4      	addlt	r4, r4, r3
 8005462:	f000 f913 	bl	800568c <__malloc_lock>
 8005466:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <_free_r+0x94>)
 8005468:	9801      	ldr	r0, [sp, #4]
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	b933      	cbnz	r3, 800547c <_free_r+0x30>
 800546e:	6063      	str	r3, [r4, #4]
 8005470:	6014      	str	r4, [r2, #0]
 8005472:	b003      	add	sp, #12
 8005474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005478:	f000 b90e 	b.w	8005698 <__malloc_unlock>
 800547c:	42a3      	cmp	r3, r4
 800547e:	d908      	bls.n	8005492 <_free_r+0x46>
 8005480:	6825      	ldr	r5, [r4, #0]
 8005482:	1961      	adds	r1, r4, r5
 8005484:	428b      	cmp	r3, r1
 8005486:	bf01      	itttt	eq
 8005488:	6819      	ldreq	r1, [r3, #0]
 800548a:	685b      	ldreq	r3, [r3, #4]
 800548c:	1949      	addeq	r1, r1, r5
 800548e:	6021      	streq	r1, [r4, #0]
 8005490:	e7ed      	b.n	800546e <_free_r+0x22>
 8005492:	461a      	mov	r2, r3
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b10b      	cbz	r3, 800549c <_free_r+0x50>
 8005498:	42a3      	cmp	r3, r4
 800549a:	d9fa      	bls.n	8005492 <_free_r+0x46>
 800549c:	6811      	ldr	r1, [r2, #0]
 800549e:	1855      	adds	r5, r2, r1
 80054a0:	42a5      	cmp	r5, r4
 80054a2:	d10b      	bne.n	80054bc <_free_r+0x70>
 80054a4:	6824      	ldr	r4, [r4, #0]
 80054a6:	4421      	add	r1, r4
 80054a8:	1854      	adds	r4, r2, r1
 80054aa:	42a3      	cmp	r3, r4
 80054ac:	6011      	str	r1, [r2, #0]
 80054ae:	d1e0      	bne.n	8005472 <_free_r+0x26>
 80054b0:	681c      	ldr	r4, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	6053      	str	r3, [r2, #4]
 80054b6:	4421      	add	r1, r4
 80054b8:	6011      	str	r1, [r2, #0]
 80054ba:	e7da      	b.n	8005472 <_free_r+0x26>
 80054bc:	d902      	bls.n	80054c4 <_free_r+0x78>
 80054be:	230c      	movs	r3, #12
 80054c0:	6003      	str	r3, [r0, #0]
 80054c2:	e7d6      	b.n	8005472 <_free_r+0x26>
 80054c4:	6825      	ldr	r5, [r4, #0]
 80054c6:	1961      	adds	r1, r4, r5
 80054c8:	428b      	cmp	r3, r1
 80054ca:	bf04      	itt	eq
 80054cc:	6819      	ldreq	r1, [r3, #0]
 80054ce:	685b      	ldreq	r3, [r3, #4]
 80054d0:	6063      	str	r3, [r4, #4]
 80054d2:	bf04      	itt	eq
 80054d4:	1949      	addeq	r1, r1, r5
 80054d6:	6021      	streq	r1, [r4, #0]
 80054d8:	6054      	str	r4, [r2, #4]
 80054da:	e7ca      	b.n	8005472 <_free_r+0x26>
 80054dc:	b003      	add	sp, #12
 80054de:	bd30      	pop	{r4, r5, pc}
 80054e0:	20000258 	.word	0x20000258

080054e4 <sbrk_aligned>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4e0e      	ldr	r6, [pc, #56]	; (8005520 <sbrk_aligned+0x3c>)
 80054e8:	460c      	mov	r4, r1
 80054ea:	6831      	ldr	r1, [r6, #0]
 80054ec:	4605      	mov	r5, r0
 80054ee:	b911      	cbnz	r1, 80054f6 <sbrk_aligned+0x12>
 80054f0:	f000 f8bc 	bl	800566c <_sbrk_r>
 80054f4:	6030      	str	r0, [r6, #0]
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f000 f8b7 	bl	800566c <_sbrk_r>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	d00a      	beq.n	8005518 <sbrk_aligned+0x34>
 8005502:	1cc4      	adds	r4, r0, #3
 8005504:	f024 0403 	bic.w	r4, r4, #3
 8005508:	42a0      	cmp	r0, r4
 800550a:	d007      	beq.n	800551c <sbrk_aligned+0x38>
 800550c:	1a21      	subs	r1, r4, r0
 800550e:	4628      	mov	r0, r5
 8005510:	f000 f8ac 	bl	800566c <_sbrk_r>
 8005514:	3001      	adds	r0, #1
 8005516:	d101      	bne.n	800551c <sbrk_aligned+0x38>
 8005518:	f04f 34ff 	mov.w	r4, #4294967295
 800551c:	4620      	mov	r0, r4
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	2000025c 	.word	0x2000025c

08005524 <_malloc_r>:
 8005524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005528:	1ccd      	adds	r5, r1, #3
 800552a:	f025 0503 	bic.w	r5, r5, #3
 800552e:	3508      	adds	r5, #8
 8005530:	2d0c      	cmp	r5, #12
 8005532:	bf38      	it	cc
 8005534:	250c      	movcc	r5, #12
 8005536:	2d00      	cmp	r5, #0
 8005538:	4607      	mov	r7, r0
 800553a:	db01      	blt.n	8005540 <_malloc_r+0x1c>
 800553c:	42a9      	cmp	r1, r5
 800553e:	d905      	bls.n	800554c <_malloc_r+0x28>
 8005540:	230c      	movs	r3, #12
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	2600      	movs	r6, #0
 8005546:	4630      	mov	r0, r6
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800554c:	4e2e      	ldr	r6, [pc, #184]	; (8005608 <_malloc_r+0xe4>)
 800554e:	f000 f89d 	bl	800568c <__malloc_lock>
 8005552:	6833      	ldr	r3, [r6, #0]
 8005554:	461c      	mov	r4, r3
 8005556:	bb34      	cbnz	r4, 80055a6 <_malloc_r+0x82>
 8005558:	4629      	mov	r1, r5
 800555a:	4638      	mov	r0, r7
 800555c:	f7ff ffc2 	bl	80054e4 <sbrk_aligned>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	4604      	mov	r4, r0
 8005564:	d14d      	bne.n	8005602 <_malloc_r+0xde>
 8005566:	6834      	ldr	r4, [r6, #0]
 8005568:	4626      	mov	r6, r4
 800556a:	2e00      	cmp	r6, #0
 800556c:	d140      	bne.n	80055f0 <_malloc_r+0xcc>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	4631      	mov	r1, r6
 8005572:	4638      	mov	r0, r7
 8005574:	eb04 0803 	add.w	r8, r4, r3
 8005578:	f000 f878 	bl	800566c <_sbrk_r>
 800557c:	4580      	cmp	r8, r0
 800557e:	d13a      	bne.n	80055f6 <_malloc_r+0xd2>
 8005580:	6821      	ldr	r1, [r4, #0]
 8005582:	3503      	adds	r5, #3
 8005584:	1a6d      	subs	r5, r5, r1
 8005586:	f025 0503 	bic.w	r5, r5, #3
 800558a:	3508      	adds	r5, #8
 800558c:	2d0c      	cmp	r5, #12
 800558e:	bf38      	it	cc
 8005590:	250c      	movcc	r5, #12
 8005592:	4629      	mov	r1, r5
 8005594:	4638      	mov	r0, r7
 8005596:	f7ff ffa5 	bl	80054e4 <sbrk_aligned>
 800559a:	3001      	adds	r0, #1
 800559c:	d02b      	beq.n	80055f6 <_malloc_r+0xd2>
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	442b      	add	r3, r5
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	e00e      	b.n	80055c4 <_malloc_r+0xa0>
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	1b52      	subs	r2, r2, r5
 80055aa:	d41e      	bmi.n	80055ea <_malloc_r+0xc6>
 80055ac:	2a0b      	cmp	r2, #11
 80055ae:	d916      	bls.n	80055de <_malloc_r+0xba>
 80055b0:	1961      	adds	r1, r4, r5
 80055b2:	42a3      	cmp	r3, r4
 80055b4:	6025      	str	r5, [r4, #0]
 80055b6:	bf18      	it	ne
 80055b8:	6059      	strne	r1, [r3, #4]
 80055ba:	6863      	ldr	r3, [r4, #4]
 80055bc:	bf08      	it	eq
 80055be:	6031      	streq	r1, [r6, #0]
 80055c0:	5162      	str	r2, [r4, r5]
 80055c2:	604b      	str	r3, [r1, #4]
 80055c4:	4638      	mov	r0, r7
 80055c6:	f104 060b 	add.w	r6, r4, #11
 80055ca:	f000 f865 	bl	8005698 <__malloc_unlock>
 80055ce:	f026 0607 	bic.w	r6, r6, #7
 80055d2:	1d23      	adds	r3, r4, #4
 80055d4:	1af2      	subs	r2, r6, r3
 80055d6:	d0b6      	beq.n	8005546 <_malloc_r+0x22>
 80055d8:	1b9b      	subs	r3, r3, r6
 80055da:	50a3      	str	r3, [r4, r2]
 80055dc:	e7b3      	b.n	8005546 <_malloc_r+0x22>
 80055de:	6862      	ldr	r2, [r4, #4]
 80055e0:	42a3      	cmp	r3, r4
 80055e2:	bf0c      	ite	eq
 80055e4:	6032      	streq	r2, [r6, #0]
 80055e6:	605a      	strne	r2, [r3, #4]
 80055e8:	e7ec      	b.n	80055c4 <_malloc_r+0xa0>
 80055ea:	4623      	mov	r3, r4
 80055ec:	6864      	ldr	r4, [r4, #4]
 80055ee:	e7b2      	b.n	8005556 <_malloc_r+0x32>
 80055f0:	4634      	mov	r4, r6
 80055f2:	6876      	ldr	r6, [r6, #4]
 80055f4:	e7b9      	b.n	800556a <_malloc_r+0x46>
 80055f6:	230c      	movs	r3, #12
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	4638      	mov	r0, r7
 80055fc:	f000 f84c 	bl	8005698 <__malloc_unlock>
 8005600:	e7a1      	b.n	8005546 <_malloc_r+0x22>
 8005602:	6025      	str	r5, [r4, #0]
 8005604:	e7de      	b.n	80055c4 <_malloc_r+0xa0>
 8005606:	bf00      	nop
 8005608:	20000258 	.word	0x20000258

0800560c <_realloc_r>:
 800560c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005610:	4680      	mov	r8, r0
 8005612:	4614      	mov	r4, r2
 8005614:	460e      	mov	r6, r1
 8005616:	b921      	cbnz	r1, 8005622 <_realloc_r+0x16>
 8005618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800561c:	4611      	mov	r1, r2
 800561e:	f7ff bf81 	b.w	8005524 <_malloc_r>
 8005622:	b92a      	cbnz	r2, 8005630 <_realloc_r+0x24>
 8005624:	f7ff ff12 	bl	800544c <_free_r>
 8005628:	4625      	mov	r5, r4
 800562a:	4628      	mov	r0, r5
 800562c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005630:	f000 f838 	bl	80056a4 <_malloc_usable_size_r>
 8005634:	4284      	cmp	r4, r0
 8005636:	4607      	mov	r7, r0
 8005638:	d802      	bhi.n	8005640 <_realloc_r+0x34>
 800563a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800563e:	d812      	bhi.n	8005666 <_realloc_r+0x5a>
 8005640:	4621      	mov	r1, r4
 8005642:	4640      	mov	r0, r8
 8005644:	f7ff ff6e 	bl	8005524 <_malloc_r>
 8005648:	4605      	mov	r5, r0
 800564a:	2800      	cmp	r0, #0
 800564c:	d0ed      	beq.n	800562a <_realloc_r+0x1e>
 800564e:	42bc      	cmp	r4, r7
 8005650:	4622      	mov	r2, r4
 8005652:	4631      	mov	r1, r6
 8005654:	bf28      	it	cs
 8005656:	463a      	movcs	r2, r7
 8005658:	f7ff fed0 	bl	80053fc <memcpy>
 800565c:	4631      	mov	r1, r6
 800565e:	4640      	mov	r0, r8
 8005660:	f7ff fef4 	bl	800544c <_free_r>
 8005664:	e7e1      	b.n	800562a <_realloc_r+0x1e>
 8005666:	4635      	mov	r5, r6
 8005668:	e7df      	b.n	800562a <_realloc_r+0x1e>
	...

0800566c <_sbrk_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4d06      	ldr	r5, [pc, #24]	; (8005688 <_sbrk_r+0x1c>)
 8005670:	2300      	movs	r3, #0
 8005672:	4604      	mov	r4, r0
 8005674:	4608      	mov	r0, r1
 8005676:	602b      	str	r3, [r5, #0]
 8005678:	f7fb fed0 	bl	800141c <_sbrk>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_sbrk_r+0x1a>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_sbrk_r+0x1a>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	20000260 	.word	0x20000260

0800568c <__malloc_lock>:
 800568c:	4801      	ldr	r0, [pc, #4]	; (8005694 <__malloc_lock+0x8>)
 800568e:	f000 b811 	b.w	80056b4 <__retarget_lock_acquire_recursive>
 8005692:	bf00      	nop
 8005694:	20000264 	.word	0x20000264

08005698 <__malloc_unlock>:
 8005698:	4801      	ldr	r0, [pc, #4]	; (80056a0 <__malloc_unlock+0x8>)
 800569a:	f000 b80c 	b.w	80056b6 <__retarget_lock_release_recursive>
 800569e:	bf00      	nop
 80056a0:	20000264 	.word	0x20000264

080056a4 <_malloc_usable_size_r>:
 80056a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056a8:	1f18      	subs	r0, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bfbc      	itt	lt
 80056ae:	580b      	ldrlt	r3, [r1, r0]
 80056b0:	18c0      	addlt	r0, r0, r3
 80056b2:	4770      	bx	lr

080056b4 <__retarget_lock_acquire_recursive>:
 80056b4:	4770      	bx	lr

080056b6 <__retarget_lock_release_recursive>:
 80056b6:	4770      	bx	lr

080056b8 <_init>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	bf00      	nop
 80056bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056be:	bc08      	pop	{r3}
 80056c0:	469e      	mov	lr, r3
 80056c2:	4770      	bx	lr

080056c4 <_fini>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	bf00      	nop
 80056c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ca:	bc08      	pop	{r3}
 80056cc:	469e      	mov	lr, r3
 80056ce:	4770      	bx	lr
